{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "INFO5731_Assignment_Three.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "USSdXHuqnwv9"
      },
      "source": [
        "# **INFO5731 Assignment Four**\n",
        "\n",
        "In this assignment, you are required to conduct topic modeling, sentiment analysis based on **the dataset you created from assignment three**."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YWxodXh5n4xF"
      },
      "source": [
        "# **Question 1: Topic Modeling**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TenBkDJ5n95k"
      },
      "source": [
        "(30 points). This question is designed to help you develop a feel for the way topic modeling works, the connection to the human meanings of documents. Based on the dataset from assignment three, write a python program to **identify the top 10 topics in the dataset**. Before answering this question, please review the materials in lesson 8, especially the code for LDA and LSA. The following information should be reported:\n",
        "\n",
        "(1) Features (top n-gram phrases) used for topic modeling.\n",
        "\n",
        "(2) Top 10 clusters for topic modeling.\n",
        "\n",
        "(3) Summarize and describe the topic for each cluster. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PuFPKhC0m1fd",
        "outputId": "198e752e-7361-47b0-ece9-4b54b8146096"
      },
      "source": [
        "import nltk, re, string, collections\n",
        "from nltk.corpus import stopwords\n",
        "import pandas as pd\n",
        "import requests\n",
        "from bs4 import BeautifulSoup\n",
        "import csv\n",
        "from pandas import DataFrame\n",
        "\n",
        "articles = pd.read_csv('/content/four.csv')\n",
        "\n",
        "def new_text(text):\n",
        "    \n",
        "    text = str(text).lower()\n",
        "    text = re.sub(r'\\[.*?\\]', '', text)\n",
        "    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)\n",
        "    text = re.sub(r'\\w*\\d\\w*', '', text)\n",
        "    return text\n",
        "\n",
        "articles.columns = ['Title']\n",
        "Data_main_list = []\n",
        "for name in articles.Title:\n",
        "  cleaned_text = new_text(name)\n",
        "  Data_main_list.append(cleaned_text)\n",
        "df_clean = pd.DataFrame(Data_main_list) \n",
        "df_clean.columns = ['Title']\n",
        "print(df_clean)\n",
        "\n"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "                                                Title\n",
            "0   text directly rather than eg titles and abstra...\n",
            "1   abstract language is way of communicating your...\n",
            "2   we report experiments on the use of standard n...\n",
            "3   this paper we will describe a simple rulebased...\n",
            "4   this paper focuses on connectionist models in ...\n",
            "..                                                ...\n",
            "86  abstract after twenty years of disfavor a tech...\n",
            "87  text statistics are frequently used in stylome...\n",
            "88  we summarize our experience using framenet in ...\n",
            "89  research in natural language processing nlp ha...\n",
            "90  natural language processing nlp programs are c...\n",
            "\n",
            "[91 rows x 1 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "KYf597wzSDNI",
        "outputId": "47482fcc-0acb-4639-c9d7-357e407ed691"
      },
      "source": [
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "words = stopwords.words('english')\n",
        "from textblob import Word\n",
        "from textblob import TextBlob\n",
        "nltk.download('punkt')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "articles['Title']=articles['Title'].apply(lambda x:\" \".join(x for x in x.split() if x not in words))\n",
        "articles['Title']=articles['Title'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "\n",
        "articles.head(10)\n"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Title</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>text directly (rather e.g. title abstracts), s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ABSTRACT: Language way communicating word Lang...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>We report experiment use standard natural lang...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>paper, describe simple rule-based approach aut...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>This paper focus connectionist model natural l...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>process language understanding. This new appro...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>paper (see [Schank 86] theoretical discussion ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Objectives To provide overview tutorial natura...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>This paper briefly describes current implement...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>based literature resources. We describe system...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Title\n",
              "0  text directly (rather e.g. title abstracts), s...\n",
              "1  ABSTRACT: Language way communicating word Lang...\n",
              "2  We report experiment use standard natural lang...\n",
              "3  paper, describe simple rule-based approach aut...\n",
              "4  This paper focus connectionist model natural l...\n",
              "5  process language understanding. This new appro...\n",
              "6  paper (see [Schank 86] theoretical discussion ...\n",
              "7  Objectives To provide overview tutorial natura...\n",
              "8  This paper briefly describes current implement...\n",
              "9  based literature resources. We describe system..."
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d5qiYZ5tSvSN",
        "outputId": "7bb25bbf-ce2b-4bb8-9d32-adee698e5a10"
      },
      "source": [
        "from nltk.util import ngrams \n",
        "import nltk, re, string, collections\n",
        "from nltk.corpus import stopwords\n",
        "import nltk\n",
        "nltk.download('punkt')\n",
        "\n",
        "word_gram = df_clean.Title.values\n",
        "word_gram = ' '.join([review for review in word_gram])\n",
        "word_gram\n",
        "\n",
        "word_tokens= nltk.word_tokenize(word_gram)\n",
        "def frequency(text, order):\n",
        "    t = ngrams(text, order)\n",
        "    t_freq = collections.Counter(t)\n",
        "    return t_freq\n",
        "\n",
        "\n",
        "Ngrams = frequency(word_tokens, 3)\n",
        "Ngrams= [print(b,t) for b, t in Ngrams.items()]"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "('text', 'directly', 'rather') 1\n",
            "('directly', 'rather', 'than') 1\n",
            "('rather', 'than', 'eg') 1\n",
            "('than', 'eg', 'titles') 1\n",
            "('eg', 'titles', 'and') 1\n",
            "('titles', 'and', 'abstracts') 1\n",
            "('and', 'abstracts', 'and') 1\n",
            "('abstracts', 'and', 'suggests') 1\n",
            "('and', 'suggests', 'appropriate') 1\n",
            "('suggests', 'appropriate', 'approaches') 1\n",
            "('appropriate', 'approaches', 'to') 1\n",
            "('approaches', 'to', 'doing') 1\n",
            "('to', 'doing', 'this') 1\n",
            "('doing', 'this', 'with') 1\n",
            "('this', 'with', 'a') 1\n",
            "('with', 'a', 'focus') 3\n",
            "('a', 'focus', 'on') 3\n",
            "('focus', 'on', 'the') 1\n",
            "('on', 'the', 'role') 1\n",
            "('the', 'role', 'of') 2\n",
            "('role', 'of', 'natural') 1\n",
            "('of', 'natural', 'language') 12\n",
            "('natural', 'language', 'processing') 60\n",
            "('language', 'processing', 'the') 2\n",
            "('processing', 'the', 'paper') 1\n",
            "('the', 'paper', 'also') 1\n",
            "('paper', 'also', 'comments') 1\n",
            "('also', 'comments', 'on') 1\n",
            "('comments', 'on', 'possible') 1\n",
            "('on', 'possible', 'connections') 1\n",
            "('possible', 'connections', 'with') 1\n",
            "('connections', 'with', 'data') 1\n",
            "('with', 'data', 'and') 1\n",
            "('data', 'and', 'knowledge') 1\n",
            "('and', 'knowledge', 'retrieval') 1\n",
            "('knowledge', 'retrieval', 'and') 1\n",
            "('retrieval', 'and', 'concludes') 1\n",
            "('and', 'concludes', 'by') 1\n",
            "('concludes', 'by', 'emphasizing') 1\n",
            "('by', 'emphasizing', 'the') 1\n",
            "('emphasizing', 'the', 'importance') 1\n",
            "('the', 'importance', 'of') 1\n",
            "('importance', 'of', 'rigorous') 1\n",
            "('of', 'rigorous', 'abstract') 1\n",
            "('rigorous', 'abstract', 'language') 1\n",
            "('abstract', 'language', 'is') 1\n",
            "('language', 'is', 'way') 1\n",
            "('is', 'way', 'of') 1\n",
            "('way', 'of', 'communicating') 1\n",
            "('of', 'communicating', 'your') 1\n",
            "('communicating', 'your', 'words') 1\n",
            "('your', 'words', 'language') 1\n",
            "('words', 'language', 'helps') 1\n",
            "('language', 'helps', 'in') 1\n",
            "('helps', 'in', 'understanding') 1\n",
            "('in', 'understanding', 'the') 1\n",
            "('understanding', 'the', 'worldwe') 1\n",
            "('the', 'worldwe', 'get') 1\n",
            "('worldwe', 'get', 'a') 1\n",
            "('get', 'a', 'better') 1\n",
            "('a', 'better', 'insight') 1\n",
            "('better', 'insight', 'of') 1\n",
            "('insight', 'of', 'the') 1\n",
            "('of', 'the', 'world') 1\n",
            "('the', 'world', 'language') 1\n",
            "('world', 'language', 'helps') 1\n",
            "('language', 'helps', 'speakers') 1\n",
            "('helps', 'speakers', 'to') 1\n",
            "('speakers', 'to', 'be') 1\n",
            "('to', 'be', 'as') 1\n",
            "('be', 'as', 'vague') 1\n",
            "('as', 'vague', 'or') 1\n",
            "('vague', 'or', 'as') 1\n",
            "('or', 'as', 'precise') 1\n",
            "('as', 'precise', 'as') 1\n",
            "('precise', 'as', 'they') 1\n",
            "('as', 'they', 'like') 1\n",
            "('they', 'like', 'nlp') 1\n",
            "('like', 'nlp', 'stands') 1\n",
            "('nlp', 'stands', 'for') 1\n",
            "('stands', 'for', 'natural') 1\n",
            "('for', 'natural', 'language') 4\n",
            "('language', 'processing', 'natural') 1\n",
            "('processing', 'natural', 'languages') 1\n",
            "('natural', 'languages', 'are') 1\n",
            "('languages', 'are', 'those') 1\n",
            "('are', 'those', 'languages') 1\n",
            "('those', 'languages', 'that') 1\n",
            "('languages', 'that', 'are') 1\n",
            "('that', 'are', 'spoken') 1\n",
            "('are', 'spoken', 'we') 1\n",
            "('spoken', 'we', 'report') 1\n",
            "('we', 'report', 'experiments') 1\n",
            "('report', 'experiments', 'on') 1\n",
            "('experiments', 'on', 'the') 1\n",
            "('on', 'the', 'use') 1\n",
            "('the', 'use', 'of') 4\n",
            "('use', 'of', 'standard') 1\n",
            "('of', 'standard', 'natural') 1\n",
            "('standard', 'natural', 'language') 1\n",
            "('language', 'processing', 'nlp') 19\n",
            "('processing', 'nlp', 'tools') 1\n",
            "('nlp', 'tools', 'for') 1\n",
            "('tools', 'for', 'the') 1\n",
            "('for', 'the', 'analysis') 1\n",
            "('the', 'analysis', 'of') 1\n",
            "('analysis', 'of', 'music') 1\n",
            "('of', 'music', 'lyrics') 1\n",
            "('music', 'lyrics', 'a') 1\n",
            "('lyrics', 'a', 'significant') 1\n",
            "('a', 'significant', 'amount') 1\n",
            "('significant', 'amount', 'of') 1\n",
            "('amount', 'of', 'music') 1\n",
            "('of', 'music', 'audio') 1\n",
            "('music', 'audio', 'has') 1\n",
            "('audio', 'has', 'lyrics') 1\n",
            "('has', 'lyrics', 'lyrics') 1\n",
            "('lyrics', 'lyrics', 'encode') 1\n",
            "('lyrics', 'encode', 'an') 1\n",
            "('encode', 'an', 'important') 1\n",
            "('an', 'important', 'part') 1\n",
            "('important', 'part', 'of') 1\n",
            "('part', 'of', 'the') 1\n",
            "('of', 'the', 'semantics') 1\n",
            "('the', 'semantics', 'of') 1\n",
            "('semantics', 'of', 'a') 1\n",
            "('of', 'a', 'song') 1\n",
            "('a', 'song', 'therefore') 1\n",
            "('song', 'therefore', 'their') 1\n",
            "('therefore', 'their', 'analysis') 1\n",
            "('their', 'analysis', 'complements') 1\n",
            "('analysis', 'complements', 'that') 1\n",
            "('complements', 'that', 'of') 1\n",
            "('that', 'of', 'acoustic') 1\n",
            "('of', 'acoustic', 'and') 1\n",
            "('acoustic', 'and', 'cultural') 1\n",
            "('and', 'cultural', 'this') 1\n",
            "('cultural', 'this', 'paper') 1\n",
            "('this', 'paper', 'we') 6\n",
            "('paper', 'we', 'will') 2\n",
            "('we', 'will', 'describe') 1\n",
            "('will', 'describe', 'a') 1\n",
            "('describe', 'a', 'simple') 1\n",
            "('a', 'simple', 'rulebased') 1\n",
            "('simple', 'rulebased', 'approach') 1\n",
            "('rulebased', 'approach', 'to') 1\n",
            "('approach', 'to', 'automated') 1\n",
            "('to', 'automated', 'learning') 1\n",
            "('automated', 'learning', 'of') 1\n",
            "('learning', 'of', 'linguistic') 1\n",
            "('of', 'linguistic', 'knowledge') 2\n",
            "('linguistic', 'knowledge', 'this') 1\n",
            "('knowledge', 'this', 'approach') 1\n",
            "('this', 'approach', 'has') 1\n",
            "('approach', 'has', 'been') 1\n",
            "('has', 'been', 'shown') 1\n",
            "('been', 'shown', 'for') 1\n",
            "('shown', 'for', 'a') 1\n",
            "('for', 'a', 'number') 1\n",
            "('a', 'number', 'of') 3\n",
            "('number', 'of', 'tasks') 2\n",
            "('of', 'tasks', 'to') 1\n",
            "('tasks', 'to', 'capture') 1\n",
            "('to', 'capture', 'information') 1\n",
            "('capture', 'information', 'in') 1\n",
            "('information', 'in', 'a') 1\n",
            "('in', 'a', 'clearer') 1\n",
            "('a', 'clearer', 'and') 1\n",
            "('clearer', 'and', 'more') 1\n",
            "('and', 'more', 'direct') 1\n",
            "('more', 'direct', 'fashion') 1\n",
            "('direct', 'fashion', 'without') 1\n",
            "('fashion', 'without', 'a') 1\n",
            "('without', 'a', 'compromise') 1\n",
            "('a', 'compromise', 'in') 1\n",
            "('compromise', 'in', 'performance') 1\n",
            "('in', 'performance', 'we') 1\n",
            "('performance', 'we', 'present') 1\n",
            "('we', 'present', 'a') 1\n",
            "('present', 'a', 'detailed') 1\n",
            "('a', 'detailed', 'case') 1\n",
            "('detailed', 'case', 'study') 1\n",
            "('case', 'study', 'of') 1\n",
            "('study', 'of', 'this') 1\n",
            "('of', 'this', 'learning') 1\n",
            "('this', 'learning', 'method') 1\n",
            "('learning', 'method', 'applied') 1\n",
            "('method', 'applied', 'to') 1\n",
            "('applied', 'to', 'part') 1\n",
            "('to', 'part', 'of') 1\n",
            "('part', 'of', 'speech') 1\n",
            "('of', 'speech', 'tagging') 1\n",
            "('speech', 'tagging', 'this') 1\n",
            "('tagging', 'this', 'paper') 1\n",
            "('this', 'paper', 'focuses') 1\n",
            "('paper', 'focuses', 'on') 1\n",
            "('focuses', 'on', 'connectionist') 1\n",
            "('on', 'connectionist', 'models') 1\n",
            "('connectionist', 'models', 'in') 1\n",
            "('models', 'in', 'natural') 1\n",
            "('in', 'natural', 'language') 17\n",
            "('language', 'processing', 'we') 4\n",
            "('processing', 'we', 'briefly') 1\n",
            "('we', 'briefly', 'present') 1\n",
            "('briefly', 'present', 'and') 1\n",
            "('present', 'and', 'discuss') 1\n",
            "('and', 'discuss', 'several') 1\n",
            "('discuss', 'several', 'aspects') 1\n",
            "('several', 'aspects', 'of') 1\n",
            "('aspects', 'of', 'high') 1\n",
            "('of', 'high', 'level') 1\n",
            "('high', 'level', 'tasks') 1\n",
            "('level', 'tasks', 'which') 1\n",
            "('tasks', 'which', 'recently') 1\n",
            "('which', 'recently', 'have') 1\n",
            "('recently', 'have', 'been') 1\n",
            "('have', 'been', 'approached') 1\n",
            "('been', 'approached', 'with') 1\n",
            "('approached', 'with', 'connectionism') 1\n",
            "('with', 'connectionism', 'either') 1\n",
            "('connectionism', 'either', 'with') 1\n",
            "('either', 'with', 'localist') 1\n",
            "('with', 'localist', 'or') 1\n",
            "('localist', 'or', 'parallel') 1\n",
            "('or', 'parallel', 'distributed') 1\n",
            "('parallel', 'distributed', 'processing') 1\n",
            "('distributed', 'processing', 'models') 1\n",
            "('processing', 'models', 'several') 1\n",
            "('models', 'several', 'interesting') 1\n",
            "('several', 'interesting', 'architectures') 1\n",
            "('interesting', 'architectures', 'process') 1\n",
            "('architectures', 'process', 'of') 1\n",
            "('process', 'of', 'language') 1\n",
            "('of', 'language', 'understanding') 1\n",
            "('language', 'understanding', 'this') 1\n",
            "('understanding', 'this', 'is') 1\n",
            "('this', 'is', 'a') 1\n",
            "('is', 'a', 'new') 1\n",
            "('a', 'new', 'approach') 1\n",
            "('new', 'approach', 'in') 1\n",
            "('approach', 'in', 'natural') 1\n",
            "('language', 'processing', 'based') 1\n",
            "('processing', 'based', 'on') 1\n",
            "('based', 'on', 'the') 2\n",
            "('on', 'the', 'deterministic') 1\n",
            "('the', 'deterministic', 'chaotic') 1\n",
            "('deterministic', 'chaotic', 'behavior') 1\n",
            "('chaotic', 'behavior', 'of') 1\n",
            "('behavior', 'of', 'dynamical') 1\n",
            "('of', 'dynamical', 'systems') 1\n",
            "('dynamical', 'systems', 'this') 1\n",
            "('systems', 'this', 'paper') 3\n",
            "('this', 'paper', 'see') 1\n",
            "('paper', 'see', 'for') 1\n",
            "('see', 'for', 'a') 1\n",
            "('for', 'a', 'theoretical') 1\n",
            "('a', 'theoretical', 'discussion') 1\n",
            "('theoretical', 'discussion', 'and') 1\n",
            "('discussion', 'and', 'and') 1\n",
            "('and', 'and', 'for') 1\n",
            "('and', 'for', 'brief') 1\n",
            "('for', 'brief', 'discussions') 1\n",
            "('brief', 'discussions', 'of') 1\n",
            "('discussions', 'of', 'a') 1\n",
            "('of', 'a', 'program') 1\n",
            "('a', 'program', 'built') 1\n",
            "('program', 'built', 'around') 1\n",
            "('built', 'around', 'these') 1\n",
            "('around', 'these', 'principles') 1\n",
            "('these', 'principles', 'the') 1\n",
            "('principles', 'the', 'goal') 1\n",
            "('the', 'goal', 'here') 1\n",
            "('goal', 'here', 'is') 1\n",
            "('here', 'is', 'simply') 1\n",
            "('is', 'simply', 'to') 1\n",
            "('simply', 'to', 'point') 1\n",
            "('to', 'point', 'out') 1\n",
            "('point', 'out', 'how') 1\n",
            "('out', 'how', 'our') 1\n",
            "('how', 'our', 'interest') 1\n",
            "('our', 'interest', 'in') 1\n",
            "('interest', 'in', 'natural') 1\n",
            "('language', 'processing', 'has') 2\n",
            "('processing', 'has', 'led') 1\n",
            "('has', 'led', 'us') 1\n",
            "('led', 'us', 'naturally') 1\n",
            "('us', 'naturally', 'and') 1\n",
            "('naturally', 'and', 'indeed') 1\n",
            "('and', 'indeed', 'inevitably') 1\n",
            "('indeed', 'inevitably', 'objectives') 1\n",
            "('inevitably', 'objectives', 'to') 1\n",
            "('objectives', 'to', 'provide') 1\n",
            "('to', 'provide', 'an') 1\n",
            "('provide', 'an', 'overview') 1\n",
            "('an', 'overview', 'and') 1\n",
            "('overview', 'and', 'tutorial') 1\n",
            "('and', 'tutorial', 'of') 1\n",
            "('tutorial', 'of', 'natural') 1\n",
            "('processing', 'nlp', 'and') 1\n",
            "('nlp', 'and', 'modern') 1\n",
            "('and', 'modern', 'nlpsystem') 1\n",
            "('modern', 'nlpsystem', 'design') 1\n",
            "('nlpsystem', 'design', 'target') 1\n",
            "('design', 'target', 'audience') 1\n",
            "('target', 'audience', 'this') 1\n",
            "('audience', 'this', 'tutorial') 1\n",
            "('this', 'tutorial', 'targets') 1\n",
            "('tutorial', 'targets', 'the') 1\n",
            "('targets', 'the', 'medical') 1\n",
            "('the', 'medical', 'informatics') 1\n",
            "('medical', 'informatics', 'generalist') 1\n",
            "('informatics', 'generalist', 'who') 1\n",
            "('generalist', 'who', 'has') 1\n",
            "('who', 'has', 'limited') 1\n",
            "('has', 'limited', 'acquaintance') 1\n",
            "('limited', 'acquaintance', 'with') 1\n",
            "('acquaintance', 'with', 'the') 1\n",
            "('with', 'the', 'principles') 1\n",
            "('the', 'principles', 'behind') 1\n",
            "('principles', 'behind', 'nlp') 1\n",
            "('behind', 'nlp', 'andor') 1\n",
            "('nlp', 'andor', 'limited') 1\n",
            "('andor', 'limited', 'knowledge') 1\n",
            "('limited', 'knowledge', 'of') 1\n",
            "('knowledge', 'of', 'the') 1\n",
            "('of', 'the', 'current') 2\n",
            "('the', 'current', 'state') 2\n",
            "('current', 'state', 'this') 1\n",
            "('state', 'this', 'paper') 1\n",
            "('this', 'paper', 'briefly') 1\n",
            "('paper', 'briefly', 'describes') 1\n",
            "('briefly', 'describes', 'the') 1\n",
            "('describes', 'the', 'current') 1\n",
            "('the', 'current', 'implementation') 1\n",
            "('current', 'implementation', 'status') 1\n",
            "('implementation', 'status', 'of') 1\n",
            "('status', 'of', 'an') 1\n",
            "('of', 'an', 'intelligent') 1\n",
            "('an', 'intelligent', 'information') 1\n",
            "('intelligent', 'information', 'retrieval') 1\n",
            "('information', 'retrieval', 'system') 2\n",
            "('retrieval', 'system', 'marie') 1\n",
            "('system', 'marie', 'that') 1\n",
            "('marie', 'that', 'employs') 1\n",
            "('that', 'employs', 'natural') 1\n",
            "('employs', 'natural', 'language') 1\n",
            "('language', 'processing', 'techniques') 3\n",
            "('processing', 'techniques', 'descriptive') 1\n",
            "('techniques', 'descriptive', 'captions') 1\n",
            "('descriptive', 'captions', 'are') 1\n",
            "('captions', 'are', 'used') 1\n",
            "('are', 'used', 'to') 1\n",
            "('used', 'to', 'iden') 1\n",
            "('to', 'iden', 'tify') 1\n",
            "('iden', 'tify', 'photographic') 1\n",
            "('tify', 'photographic', 'images') 1\n",
            "('photographic', 'images', 'concerning') 1\n",
            "('images', 'concerning', 'various') 1\n",
            "('concerning', 'various', 'military') 1\n",
            "('various', 'military', 'projects') 1\n",
            "('military', 'projects', 'the') 1\n",
            "('projects', 'the', 'captions') 1\n",
            "('the', 'captions', 'are') 1\n",
            "('captions', 'are', 'parsed') 1\n",
            "('are', 'parsed', 'based') 1\n",
            "('parsed', 'based', 'and') 1\n",
            "('based', 'and', 'literature') 1\n",
            "('and', 'literature', 'resources') 1\n",
            "('literature', 'resources', 'we') 1\n",
            "('resources', 'we', 'describe') 1\n",
            "('we', 'describe', 'here') 1\n",
            "('describe', 'here', 'a') 1\n",
            "('here', 'a', 'system') 1\n",
            "('a', 'system', 'for') 1\n",
            "('system', 'for', 'agent') 1\n",
            "('for', 'agent', 'directed') 1\n",
            "('agent', 'directed', 'natural') 1\n",
            "('directed', 'natural', 'language') 1\n",
            "('language', 'processing', 'to') 3\n",
            "('processing', 'to', 'extract') 1\n",
            "('to', 'extract', 'information') 1\n",
            "('extract', 'information', 'from') 1\n",
            "('information', 'from', 'journal') 1\n",
            "('from', 'journal', 'articles') 1\n",
            "('journal', 'articles', 'an') 1\n",
            "('articles', 'an', 'interface') 1\n",
            "('an', 'interface', 'was') 1\n",
            "('interface', 'was', 'developed') 1\n",
            "('was', 'developed', 'to') 1\n",
            "('developed', 'to', 'permit') 1\n",
            "('to', 'permit', 'curation') 1\n",
            "('permit', 'curation', 'of') 1\n",
            "('curation', 'of', 'the') 1\n",
            "('of', 'the', 'nlp') 1\n",
            "('the', 'nlp', 'results') 1\n",
            "('nlp', 'results', 'and') 1\n",
            "('results', 'and', 'deposition') 1\n",
            "('and', 'deposition', 'of') 1\n",
            "('deposition', 'of', 'accepted') 1\n",
            "('of', 'accepted', 'results') 1\n",
            "('accepted', 'results', 'into') 1\n",
            "('results', 'into', 'a') 1\n",
            "('into', 'a', 'knowledge') 1\n",
            "('a', 'knowledge', 'base') 1\n",
            "('knowledge', 'base', 'motivation') 1\n",
            "('base', 'motivation', 'the') 1\n",
            "('motivation', 'the', 'advent') 1\n",
            "('the', 'advent', 'of') 1\n",
            "('advent', 'of', 'high') 1\n",
            "('of', 'high', 'to') 1\n",
            "('high', 'to', 'evaluation') 1\n",
            "('to', 'evaluation', 'in') 1\n",
            "('evaluation', 'in', 'speech') 1\n",
            "('in', 'speech', 'processing') 1\n",
            "('speech', 'processing', 'part') 1\n",
            "('processing', 'part', 'surveys') 1\n",
            "('part', 'surveys', 'significant') 1\n",
            "('surveys', 'significant', 'evaluation') 1\n",
            "('significant', 'evaluation', 'work') 1\n",
            "('evaluation', 'work', 'done') 1\n",
            "('work', 'done', 'so') 1\n",
            "('done', 'so', 'far') 1\n",
            "('so', 'far', 'for') 1\n",
            "('far', 'for', 'instance') 1\n",
            "('for', 'instance', 'in') 1\n",
            "('instance', 'in', 'machine') 1\n",
            "('in', 'machine', 'translation') 1\n",
            "('machine', 'translation', 'and') 2\n",
            "('translation', 'and', 'discusses') 1\n",
            "('and', 'discusses', 'the') 1\n",
            "('discusses', 'the', 'particular') 1\n",
            "('the', 'particular', 'problems') 1\n",
            "('particular', 'problems', 'of') 1\n",
            "('problems', 'of', 'generic') 1\n",
            "('of', 'generic', 'system') 1\n",
            "('generic', 'system', 'evaluation') 1\n",
            "('system', 'evaluation', 'the') 1\n",
            "('evaluation', 'the', 'conclusion') 1\n",
            "('the', 'conclusion', 'is') 1\n",
            "('conclusion', 'is', 'that') 1\n",
            "('is', 'that', 'evaluation') 1\n",
            "('that', 'evaluation', 'strategies') 1\n",
            "('evaluation', 'strategies', 'and') 1\n",
            "('strategies', 'and', 'techniques') 1\n",
            "('and', 'techniques', 'for') 1\n",
            "('techniques', 'for', 'nlp') 1\n",
            "('for', 'nlp', 'need') 1\n",
            "('nlp', 'need', 'much') 1\n",
            "('need', 'much', 'more') 1\n",
            "('much', 'more', 'development') 1\n",
            "('more', 'development', 'in') 1\n",
            "('development', 'in', 'particular') 1\n",
            "('in', 'particular', 'similar') 1\n",
            "('particular', 'similar', 'to') 1\n",
            "('similar', 'to', 'the') 1\n",
            "('to', 'the', 'way') 1\n",
            "('the', 'way', 'humans') 1\n",
            "('way', 'humans', 'intuitively') 1\n",
            "('humans', 'intuitively', 'do') 1\n",
            "('intuitively', 'do', 'in') 1\n",
            "('do', 'in', 'order') 1\n",
            "('in', 'order', 'to') 2\n",
            "('order', 'to', 'eliminate') 1\n",
            "('to', 'eliminate', 'noisy') 1\n",
            "('eliminate', 'noisy', 'content') 1\n",
            "('noisy', 'content', 'in') 1\n",
            "('content', 'in', 'this') 1\n",
            "('in', 'this', 'paper') 5\n",
            "('paper', 'we', 'describe') 2\n",
            "('we', 'describe', 'a') 3\n",
            "('describe', 'a', 'combination') 1\n",
            "('a', 'combination', 'of') 1\n",
            "('combination', 'of', 'html') 1\n",
            "('of', 'html', 'dom') 1\n",
            "('html', 'dom', 'analysis') 1\n",
            "('dom', 'analysis', 'and') 1\n",
            "('analysis', 'and', 'natural') 1\n",
            "('and', 'natural', 'language') 2\n",
            "('processing', 'nlp', 'techniques') 2\n",
            "('nlp', 'techniques', 'for') 1\n",
            "('techniques', 'for', 'automated') 1\n",
            "('for', 'automated', 'extractions') 1\n",
            "('automated', 'extractions', 'of') 1\n",
            "('extractions', 'of', 'main') 1\n",
            "('of', 'main', 'article') 1\n",
            "('main', 'article', 'with') 1\n",
            "('article', 'with', 'associated') 1\n",
            "('with', 'associated', 'images') 1\n",
            "('associated', 'images', 'from') 1\n",
            "('images', 'from', 'web') 1\n",
            "('from', 'web', 'pages') 1\n",
            "('web', 'pages', 'abstract') 1\n",
            "('pages', 'abstract', 'natural') 1\n",
            "('abstract', 'natural', 'language') 2\n",
            "('language', 'processing', 'is') 3\n",
            "('processing', 'is', 'a') 1\n",
            "('is', 'a', 'theoretically') 1\n",
            "('a', 'theoretically', 'motivated') 1\n",
            "('theoretically', 'motivated', 'range') 1\n",
            "('motivated', 'range', 'of') 1\n",
            "('range', 'of', 'computational') 1\n",
            "('of', 'computational', 'techniques') 1\n",
            "('computational', 'techniques', 'for') 1\n",
            "('techniques', 'for', 'analysing') 1\n",
            "('for', 'analysing', 'and') 1\n",
            "('analysing', 'and', 'representing') 1\n",
            "('and', 'representing', 'naturally') 1\n",
            "('representing', 'naturally', 'occurring') 1\n",
            "('naturally', 'occurring', 'texts') 1\n",
            "('occurring', 'texts', 'at') 1\n",
            "('texts', 'at', 'one') 1\n",
            "('at', 'one', 'or') 1\n",
            "('one', 'or', 'more') 1\n",
            "('or', 'more', 'levels') 1\n",
            "('more', 'levels', 'of') 1\n",
            "('levels', 'of', 'linguistic') 1\n",
            "('of', 'linguistic', 'analysis') 1\n",
            "('linguistic', 'analysis', 'for') 1\n",
            "('analysis', 'for', 'the') 1\n",
            "('for', 'the', 'purpose') 1\n",
            "('the', 'purpose', 'of') 1\n",
            "('purpose', 'of', 'achieving') 1\n",
            "('of', 'achieving', 'humanlike') 1\n",
            "('achieving', 'humanlike', 'language') 1\n",
            "('humanlike', 'language', 'processing') 1\n",
            "('language', 'processing', 'for') 2\n",
            "('processing', 'for', 'a') 1\n",
            "('for', 'a', 'range') 1\n",
            "('a', 'range', 'of') 2\n",
            "('range', 'of', 'tasks') 1\n",
            "('of', 'tasks', 'this') 1\n",
            "('tasks', 'this', 'paper') 1\n",
            "('this', 'paper', 'reviews') 2\n",
            "('paper', 'reviews', 'the') 2\n",
            "('reviews', 'the', 'processes') 1\n",
            "('the', 'processes', 'involved') 1\n",
            "('processes', 'involved', 'in') 1\n",
            "('involved', 'in', 'natural') 1\n",
            "('processing', 'nlp', 'it') 1\n",
            "('nlp', 'it', 'then') 1\n",
            "('it', 'then', 'demonstrates') 1\n",
            "('then', 'demonstrates', 'the') 1\n",
            "('demonstrates', 'the', 'various') 1\n",
            "('the', 'various', 'kinds') 1\n",
            "('various', 'kinds', 'of') 1\n",
            "('kinds', 'of', 'choices') 1\n",
            "('of', 'choices', 'that') 1\n",
            "('choices', 'that', 'need') 1\n",
            "('that', 'need', 'be') 1\n",
            "('need', 'be', 'taken') 1\n",
            "('be', 'taken', 'during') 1\n",
            "('taken', 'during', 'the') 1\n",
            "('during', 'the', 'execution') 1\n",
            "('the', 'execution', 'of') 1\n",
            "('execution', 'of', 'the') 1\n",
            "('of', 'the', 'word') 2\n",
            "('the', 'word', 'morphology') 1\n",
            "('word', 'morphology', 'the') 1\n",
            "('morphology', 'the', 'syntactic') 1\n",
            "('the', 'syntactic', 'text') 1\n",
            "('syntactic', 'text', 'analysis') 1\n",
            "('text', 'analysis', 'or') 1\n",
            "('analysis', 'or', 'text') 1\n",
            "('or', 'text', 'generation') 1\n",
            "('text', 'generation', 'components') 1\n",
            "('generation', 'components', 'it') 1\n",
            "('components', 'it', 'compares') 1\n",
            "('it', 'compares', 'the') 1\n",
            "('compares', 'the', 'time') 1\n",
            "('the', 'time', 'complexity') 1\n",
            "('time', 'complexity', 'this') 1\n",
            "('complexity', 'this', 'article') 1\n",
            "('this', 'article', 'focusses') 1\n",
            "('article', 'focusses', 'on') 1\n",
            "('focusses', 'on', 'the') 1\n",
            "('on', 'the', 'derivation') 1\n",
            "('the', 'derivation', 'of') 1\n",
            "('derivation', 'of', 'large') 1\n",
            "('of', 'large', 'lexicons') 1\n",
            "('large', 'lexicons', 'for') 1\n",
            "('lexicons', 'for', 'natural') 1\n",
            "('processing', 'we', 'describe') 1\n",
            "('we', 'describe', 'the') 2\n",
            "('describe', 'the', 'development') 1\n",
            "('the', 'development', 'of') 3\n",
            "('development', 'of', 'a') 1\n",
            "('of', 'a', 'dictionary') 1\n",
            "('a', 'dictionary', 'support') 1\n",
            "('dictionary', 'support', 'environment') 1\n",
            "('support', 'environment', 'linking') 1\n",
            "('environment', 'linking', 'a') 1\n",
            "('linking', 'a', 'restructured') 1\n",
            "('a', 'restructured', 'version') 1\n",
            "('restructured', 'version', 'of') 1\n",
            "('version', 'of', 'the') 1\n",
            "('of', 'the', 'longman') 1\n",
            "('the', 'longman', 'dictionary') 1\n",
            "('longman', 'dictionary', 'of') 1\n",
            "('dictionary', 'of', 'contemporary') 1\n",
            "('of', 'contemporary', 'english') 1\n",
            "('contemporary', 'english', 'to') 1\n",
            "('english', 'to', 'natural') 1\n",
            "('to', 'natural', 'language') 2\n",
            "('language', 'processing', 'systems') 5\n",
            "('processing', 'systems', 'the') 2\n",
            "('systems', 'the', 'process') 1\n",
            "('the', 'process', 'we') 1\n",
            "('process', 'we', 'introduce') 1\n",
            "('we', 'introduce', 'a') 1\n",
            "('introduce', 'a', 'method') 1\n",
            "('a', 'method', 'for') 1\n",
            "('method', 'for', 'analyzing') 1\n",
            "('for', 'analyzing', 'the') 1\n",
            "('analyzing', 'the', 'complexity') 1\n",
            "('the', 'complexity', 'of') 1\n",
            "('complexity', 'of', 'natural') 1\n",
            "('language', 'processing', 'tasks') 1\n",
            "('processing', 'tasks', 'and') 1\n",
            "('tasks', 'and', 'for') 1\n",
            "('and', 'for', 'predicting') 1\n",
            "('for', 'predicting', 'the') 1\n",
            "('predicting', 'the', 'difficulty') 1\n",
            "('the', 'difficulty', 'new') 1\n",
            "('difficulty', 'new', 'nlp') 1\n",
            "('new', 'nlp', 'tasks') 1\n",
            "('nlp', 'tasks', 'our') 1\n",
            "('tasks', 'our', 'complexity') 1\n",
            "('our', 'complexity', 'measures') 1\n",
            "('complexity', 'measures', 'are') 1\n",
            "('measures', 'are', 'derived') 1\n",
            "('are', 'derived', 'from') 1\n",
            "('derived', 'from', 'the') 1\n",
            "('from', 'the', 'kolmogorov') 1\n",
            "('the', 'kolmogorov', 'complexity') 1\n",
            "('kolmogorov', 'complexity', 'of') 1\n",
            "('complexity', 'of', 'a') 1\n",
            "('of', 'a', 'class') 1\n",
            "('a', 'class', 'of') 1\n",
            "('class', 'of', 'automata') 1\n",
            "('of', 'automata', '—') 1\n",
            "('automata', '—', 'meaning') 1\n",
            "('—', 'meaning', 'automata') 1\n",
            "('meaning', 'automata', 'whose') 1\n",
            "('automata', 'whose', 'purpose') 1\n",
            "('whose', 'purpose', 'is') 1\n",
            "('purpose', 'is', 'to') 1\n",
            "('is', 'to', 'extract') 1\n",
            "('to', 'extract', 'relevant') 1\n",
            "('extract', 'relevant', 'pieces') 1\n",
            "('relevant', 'pieces', 'sounds') 1\n",
            "('pieces', 'sounds', 'text') 1\n",
            "('sounds', 'text', 'and') 1\n",
            "('text', 'and', 'motion') 1\n",
            "('and', 'motion', 'the') 1\n",
            "('motion', 'the', 'techniques') 1\n",
            "('the', 'techniques', 'developed') 1\n",
            "('techniques', 'developed', 'from') 1\n",
            "('developed', 'from', 'deep') 1\n",
            "('from', 'deep', 'learning') 1\n",
            "('deep', 'learning', 'research') 1\n",
            "('learning', 'research', 'have') 1\n",
            "('research', 'have', 'already') 1\n",
            "('have', 'already', 'been') 1\n",
            "('already', 'been', 'impacting') 1\n",
            "('been', 'impacting', 'the') 1\n",
            "('impacting', 'the', 'research') 1\n",
            "('the', 'research', 'of') 1\n",
            "('research', 'of', 'natural') 1\n",
            "('natural', 'language', 'process') 1\n",
            "('language', 'process', 'this') 1\n",
            "('process', 'this', 'paper') 1\n",
            "('reviews', 'the', 'recent') 1\n",
            "('the', 'recent', 'research') 1\n",
            "('recent', 'research', 'on') 1\n",
            "('research', 'on', 'deep') 1\n",
            "('on', 'deep', 'learning') 1\n",
            "('deep', 'learning', 'its') 1\n",
            "('learning', 'its', 'applications') 1\n",
            "('its', 'applications', 'and') 1\n",
            "('applications', 'and', 'recent') 1\n",
            "('and', 'recent', 'development') 1\n",
            "('recent', 'development', 'in') 2\n",
            "('development', 'in', 'natural') 2\n",
            "('language', 'processing', 'this') 1\n",
            "('processing', 'this', 'is') 1\n",
            "('this', 'is', 'an') 1\n",
            "('is', 'an', 'authorproduced') 1\n",
            "('an', 'authorproduced', 'version') 1\n",
            "('authorproduced', 'version', 'of') 1\n",
            "('version', 'of', 'a') 1\n",
            "('of', 'a', 'paper') 1\n",
            "('a', 'paper', 'published') 1\n",
            "('paper', 'published', 'in') 1\n",
            "('published', 'in', 'the') 1\n",
            "('in', 'the', 'abstract—natural') 1\n",
            "('the', 'abstract—natural', 'language') 1\n",
            "('abstract—natural', 'language', 'processing') 2\n",
            "('processing', 'nlp', 'is') 4\n",
            "('nlp', 'is', 'the') 1\n",
            "('is', 'the', 'application') 1\n",
            "('the', 'application', 'of') 4\n",
            "('application', 'of', 'automated') 1\n",
            "('of', 'automated', 'parsing') 1\n",
            "('automated', 'parsing', 'and') 1\n",
            "('parsing', 'and', 'machine') 1\n",
            "('and', 'machine', 'learning') 2\n",
            "('machine', 'learning', 'techniques') 2\n",
            "('learning', 'techniques', 'to') 1\n",
            "('techniques', 'to', 'analyze') 1\n",
            "('to', 'analyze', 'standard') 1\n",
            "('analyze', 'standard', 'text') 1\n",
            "('standard', 'text', 'applications') 1\n",
            "('text', 'applications', 'of') 1\n",
            "('applications', 'of', 'nlp') 1\n",
            "('of', 'nlp', 'to') 2\n",
            "('nlp', 'to', 'requirements') 1\n",
            "('to', 'requirements', 'engineering') 1\n",
            "('requirements', 'engineering', 'include') 1\n",
            "('engineering', 'include', 'extraction') 1\n",
            "('include', 'extraction', 'of') 1\n",
            "('extraction', 'of', 'ontologies') 1\n",
            "('of', 'ontologies', 'from') 1\n",
            "('ontologies', 'from', 'a') 1\n",
            "('from', 'a', 'requirements') 1\n",
            "('a', 'requirements', 'specification') 1\n",
            "('requirements', 'specification', 'and') 1\n",
            "('specification', 'and', 'use') 1\n",
            "('and', 'use', 'of') 2\n",
            "('use', 'of', 'nlp') 1\n",
            "('nlp', 'to', 'verify') 1\n",
            "('to', 'verify', 'the') 1\n",
            "('verify', 'the', 'consistency') 1\n",
            "('the', 'consistency', 'statistical') 1\n",
            "('consistency', 'statistical', 'baseline') 1\n",
            "('statistical', 'baseline', 'including') 1\n",
            "('baseline', 'including', 'the') 1\n",
            "('including', 'the', 'forgiving') 1\n",
            "('the', 'forgiving', 'nature') 1\n",
            "('forgiving', 'nature', 'but') 1\n",
            "('nature', 'but', 'broad') 1\n",
            "('but', 'broad', 'coverage') 1\n",
            "('broad', 'coverage', 'of') 1\n",
            "('coverage', 'of', 'the') 1\n",
            "('of', 'the', 'typical') 1\n",
            "('the', 'typical', 'retrieval') 1\n",
            "('typical', 'retrieval', 'task') 1\n",
            "('retrieval', 'task', 'the') 1\n",
            "('task', 'the', 'lack') 1\n",
            "('the', 'lack', 'of') 1\n",
            "('lack', 'of', 'good') 1\n",
            "('of', 'good', 'weighting') 1\n",
            "('good', 'weighting', 'schemes') 1\n",
            "('weighting', 'schemes', 'for') 1\n",
            "('schemes', 'for', 'compound') 1\n",
            "('for', 'compound', 'index') 1\n",
            "('compound', 'index', 'terms') 1\n",
            "('index', 'terms', 'and') 1\n",
            "('terms', 'and', 'the') 1\n",
            "('and', 'the', 'implicit') 1\n",
            "('the', 'implicit', 'linguistic') 1\n",
            "('implicit', 'linguistic', 'processing') 1\n",
            "('linguistic', 'processing', 'inherent') 1\n",
            "('processing', 'inherent', 'in') 1\n",
            "('inherent', 'in', 'the') 1\n",
            "('in', 'the', 'statistical') 1\n",
            "('the', 'statistical', 'methods') 1\n",
            "('statistical', 'methods', 'natural') 1\n",
            "('methods', 'natural', 'language') 1\n",
            "('processing', 'techniques', 'may') 1\n",
            "('techniques', 'may', 'be') 1\n",
            "('may', 'be', 'more') 1\n",
            "('be', 'more', 'important') 1\n",
            "('more', 'important', 'work') 1\n",
            "('important', 'work', 'in') 1\n",
            "('work', 'in', 'computational') 1\n",
            "('in', 'computational', 'linguistics') 2\n",
            "('computational', 'linguistics', 'began') 1\n",
            "('linguistics', 'began', 'very') 1\n",
            "('began', 'very', 'soon') 1\n",
            "('very', 'soon', 'after') 1\n",
            "('soon', 'after', 'the') 1\n",
            "('after', 'the', 'development') 1\n",
            "('development', 'of', 'the') 2\n",
            "('of', 'the', 'first') 1\n",
            "('the', 'first', 'computers') 1\n",
            "('first', 'computers', 'booth') 1\n",
            "('computers', 'booth', 'brandwood') 1\n",
            "('booth', 'brandwood', 'and') 1\n",
            "('brandwood', 'and', 'cleave') 1\n",
            "('and', 'cleave', 'yet') 1\n",
            "('cleave', 'yet', 'in') 1\n",
            "('yet', 'in', 'the') 1\n",
            "('in', 'the', 'intervening') 1\n",
            "('the', 'intervening', 'four') 1\n",
            "('intervening', 'four', 'decades') 1\n",
            "('four', 'decades', 'there') 1\n",
            "('decades', 'there', 'has') 1\n",
            "('there', 'has', 'been') 1\n",
            "('has', 'been', 'a') 1\n",
            "('been', 'a', 'pervasive') 1\n",
            "('a', 'pervasive', 'feeling') 1\n",
            "('pervasive', 'feeling', 'that') 1\n",
            "('feeling', 'that', 'progress') 1\n",
            "('that', 'progress', 'in') 1\n",
            "('progress', 'in', 'computer') 1\n",
            "('in', 'computer', 'understanding') 1\n",
            "('computer', 'understanding', 'of') 1\n",
            "('understanding', 'of', 'natural') 1\n",
            "('natural', 'language', 'has') 1\n",
            "('language', 'has', 'not') 1\n",
            "('has', 'not', 'been') 1\n",
            "('not', 'been', 'commensurate') 1\n",
            "('been', 'commensurate', 'the') 1\n",
            "('commensurate', 'the', 'voice') 1\n",
            "('the', 'voice', 'recognition') 1\n",
            "('voice', 'recognition', 'for') 1\n",
            "('recognition', 'for', 'a') 1\n",
            "('for', 'a', 'natural') 1\n",
            "('a', 'natural', 'language') 2\n",
            "('natural', 'language', 'tamil') 1\n",
            "('language', 'tamil', 'by') 1\n",
            "('tamil', 'by', 'combining') 1\n",
            "('by', 'combining', 'the') 1\n",
            "('combining', 'the', 'digital') 1\n",
            "('the', 'digital', 'and') 1\n",
            "('digital', 'and', 'mathematical') 1\n",
            "('and', 'mathematical', 'knowledge') 1\n",
            "('mathematical', 'knowledge', 'using') 1\n",
            "('knowledge', 'using', 'mfcc') 1\n",
            "('using', 'mfcc', 'and') 1\n",
            "('mfcc', 'and', 'dtw') 1\n",
            "('and', 'dtw', 'to') 1\n",
            "('dtw', 'to', 'extract') 1\n",
            "('to', 'extract', 'and') 1\n",
            "('extract', 'and', 'match') 1\n",
            "('and', 'match', 'the') 1\n",
            "('match', 'the', 'features') 1\n",
            "('the', 'features', 'to') 1\n",
            "('features', 'to', 'improve') 1\n",
            "('to', 'improve', 'the') 1\n",
            "('improve', 'the', 'accuracy') 1\n",
            "('the', 'accuracy', 'for') 1\n",
            "('accuracy', 'for', 'better') 1\n",
            "('for', 'better', 'performance') 1\n",
            "('better', 'performance', 'abstract') 1\n",
            "('performance', 'abstract', 'testing') 1\n",
            "('abstract', 'testing', 'against') 1\n",
            "('testing', 'against', 'natural') 1\n",
            "('against', 'natural', 'language') 1\n",
            "('natural', 'language', 'requirements') 1\n",
            "('language', 'requirements', 'is') 1\n",
            "('requirements', 'is', 'the') 1\n",
            "('is', 'the', 'standard') 1\n",
            "('the', 'standard', 'approach') 1\n",
            "('standard', 'approach', 'for') 1\n",
            "('approach', 'for', 'system') 1\n",
            "('for', 'system', 'and') 1\n",
            "('system', 'and', 'acceptance') 1\n",
            "('and', 'acceptance', 'testing') 1\n",
            "('acceptance', 'testing', 'this') 1\n",
            "('testing', 'this', 'test') 1\n",
            "('this', 'test', 'is') 1\n",
            "('test', 'is', 'often') 1\n",
            "('is', 'often', 'performed') 1\n",
            "('often', 'performed', 'by') 1\n",
            "('performed', 'by', 'an') 1\n",
            "('by', 'an', 'independent') 1\n",
            "('an', 'independent', 'test') 1\n",
            "('independent', 'test', 'organization') 1\n",
            "('test', 'organization', 'unfamiliar') 1\n",
            "('organization', 'unfamiliar', 'with') 1\n",
            "('unfamiliar', 'with', 'the') 1\n",
            "('with', 'the', 'application') 1\n",
            "('the', 'application', 'area') 1\n",
            "('application', 'area', 'the') 1\n",
            "('area', 'the', 'only') 1\n",
            "('the', 'only', 'things') 1\n",
            "('only', 'things', 'the') 1\n",
            "('things', 'the', 'testers') 1\n",
            "('the', 'testers', 'have') 1\n",
            "('testers', 'have', 'to') 1\n",
            "('have', 'to', 'go') 1\n",
            "('to', 'go', 'by') 1\n",
            "('go', 'by', 'are') 1\n",
            "('by', 'are', 'the') 1\n",
            "('are', 'the', 'written') 1\n",
            "('the', 'written', 'requirements') 1\n",
            "('written', 'requirements', 'so') 1\n",
            "('requirements', 'so', 'abstract') 1\n",
            "('so', 'abstract', 'not') 1\n",
            "('abstract', 'not', 'found') 7\n",
            "('not', 'found', 'conversational') 1\n",
            "('found', 'conversational', 'partners') 1\n",
            "('conversational', 'partners', 'but') 1\n",
            "('partners', 'but', 'it') 1\n",
            "('but', 'it', 'also') 1\n",
            "('it', 'also', 'provides') 1\n",
            "('also', 'provides', 'us') 1\n",
            "('provides', 'us', 'with') 1\n",
            "('us', 'with', 'information') 1\n",
            "('with', 'information', 'about') 1\n",
            "('information', 'about', 'being') 1\n",
            "('about', 'being', 'creative') 1\n",
            "('being', 'creative', 'making') 1\n",
            "('creative', 'making', 'associations') 1\n",
            "('making', 'associations', 'storytelling') 1\n",
            "('associations', 'storytelling', 'and') 1\n",
            "('storytelling', 'and', 'language') 1\n",
            "('and', 'language', 'use') 1\n",
            "('language', 'use', 'many') 1\n",
            "('use', 'many', 'more') 1\n",
            "('many', 'more', 'subtleties') 1\n",
            "('more', 'subtleties', 'in') 1\n",
            "('subtleties', 'in', 'facetoface') 1\n",
            "('in', 'facetoface', 'and') 1\n",
            "('facetoface', 'and', 'multiparty') 1\n",
            "('and', 'multiparty', 'interaction') 1\n",
            "('multiparty', 'interaction', 'can') 1\n",
            "('interaction', 'can', 'be') 1\n",
            "('can', 'be', 'added') 1\n",
            "('be', 'added', 'such') 1\n",
            "('added', 'such', 'as') 1\n",
            "('such', 'as', 'using') 1\n",
            "('as', 'using', 'humor') 1\n",
            "('using', 'humor', 'to') 1\n",
            "('humor', 'to', 'persuade') 1\n",
            "('to', 'persuade', 'and') 1\n",
            "('persuade', 'and', 'dominate') 1\n",
            "('and', 'dominate', 'to') 1\n",
            "('dominate', 'to', 'soften') 1\n",
            "('to', 'soften', 'or') 1\n",
            "('soften', 'or', 'avoid') 1\n",
            "('or', 'avoid', 'a') 1\n",
            "('avoid', 'a', 'face') 1\n",
            "('a', 'face', 'threatening') 1\n",
            "('face', 'threatening', 'act') 1\n",
            "('threatening', 'act', 'abstract') 1\n",
            "('act', 'abstract', 'not') 1\n",
            "('not', 'found', 'in') 2\n",
            "('found', 'in', 'recent') 1\n",
            "('in', 'recent', 'years') 2\n",
            "('recent', 'years', 'machine') 1\n",
            "('years', 'machine', 'learning') 1\n",
            "('machine', 'learning', 'ml') 2\n",
            "('learning', 'ml', 'has') 1\n",
            "('ml', 'has', 'been') 1\n",
            "('has', 'been', 'used') 1\n",
            "('been', 'used', 'more') 1\n",
            "('used', 'more', 'and') 1\n",
            "('more', 'and', 'more') 1\n",
            "('and', 'more', 'to') 1\n",
            "('more', 'to', 'solve') 1\n",
            "('to', 'solve', 'complex') 1\n",
            "('solve', 'complex', 'tasks') 1\n",
            "('complex', 'tasks', 'in') 1\n",
            "('tasks', 'in', 'different') 1\n",
            "('in', 'different', 'disciplines') 1\n",
            "('different', 'disciplines', 'ranging') 1\n",
            "('disciplines', 'ranging', 'from') 1\n",
            "('ranging', 'from', 'data') 1\n",
            "('from', 'data', 'mining') 1\n",
            "('data', 'mining', 'to') 1\n",
            "('mining', 'to', 'information') 1\n",
            "('to', 'information', 'we') 1\n",
            "('information', 'we', 'argue') 1\n",
            "('we', 'argue', 'that') 2\n",
            "('argue', 'that', 'manual') 1\n",
            "('that', 'manual', 'and') 1\n",
            "('manual', 'and', 'automatic') 1\n",
            "('and', 'automatic', 'thesauruses') 1\n",
            "('automatic', 'thesauruses', 'are') 1\n",
            "('thesauruses', 'are', 'alternative') 1\n",
            "('are', 'alternative', 'resources') 1\n",
            "('alternative', 'resources', 'for') 1\n",
            "('resources', 'for', 'the') 1\n",
            "('for', 'the', 'same') 1\n",
            "('the', 'same', 'nlp') 1\n",
            "('same', 'nlp', 'tasks') 1\n",
            "('nlp', 'tasks', 'this') 1\n",
            "('tasks', 'this', 'involves') 1\n",
            "('this', 'involves', 'the') 1\n",
            "('involves', 'the', 'radical') 1\n",
            "('the', 'radical', 'step') 1\n",
            "('radical', 'step', 'of') 1\n",
            "('step', 'of', 'interpreting') 1\n",
            "('of', 'interpreting', 'manual') 1\n",
            "('interpreting', 'manual', 'thesauruses') 1\n",
            "('manual', 'thesauruses', 'as') 1\n",
            "('thesauruses', 'as', 'classifications') 1\n",
            "('as', 'classifications', 'of') 1\n",
            "('classifications', 'of', 'words') 1\n",
            "('of', 'words', 'rather') 1\n",
            "('words', 'rather', 'than') 1\n",
            "('rather', 'than', 'word') 1\n",
            "('than', 'word', 'senses') 1\n",
            "('word', 'senses', 'the') 1\n",
            "('senses', 'the', 'case') 1\n",
            "('the', 'case', 'for') 1\n",
            "('case', 'for', 'this') 1\n",
            "('for', 'this', 'is') 1\n",
            "('this', 'is', 'made') 1\n",
            "('is', 'made', 'the') 1\n",
            "('made', 'the', 'range') 1\n",
            "('the', 'range', 'of') 1\n",
            "('range', 'of', 'roles') 1\n",
            "('of', 'roles', 'for') 1\n",
            "('roles', 'for', 'thesauruses') 1\n",
            "('for', 'thesauruses', 'within') 1\n",
            "('thesauruses', 'within', 'nlp') 1\n",
            "('within', 'nlp', 'is') 1\n",
            "('nlp', 'is', 'briefly') 1\n",
            "('is', 'briefly', 'presented') 1\n",
            "('briefly', 'presented', 'and') 1\n",
            "('presented', 'and', 'the') 1\n",
            "('and', 'the', 'wasps') 1\n",
            "('the', 'wasps', 'thesaurus') 1\n",
            "('wasps', 'thesaurus', 'is') 1\n",
            "('thesaurus', 'is', 'introduced') 1\n",
            "('is', 'introduced', 'thesaurus') 1\n",
            "('introduced', 'thesaurus', 'evaluation') 1\n",
            "('thesaurus', 'evaluation', 'is') 1\n",
            "('evaluation', 'is', 'now') 1\n",
            "('is', 'now', 'becoming') 1\n",
            "('now', 'becoming', 'urgent') 1\n",
            "('becoming', 'urgent', 'a') 1\n",
            "('urgent', 'a', 'range') 1\n",
            "('range', 'of', 'evaluation') 1\n",
            "('of', 'evaluation', 'strategies') 1\n",
            "('evaluation', 'strategies', 'all') 1\n",
            "('strategies', 'all', 'embedded') 1\n",
            "('all', 'embedded', 'within') 1\n",
            "('embedded', 'within', 'nlp') 1\n",
            "('within', 'nlp', 'tasks') 1\n",
            "('nlp', 'tasks', 'is') 1\n",
            "('tasks', 'is', 'proposed') 1\n",
            "('is', 'proposed', 'introduction') 1\n",
            "('proposed', 'introduction', 'patterns') 1\n",
            "('introduction', 'patterns', 'in') 1\n",
            "('patterns', 'in', 'music') 1\n",
            "('in', 'music', 'have') 1\n",
            "('music', 'have', 'been') 1\n",
            "('have', 'been', 'the') 1\n",
            "('been', 'the', 'object') 1\n",
            "('the', 'object', 'of') 1\n",
            "('object', 'of', 'intensive') 1\n",
            "('of', 'intensive', 'studies') 1\n",
            "('intensive', 'studies', 'in') 1\n",
            "('studies', 'in', 'the') 1\n",
            "('in', 'the', 'past') 1\n",
            "('the', 'past', 'years') 2\n",
            "('past', 'years', 'one') 1\n",
            "('years', 'one', 'of') 1\n",
            "('one', 'of', 'the') 1\n",
            "('of', 'the', 'purposes') 1\n",
            "('the', 'purposes', 'of') 1\n",
            "('purposes', 'of', 'analyzing') 1\n",
            "('of', 'analyzing', 'musical') 1\n",
            "('analyzing', 'musical', 'structure') 1\n",
            "('musical', 'structure', 'and') 1\n",
            "('structure', 'and', 'form') 1\n",
            "('and', 'form', 'is') 1\n",
            "('form', 'is', 'to') 1\n",
            "('is', 'to', 'discover') 1\n",
            "('to', 'discover', 'the') 1\n",
            "('discover', 'the', 'patterns') 1\n",
            "('the', 'patterns', 'that') 1\n",
            "('patterns', 'that', 'are') 1\n",
            "('that', 'are', 'explicit') 1\n",
            "('are', 'explicit', 'or') 1\n",
            "('explicit', 'or', 'implicit') 1\n",
            "('or', 'implicit', 'in') 1\n",
            "('implicit', 'in', 'musical') 1\n",
            "('in', 'musical', 'works') 1\n",
            "('musical', 'works', 'simon') 1\n",
            "('works', 'simon', 'patterns') 1\n",
            "('simon', 'patterns', 'comprise') 1\n",
            "('patterns', 'comprise', 'periodicity') 1\n",
            "('comprise', 'periodicity', 'make') 1\n",
            "('periodicity', 'make', 'use') 1\n",
            "('make', 'use', 'of') 1\n",
            "('use', 'of', 'alphabets') 1\n",
            "('of', 'alphabets', 'can') 1\n",
            "('alphabets', 'can', 'be') 1\n",
            "('can', 'be', 'compound') 1\n",
            "('be', 'compound', 'made') 1\n",
            "('compound', 'made', 'up') 1\n",
            "('made', 'up', 'of') 1\n",
            "('up', 'of', 'subpatterns') 1\n",
            "('of', 'subpatterns', 'and') 1\n",
            "('subpatterns', 'and', 'possess') 1\n",
            "('and', 'possess', 'phrase') 1\n",
            "('possess', 'phrase', 'structure') 1\n",
            "('phrase', 'structure', 'with') 1\n",
            "('structure', 'with', 'various') 1\n",
            "('with', 'various', 'forms') 1\n",
            "('various', 'forms', 'of') 1\n",
            "('forms', 'of', 'punctuation') 1\n",
            "('of', 'punctuation', 'traditionally') 1\n",
            "('punctuation', 'traditionally', 'composers') 1\n",
            "('traditionally', 'composers', 'have') 1\n",
            "('composers', 'have', 'employed') 1\n",
            "('have', 'employed', 'pattern') 1\n",
            "('employed', 'pattern', 'propagation') 1\n",
            "('pattern', 'propagation', 'intuitively') 1\n",
            "('propagation', 'intuitively', 'but') 1\n",
            "('intuitively', 'but', 'algorithmic') 1\n",
            "('but', 'algorithmic', 'composition') 1\n",
            "('algorithmic', 'composition', 'techniques') 1\n",
            "('composition', 'techniques', 'allow') 1\n",
            "('techniques', 'allow', 'the') 1\n",
            "('allow', 'the', 'pattern') 1\n",
            "('the', 'pattern', 'propagation') 1\n",
            "('pattern', 'propagation', 'to') 1\n",
            "('propagation', 'to', 'be') 1\n",
            "('to', 'be', 'formalized') 1\n",
            "('be', 'formalized', 'albeit') 1\n",
            "('formalized', 'albeit', 'a') 1\n",
            "('albeit', 'a', 'high') 1\n",
            "('a', 'high', 'level') 1\n",
            "('high', 'level', 'during') 1\n",
            "('level', 'during', 'composition') 1\n",
            "('during', 'composition', 'all') 1\n",
            "('composition', 'all', 'the') 1\n",
            "('all', 'the', 'musical') 1\n",
            "('the', 'musical', 'patterns') 1\n",
            "('musical', 'patterns', 'evolve') 1\n",
            "('patterns', 'evolve', 'according') 1\n",
            "('evolve', 'according', 'to') 1\n",
            "('according', 'to', 'the') 1\n",
            "('to', 'the', 'rules') 1\n",
            "('the', 'rules', 'and') 1\n",
            "('rules', 'and', 'constraints') 1\n",
            "('and', 'constraints', 'specied') 1\n",
            "('constraints', 'specied', 'at') 1\n",
            "('specied', 'at', 'the') 1\n",
            "('at', 'the', 'design') 1\n",
            "('the', 'design', 'stage') 1\n",
            "('design', 'stage', 'in') 1\n",
            "('stage', 'in', 'jazz') 1\n",
            "('in', 'jazz', 'improvisation') 1\n",
            "('jazz', 'improvisation', 'the') 1\n",
            "('improvisation', 'the', 'musician') 1\n",
            "('the', 'musician', 'invents') 1\n",
            "('musician', 'invents', 'a') 1\n",
            "('invents', 'a', 'solo') 1\n",
            "('a', 'solo', 'guided') 1\n",
            "('solo', 'guided', 'by') 1\n",
            "('guided', 'by', 'a') 1\n",
            "('by', 'a', 'progression') 1\n",
            "('a', 'progression', 'of') 1\n",
            "('progression', 'of', 'chords') 1\n",
            "('of', 'chords', 'the') 1\n",
            "('chords', 'the', 'changes') 1\n",
            "('the', 'changes', 'one') 1\n",
            "('changes', 'one', 'approach') 1\n",
            "('one', 'approach', 'to') 1\n",
            "('approach', 'to', 'learn') 1\n",
            "('to', 'learn', 'improvising') 1\n",
            "('learn', 'improvising', 'is') 1\n",
            "('improvising', 'is', 'to') 1\n",
            "('is', 'to', 'memorize') 1\n",
            "('to', 'memorize', 'patterns') 1\n",
            "('memorize', 'patterns', 'short') 1\n",
            "('patterns', 'short', 'chunks') 1\n",
            "('short', 'chunks', 'of') 1\n",
            "('chunks', 'of', 'music') 1\n",
            "('of', 'music', 'that') 1\n",
            "('music', 'that', 't') 1\n",
            "('that', 't', 'subprogressions') 1\n",
            "('t', 'subprogressions', 'and') 1\n",
            "('subprogressions', 'and', 'to') 1\n",
            "('and', 'to', 'concatenate') 1\n",
            "('to', 'concatenate', 'them') 1\n",
            "('concatenate', 'them', 'to') 1\n",
            "('them', 'to', 'form') 1\n",
            "('to', 'form', 'a') 1\n",
            "('form', 'a', 'whole') 1\n",
            "('a', 'whole', 'solo') 1\n",
            "('whole', 'solo', 'that') 1\n",
            "('solo', 'that', 'ts') 1\n",
            "('that', 'ts', 'a') 1\n",
            "('ts', 'a', 'whole') 1\n",
            "('a', 'whole', 'progression') 1\n",
            "('whole', 'progression', 'one') 1\n",
            "('progression', 'one', 'abstract') 1\n",
            "('one', 'abstract', 'many') 1\n",
            "('abstract', 'many', 'information') 1\n",
            "('many', 'information', 'retrievalir') 1\n",
            "('information', 'retrievalir', 'systems') 1\n",
            "('retrievalir', 'systems', 'retrieve') 1\n",
            "('systems', 'retrieve', 'relevant') 1\n",
            "('retrieve', 'relevant', 'documents') 1\n",
            "('relevant', 'documents', 'based') 1\n",
            "('documents', 'based', 'on') 1\n",
            "('based', 'on', 'exact') 1\n",
            "('on', 'exact', 'matching') 1\n",
            "('exact', 'matching', 'of') 1\n",
            "('matching', 'of', 'keywords') 1\n",
            "('of', 'keywords', 'between') 1\n",
            "('keywords', 'between', 'a') 1\n",
            "('between', 'a', 'query') 1\n",
            "('a', 'query', 'and') 1\n",
            "('query', 'and', 'documents') 1\n",
            "('and', 'documents', 'this') 1\n",
            "('documents', 'this', 'method') 1\n",
            "('this', 'method', 'degrades') 1\n",
            "('method', 'degrades', 'precision') 1\n",
            "('degrades', 'precision', 'rate') 1\n",
            "('precision', 'rate', 'in') 1\n",
            "('rate', 'in', 'order') 1\n",
            "('order', 'to', 'solve') 1\n",
            "('to', 'solve', 'the') 1\n",
            "('solve', 'the', 'problem') 1\n",
            "('the', 'problem', 'we') 1\n",
            "('problem', 'we', 'collected') 1\n",
            "('we', 'collected', 'semantically') 1\n",
            "('collected', 'semantically', 'related') 1\n",
            "('semantically', 'related', 'words') 1\n",
            "('related', 'words', 'and') 1\n",
            "('words', 'and', 'assigned') 1\n",
            "('and', 'assigned', 'semantic') 1\n",
            "('assigned', 'semantic', 'relationships') 1\n",
            "('semantic', 'relationships', 'used') 1\n",
            "('relationships', 'used', 'in') 1\n",
            "('used', 'in', 'general') 1\n",
            "('in', 'general', 'thesaurus') 1\n",
            "('general', 'thesaurus', 'and') 1\n",
            "('thesaurus', 'and', 'a') 1\n",
            "('and', 'a', 'special') 1\n",
            "('a', 'special', 'relationship') 1\n",
            "('special', 'relationship', 'called') 1\n",
            "('relationship', 'called', 'keyfact') 1\n",
            "('called', 'keyfact', 'termft') 1\n",
            "('keyfact', 'termft', 'manually') 1\n",
            "('termft', 'manually', 'in') 1\n",
            "('manually', 'in', 'addition') 1\n",
            "('in', 'addition', 'to') 1\n",
            "('addition', 'to', 'the') 1\n",
            "('to', 'the', 'semantic') 1\n",
            "('the', 'semantic', 'knowledge') 1\n",
            "('semantic', 'knowledge', 'we') 1\n",
            "('knowledge', 'we', 'automatically') 1\n",
            "('we', 'automatically', 'constructed') 1\n",
            "('automatically', 'constructed', 'statistic') 1\n",
            "('constructed', 'statistic', 'knowledge') 1\n",
            "('statistic', 'knowledge', 'based') 1\n",
            "('knowledge', 'based', 'on') 1\n",
            "('on', 'the', 'concept') 1\n",
            "('the', 'concept', 'of') 1\n",
            "('concept', 'of', 'mutual') 1\n",
            "('of', 'mutual', 'information') 1\n",
            "('mutual', 'information', 'keyfact') 1\n",
            "('information', 'keyfact', 'is') 1\n",
            "('keyfact', 'is', 'an') 1\n",
            "('is', 'an', 'extended') 1\n",
            "('an', 'extended', 'concept') 1\n",
            "('extended', 'concept', 'of') 1\n",
            "('concept', 'of', 'keyword') 1\n",
            "('of', 'keyword', 'represented') 1\n",
            "('keyword', 'represented', 'by') 1\n",
            "('represented', 'by', 'noun') 1\n",
            "('by', 'noun', 'and') 1\n",
            "('noun', 'and', 'compound') 1\n",
            "('and', 'compound', 'noun') 1\n",
            "('compound', 'noun', 'keyfact') 1\n",
            "('noun', 'keyfact', 'can') 1\n",
            "('keyfact', 'can', 'be') 1\n",
            "('can', 'be', 'a') 1\n",
            "('be', 'a', 'verb') 1\n",
            "('a', 'verb', 'and') 1\n",
            "('verb', 'and', 'an') 1\n",
            "('and', 'an', 'adjective') 1\n",
            "('an', 'adjective', 'including') 1\n",
            "('adjective', 'including', 'subject') 1\n",
            "('including', 'subject', 'or') 1\n",
            "('subject', 'or', 'object') 1\n",
            "('or', 'object', 'term') 1\n",
            "('object', 'term', 'we') 1\n",
            "('term', 'we', 'first') 1\n",
            "('we', 'first', 'retrieved') 1\n",
            "('first', 'retrieved', 'relevant') 1\n",
            "('retrieved', 'relevant', 'documents') 1\n",
            "('relevant', 'documents', 'with') 1\n",
            "('documents', 'with', 'original') 1\n",
            "('with', 'original', 'query') 1\n",
            "('original', 'query', 'using') 1\n",
            "('query', 'using', 'tf') 1\n",
            "('using', 'tf', 'idf') 1\n",
            "('tf', 'idf', 'weighting') 1\n",
            "('idf', 'weighting', 'formula') 1\n",
            "('weighting', 'formula', 'and') 1\n",
            "('formula', 'and', 'then') 1\n",
            "('and', 'then', 'an') 1\n",
            "('then', 'an', 'expanded') 1\n",
            "('an', 'expanded', 'query') 1\n",
            "('expanded', 'query', 'including') 1\n",
            "('query', 'including', 'keyfacts') 1\n",
            "('including', 'keyfacts', 'is') 1\n",
            "('keyfacts', 'is', 'used') 1\n",
            "('is', 'used', 'in') 1\n",
            "('used', 'in', 'both') 1\n",
            "('in', 'both', 'second') 1\n",
            "('both', 'second', 'document') 1\n",
            "('second', 'document', 'ranking') 1\n",
            "('document', 'ranking', 'and') 1\n",
            "('ranking', 'and', 'word') 1\n",
            "('and', 'word', 'sense') 1\n",
            "('word', 'sense', 'disambiguating') 1\n",
            "('sense', 'disambiguating', 'so') 1\n",
            "('disambiguating', 'so', 'we') 1\n",
            "('so', 'we', 'made') 1\n",
            "('we', 'made', 'an') 1\n",
            "('made', 'an', 'improvement') 1\n",
            "('an', 'improvement', 'in') 1\n",
            "('improvement', 'in', 'precision') 1\n",
            "('in', 'precision', 'rate') 1\n",
            "('precision', 'rate', 'using') 1\n",
            "('rate', 'using', 'keyfact') 1\n",
            "('using', 'keyfact', 'network') 1\n",
            "('keyfact', 'network', 'this') 1\n",
            "('network', 'this', 'paper') 1\n",
            "('paper', 'we', 'argue') 1\n",
            "('argue', 'that', 'questionanswering') 1\n",
            "('that', 'questionanswering', 'qa') 1\n",
            "('questionanswering', 'qa', 'over') 1\n",
            "('qa', 'over', 'technical') 1\n",
            "('over', 'technical', 'domains') 1\n",
            "('technical', 'domains', 'is') 1\n",
            "('domains', 'is', 'distinctly') 1\n",
            "('is', 'distinctly', 'different') 1\n",
            "('distinctly', 'different', 'from') 1\n",
            "('different', 'from', 'trecbased') 1\n",
            "('from', 'trecbased', 'qa') 1\n",
            "('trecbased', 'qa', 'or') 1\n",
            "('qa', 'or', 'webbased') 1\n",
            "('or', 'webbased', 'qa') 1\n",
            "('webbased', 'qa', 'and') 1\n",
            "('qa', 'and', 'it') 1\n",
            "('and', 'it', 'can') 1\n",
            "('it', 'can', 'not') 1\n",
            "('can', 'not', 'benefit') 1\n",
            "('not', 'benefit', 'lom') 1\n",
            "('benefit', 'lom', 'dataintensive') 1\n",
            "('lom', 'dataintensive', 'approaches') 1\n",
            "('dataintensive', 'approaches', 'universitquotat') 1\n",
            "('approaches', 'universitquotat', 'des') 1\n",
            "('universitquotat', 'des', 'saarlandes') 1\n",
            "('des', 'saarlandes', 'proceedings') 1\n",
            "('saarlandes', 'proceedings', 'of') 1\n",
            "('proceedings', 'of', 'the') 1\n",
            "('of', 'the', 'workshop') 1\n",
            "('the', 'workshop', 'on') 1\n",
            "('workshop', 'on', 'unihamburgde') 1\n",
            "('on', 'unihamburgde', 'abstract') 1\n",
            "('unihamburgde', 'abstract', 'not') 1\n",
            "('not', 'found', 'abstract') 2\n",
            "('found', 'abstract', 'not') 1\n",
            "('not', 'found', 'sri') 1\n",
            "('found', 'sri', 'has') 1\n",
            "('sri', 'has', 'developed') 1\n",
            "('has', 'developed', 'a') 1\n",
            "('developed', 'a', 'new') 1\n",
            "('a', 'new', 'architecture') 1\n",
            "('new', 'architecture', 'for') 1\n",
            "('architecture', 'for', 'integrating') 1\n",
            "('for', 'integrating', 'speech') 1\n",
            "('integrating', 'speech', 'and') 1\n",
            "('speech', 'and', 'naturallanguage') 1\n",
            "('and', 'naturallanguage', 'processing') 1\n",
            "('naturallanguage', 'processing', 'that') 1\n",
            "('processing', 'that', 'applies') 1\n",
            "('that', 'applies', 'linguistic') 1\n",
            "('applies', 'linguistic', 'constraints') 1\n",
            "('linguistic', 'constraints', 'during') 1\n",
            "('constraints', 'during', 'recognition') 1\n",
            "('during', 'recognition', 'by') 1\n",
            "('recognition', 'by', 'incrementally') 1\n",
            "('by', 'incrementally', 'expanding') 1\n",
            "('incrementally', 'expanding', 'the') 1\n",
            "('expanding', 'the', 'statetransition') 1\n",
            "('the', 'statetransition', 'network') 1\n",
            "('statetransition', 'network', 'embodied') 1\n",
            "('network', 'embodied', 'in') 1\n",
            "('embodied', 'in', 'a') 1\n",
            "('in', 'a', 'unification') 1\n",
            "('a', 'unification', 'grammar') 1\n",
            "('unification', 'grammar', 'we') 1\n",
            "('grammar', 'we', 'compare') 1\n",
            "('we', 'compare', 'this') 1\n",
            "('compare', 'this', 'dynamicgralnlnarnetwork') 1\n",
            "('this', 'dynamicgralnlnarnetwork', 'dgn') 1\n",
            "('dynamicgralnlnarnetwork', 'dgn', 'approach') 1\n",
            "('dgn', 'approach', 'this') 1\n",
            "('approach', 'this', 'chapter') 1\n",
            "('this', 'chapter', 'considers') 1\n",
            "('chapter', 'considers', 'the') 1\n",
            "('considers', 'the', 'revolution') 1\n",
            "('the', 'revolution', 'that') 1\n",
            "('revolution', 'that', 'has') 1\n",
            "('that', 'has', 'taken') 1\n",
            "('has', 'taken', 'place') 1\n",
            "('taken', 'place', 'in') 1\n",
            "('place', 'in', 'natural') 1\n",
            "('language', 'processing', 'research') 1\n",
            "('processing', 'research', 'over') 1\n",
            "('research', 'over', 'the') 1\n",
            "('over', 'the', 'last') 4\n",
            "('the', 'last', 'five') 1\n",
            "('last', 'five', 'years') 1\n",
            "('five', 'years', 'it') 1\n",
            "('years', 'it', 'begins') 1\n",
            "('it', 'begins', 'by') 1\n",
            "('begins', 'by', 'providing') 1\n",
            "('by', 'providing', 'a') 1\n",
            "('providing', 'a', 'brief') 1\n",
            "('a', 'brief', 'guide') 1\n",
            "('brief', 'guide', 'to') 1\n",
            "('guide', 'to', 'the') 1\n",
            "('to', 'the', 'structure') 1\n",
            "('the', 'structure', 'of') 1\n",
            "('structure', 'of', 'the') 1\n",
            "('of', 'the', 'field') 1\n",
            "('the', 'field', 'and') 1\n",
            "('field', 'and', 'then') 1\n",
            "('and', 'then', 'presents') 1\n",
            "('then', 'presents', 'a') 1\n",
            "('presents', 'a', 'caricature') 1\n",
            "('a', 'caricature', 'of') 1\n",
            "('caricature', 'of', 'two') 1\n",
            "('of', 'two', 'competing') 1\n",
            "('two', 'competing', 'paradigms') 1\n",
            "('competing', 'paradigms', 'of') 1\n",
            "('paradigms', 'of', 'nlp') 1\n",
            "('of', 'nlp', 'research') 1\n",
            "('nlp', 'research', 'and') 1\n",
            "('research', 'and', 'indicates') 1\n",
            "('and', 'indicates', 'the') 1\n",
            "('indicates', 'the', 'reasons') 1\n",
            "('the', 'reasons', 'visual') 1\n",
            "('reasons', 'visual', 'development') 1\n",
            "('visual', 'development', 'environment') 1\n",
            "('development', 'environment', 'to') 1\n",
            "('environment', 'to', 'support') 1\n",
            "('to', 'support', 'the') 1\n",
            "('support', 'the', 'visual') 1\n",
            "('the', 'visual', 'assembly') 1\n",
            "('visual', 'assembly', 'execution') 1\n",
            "('assembly', 'execution', 'and') 1\n",
            "('execution', 'and', 'analysis') 1\n",
            "('and', 'analysis', 'of') 1\n",
            "('analysis', 'of', 'modular') 1\n",
            "('of', 'modular', 'natural') 1\n",
            "('modular', 'natural', 'language') 1\n",
            "('systems', 'the', 'visual') 1\n",
            "('the', 'visual', 'model') 1\n",
            "('visual', 'model', 'is') 1\n",
            "('model', 'is', 'an') 1\n",
            "('is', 'an', 'executable') 1\n",
            "('an', 'executable', 'data') 1\n",
            "('executable', 'data', 'flow') 1\n",
            "('data', 'flow', 'program') 1\n",
            "('flow', 'program', 'graph') 1\n",
            "('program', 'graph', 'automatically') 1\n",
            "('graph', 'automatically', 'synthesised') 1\n",
            "('automatically', 'synthesised', 'from') 1\n",
            "('synthesised', 'from', 'data') 1\n",
            "('from', 'data', 'dependency') 1\n",
            "('data', 'dependency', 'declarations') 1\n",
            "('dependency', 'declarations', 'of') 1\n",
            "('declarations', 'of', 'language') 1\n",
            "('of', 'language', 'processing') 2\n",
            "('language', 'processing', 'modules') 1\n",
            "('processing', 'modules', 'the') 1\n",
            "('modules', 'the', 'graph') 1\n",
            "('the', 'graph', 'in') 1\n",
            "('graph', 'in', 'this') 1\n",
            "('in', 'this', 'chapter') 1\n",
            "('this', 'chapter', 'the') 1\n",
            "('chapter', 'the', 'basic') 1\n",
            "('the', 'basic', 'uses') 1\n",
            "('basic', 'uses', 'of') 1\n",
            "('uses', 'of', 'description') 1\n",
            "('of', 'description', 'logics') 2\n",
            "('description', 'logics', 'for') 1\n",
            "('logics', 'for', 'natural') 1\n",
            "('language', 'processing', 'will') 1\n",
            "('processing', 'will', 'be') 1\n",
            "('will', 'be', 'analysed') 1\n",
            "('be', 'analysed', 'together') 1\n",
            "('analysed', 'together', 'with') 1\n",
            "('together', 'with', 'a') 1\n",
            "('with', 'a', 'little') 1\n",
            "('a', 'little', 'bit') 1\n",
            "('little', 'bit', 'of') 1\n",
            "('bit', 'of', 'history') 1\n",
            "('of', 'history', 'and') 2\n",
            "('history', 'and', 'the') 1\n",
            "('and', 'the', 'role') 1\n",
            "('role', 'of', 'description') 1\n",
            "('description', 'logics', 'in') 1\n",
            "('logics', 'in', 'the') 1\n",
            "('in', 'the', 'current') 1\n",
            "('current', 'state', 'of') 1\n",
            "('state', 'of', 'the') 3\n",
            "('of', 'the', 'art') 3\n",
            "('the', 'art', 'in') 1\n",
            "('art', 'in', 'computational') 1\n",
            "('computational', 'linguistics', 'will') 1\n",
            "('linguistics', 'will', 'be') 1\n",
            "('will', 'be', 'pointed') 1\n",
            "('be', 'pointed', 'out') 1\n",
            "('pointed', 'out', 'introduction') 1\n",
            "('out', 'introduction', 'since') 1\n",
            "('introduction', 'since', 'the') 1\n",
            "('since', 'the', 'early') 1\n",
            "('the', 'early', 'days') 1\n",
            "('early', 'days', 'we') 1\n",
            "('days', 'we', 'applied') 1\n",
            "('we', 'applied', 'a') 1\n",
            "('applied', 'a', 'structure') 1\n",
            "('a', 'structure', 'learning') 1\n",
            "('structure', 'learning', 'model') 1\n",
            "('learning', 'model', 'maxmargin') 1\n",
            "('model', 'maxmargin', 'structure') 1\n",
            "('maxmargin', 'structure', 'mms') 1\n",
            "('structure', 'mms', 'to') 1\n",
            "('mms', 'to', 'natural') 1\n",
            "('processing', 'nlp', 'tasks') 3\n",
            "('nlp', 'tasks', 'where') 1\n",
            "('tasks', 'where', 'the') 1\n",
            "('where', 'the', 'aim') 1\n",
            "('the', 'aim', 'is') 1\n",
            "('aim', 'is', 'to') 1\n",
            "('is', 'to', 'capture') 1\n",
            "('to', 'capture', 'the') 1\n",
            "('capture', 'the', 'latent') 1\n",
            "('the', 'latent', 'relationships') 1\n",
            "('latent', 'relationships', 'within') 1\n",
            "('relationships', 'within', 'the') 1\n",
            "('within', 'the', 'output') 1\n",
            "('the', 'output', 'language') 1\n",
            "('output', 'language', 'domain') 1\n",
            "('language', 'domain', 'we') 1\n",
            "('domain', 'we', 'formulate') 1\n",
            "('we', 'formulate', 'this') 1\n",
            "('formulate', 'this', 'model') 1\n",
            "('this', 'model', 'as') 1\n",
            "('model', 'as', 'an') 1\n",
            "('as', 'an', 'extension') 1\n",
            "('an', 'extension', 'of') 1\n",
            "('extension', 'of', 'multi–class') 1\n",
            "('of', 'multi–class', 'support') 1\n",
            "('multi–class', 'support', 'vector') 1\n",
            "('support', 'vector', 'machine') 1\n",
            "('vector', 'machine', 'svm') 1\n",
            "('machine', 'svm', 'and') 1\n",
            "('svm', 'and', 'present') 1\n",
            "('and', 'present', 'a') 1\n",
            "('present', 'a', 'mation') 1\n",
            "('a', 'mation', 'infrastructure') 1\n",
            "('mation', 'infrastructure', 'digital') 1\n",
            "('infrastructure', 'digital', 'libraries') 1\n",
            "('digital', 'libraries', 'networked') 1\n",
            "('libraries', 'networked', 'services') 1\n",
            "('networked', 'services', 'digital') 1\n",
            "('services', 'digital', 'convergence') 1\n",
            "('digital', 'convergence', 'or') 1\n",
            "('convergence', 'or', 'intelligent') 1\n",
            "('or', 'intelligent', 'agents') 1\n",
            "('intelligent', 'agents', 'this') 1\n",
            "('agents', 'this', 'attention') 1\n",
            "('this', 'attention', 'is') 1\n",
            "('attention', 'is', 'moving') 1\n",
            "('is', 'moving', 'natural') 1\n",
            "('moving', 'natural', 'language') 1\n",
            "('language', 'processing', 'along') 1\n",
            "('processing', 'along', 'the') 1\n",
            "('along', 'the', 'critical') 1\n",
            "('the', 'critical', 'path') 1\n",
            "('critical', 'path', 'for') 1\n",
            "('path', 'for', 'all') 1\n",
            "('for', 'all', 'kinds') 1\n",
            "('all', 'kinds', 'of') 1\n",
            "('kinds', 'of', 'novel') 1\n",
            "('of', 'novel', 'applications') 1\n",
            "('novel', 'applications', 'this') 1\n",
            "('applications', 'this', 'article') 1\n",
            "('this', 'article', 'will') 1\n",
            "('article', 'will', 'mention') 1\n",
            "('will', 'mention', 'a') 1\n",
            "('mention', 'a', 'number') 1\n",
            "('number', 'of', 'successful') 1\n",
            "('of', 'successful', 'applications') 1\n",
            "('successful', 'applications', 'of') 1\n",
            "('applications', 'of', 'natural') 1\n",
            "('processing', 'nlp', 'over') 1\n",
            "('nlp', 'over', 'the') 1\n",
            "('the', 'last', 'few') 1\n",
            "('last', 'few', 'years') 1\n",
            "('few', 'years', 'a') 1\n",
            "('years', 'a', 'number') 1\n",
            "('number', 'of', 'areas') 1\n",
            "('of', 'areas', 'of') 1\n",
            "('areas', 'of', 'natural') 1\n",
            "('language', 'processing', 'have') 1\n",
            "('processing', 'have', 'begun') 1\n",
            "('have', 'begun', 'applying') 1\n",
            "('begun', 'applying', 'graphbased') 1\n",
            "('applying', 'graphbased', 'techniques') 1\n",
            "('graphbased', 'techniques', 'these') 1\n",
            "('techniques', 'these', 'include') 1\n",
            "('these', 'include', 'among') 1\n",
            "('include', 'among', 'others') 1\n",
            "('among', 'others', 'text') 1\n",
            "('others', 'text', 'summarization') 1\n",
            "('text', 'summarization', 'syntactic') 1\n",
            "('summarization', 'syntactic', 'parsing') 1\n",
            "('syntactic', 'parsing', 'word') 1\n",
            "('parsing', 'word', 'sense') 2\n",
            "('word', 'sense', 'disambiguation') 2\n",
            "('sense', 'disambiguation', 'ontology') 1\n",
            "('disambiguation', 'ontology', 'construction') 1\n",
            "('ontology', 'construction', 'sentiment') 1\n",
            "('construction', 'sentiment', 'and') 1\n",
            "('sentiment', 'and', 'subjectivity') 1\n",
            "('and', 'subjectivity', 'analysis') 1\n",
            "('subjectivity', 'analysis', 'text') 1\n",
            "('analysis', 'text', 'clustering') 1\n",
            "('text', 'clustering', 'in') 1\n",
            "('clustering', 'in', 'natural') 1\n",
            "('processing', 'nlp', 'research') 1\n",
            "('nlp', 'research', 'results') 1\n",
            "('research', 'results', 'from') 1\n",
            "('results', 'from', 'software') 1\n",
            "('from', 'software', 'engineering') 1\n",
            "('software', 'engineering', 'and') 1\n",
            "('engineering', 'and', 'software') 1\n",
            "('and', 'software', 'technology') 1\n",
            "('software', 'technology', 'have') 1\n",
            "('technology', 'have', 'often') 1\n",
            "('have', 'often', 'been') 1\n",
            "('often', 'been', 'neglected') 1\n",
            "('been', 'neglected', 'of') 1\n",
            "('neglected', 'of', 'kernelized') 1\n",
            "('of', 'kernelized', 'sorting') 1\n",
            "('kernelized', 'sorting', 'to') 1\n",
            "('sorting', 'to', 'increase') 1\n",
            "('to', 'increase', 'its') 1\n",
            "('increase', 'its', 'robustness') 1\n",
            "('its', 'robustness', 'and') 1\n",
            "('robustness', 'and', 'performance') 1\n",
            "('and', 'performance', 'on') 1\n",
            "('performance', 'on', 'several') 1\n",
            "('on', 'several', 'natural') 1\n",
            "('several', 'natural', 'language') 1\n",
            "('nlp', 'tasks', 'document') 1\n",
            "('tasks', 'document', 'matching') 1\n",
            "('document', 'matching', 'from') 1\n",
            "('matching', 'from', 'parallel') 1\n",
            "('from', 'parallel', 'and') 1\n",
            "('parallel', 'and', 'comparable') 1\n",
            "('and', 'comparable', 'corpora') 1\n",
            "('comparable', 'corpora', 'machine') 1\n",
            "('corpora', 'machine', 'transliteration') 1\n",
            "('machine', 'transliteration', 'and') 1\n",
            "('transliteration', 'and', 'even') 1\n",
            "('and', 'even', 'image') 1\n",
            "('even', 'image', 'processing') 1\n",
            "('image', 'processing', 'empirically') 1\n",
            "('processing', 'empirically', 'we') 1\n",
            "('empirically', 'we', 'show') 1\n",
            "('we', 'show', 'that') 1\n",
            "('show', 'that', 'on') 1\n",
            "('that', 'on', 'these') 1\n",
            "('on', 'these', 'tasks') 1\n",
            "('these', 'tasks', 'a') 1\n",
            "('tasks', 'a', 'semisupervised') 1\n",
            "('a', 'semisupervised', 'variant') 1\n",
            "('semisupervised', 'variant', 'of') 1\n",
            "('variant', 'of', 'kernelized') 1\n",
            "('of', 'kernelized', 'will') 1\n",
            "('kernelized', 'will', 'be') 1\n",
            "('will', 'be', 'structured') 1\n",
            "('be', 'structured', 'in') 1\n",
            "('structured', 'in', 'the') 1\n",
            "('in', 'the', 'words') 1\n",
            "('the', 'words', 'of') 1\n",
            "('words', 'of', 'statistical') 1\n",
            "('of', 'statistical', 'natural') 1\n",
            "('statistical', 'natural', 'language') 1\n",
            "('processing', 'we', 'need') 1\n",
            "('we', 'need', 'a') 1\n",
            "('need', 'a', 'sophisticated') 1\n",
            "('a', 'sophisticated', 'statistical') 1\n",
            "('sophisticated', 'statistical', 'model') 1\n",
            "('statistical', 'model', 'of') 1\n",
            "('model', 'of', 'the') 2\n",
            "('of', 'the', 'basic') 1\n",
            "('the', 'basic', 'elements') 1\n",
            "('basic', 'elements', 'such') 1\n",
            "('elements', 'such', 'as') 1\n",
            "('such', 'as', 'words') 1\n",
            "('as', 'words', 'or') 1\n",
            "('words', 'or', 'phrases') 1\n",
            "('or', 'phrases', 'to') 1\n",
            "('phrases', 'to', 'be') 1\n",
            "('to', 'be', 'combined') 1\n",
            "('be', 'combined', 'with') 1\n",
            "('combined', 'with', 'the') 1\n",
            "('with', 'the', 'structural') 1\n",
            "('the', 'structural', 'modeling') 1\n",
            "('structural', 'modeling', 'such') 1\n",
            "('modeling', 'such', 'as') 1\n",
            "('such', 'as', 'syntactic') 1\n",
            "('as', 'syntactic', 'parsing') 1\n",
            "('syntactic', 'parsing', 'or') 1\n",
            "('parsing', 'or', 'dependency') 1\n",
            "('or', 'dependency', 'analysis') 1\n",
            "('dependency', 'analysis', 'since') 1\n",
            "('analysis', 'since', 'the') 1\n",
            "('since', 'the', 'basic') 1\n",
            "('the', 'basic', 'property') 1\n",
            "('basic', 'property', 'of') 1\n",
            "('property', 'of', 'these') 1\n",
            "('of', 'these', 'elements') 1\n",
            "('these', 'elements', 'in') 1\n",
            "('elements', 'in', 'this') 1\n",
            "('describe', 'a', 'framework') 1\n",
            "('a', 'framework', 'for') 1\n",
            "('framework', 'for', 'developing') 1\n",
            "('for', 'developing', 'probabilistic') 1\n",
            "('developing', 'probabilistic', 'classifiers') 1\n",
            "('probabilistic', 'classifiers', 'in') 1\n",
            "('classifiers', 'in', 'natural') 1\n",
            "('language', 'processing', 'our') 1\n",
            "('processing', 'our', 'focus') 1\n",
            "('our', 'focus', 'is') 1\n",
            "('focus', 'is', 'on') 1\n",
            "('is', 'on', 'formulating') 1\n",
            "('on', 'formulating', 'models') 1\n",
            "('formulating', 'models', 'that') 1\n",
            "('models', 'that', 'capture') 1\n",
            "('that', 'capture', 'the') 1\n",
            "('capture', 'the', 'most') 1\n",
            "('the', 'most', 'important') 1\n",
            "('most', 'important', 'interdependencies') 1\n",
            "('important', 'interdependencies', 'among') 1\n",
            "('interdependencies', 'among', 'features') 1\n",
            "('among', 'features', 'to') 1\n",
            "('features', 'to', 'avoid') 1\n",
            "('to', 'avoid', 'overfitting') 1\n",
            "('avoid', 'overfitting', 'the') 1\n",
            "('overfitting', 'the', 'data') 1\n",
            "('the', 'data', 'while') 1\n",
            "('data', 'while', 'also') 1\n",
            "('while', 'also', 'characterizing') 1\n",
            "('also', 'characterizing', 'the') 1\n",
            "('characterizing', 'the', 'data') 1\n",
            "('the', 'data', 'well') 1\n",
            "('data', 'well', 'the') 1\n",
            "('well', 'the', 'class') 1\n",
            "('the', 'class', 'many') 1\n",
            "('class', 'many', 'natural') 1\n",
            "('many', 'natural', 'language') 1\n",
            "('nlp', 'techniques', 'have') 1\n",
            "('techniques', 'have', 'been') 1\n",
            "('have', 'been', 'used') 1\n",
            "('been', 'used', 'in') 1\n",
            "('used', 'in', 'information') 1\n",
            "('in', 'information', 'retrieval') 1\n",
            "('information', 'retrieval', 'the') 1\n",
            "('retrieval', 'the', 'results') 1\n",
            "('the', 'results', 'are') 1\n",
            "('results', 'are', 'not') 1\n",
            "('are', 'not', 'encouraging') 1\n",
            "('not', 'encouraging', 'simple') 1\n",
            "('encouraging', 'simple', 'methods') 1\n",
            "('simple', 'methods', 'stopwording') 1\n",
            "('methods', 'stopwording', 'porterstyle') 1\n",
            "('stopwording', 'porterstyle', 'stemming') 1\n",
            "('porterstyle', 'stemming', 'etc') 1\n",
            "('stemming', 'etc', 'usually') 1\n",
            "('etc', 'usually', 'yield') 1\n",
            "('usually', 'yield', 'significant') 1\n",
            "('yield', 'significant', 'improvements') 1\n",
            "('significant', 'improvements', 'while') 1\n",
            "('improvements', 'while', 'higherlevel') 1\n",
            "('while', 'higherlevel', 'processing') 1\n",
            "('higherlevel', 'processing', 'chunking') 1\n",
            "('processing', 'chunking', 'parsing') 1\n",
            "('chunking', 'parsing', 'word') 1\n",
            "('sense', 'disambiguation', 'abstract') 1\n",
            "('disambiguation', 'abstract', 'this') 1\n",
            "('abstract', 'this', 'paper') 1\n",
            "('this', 'paper', 'explains') 1\n",
            "('paper', 'explains', 'the') 1\n",
            "('explains', 'the', 'information') 1\n",
            "('the', 'information', 'retrieval') 1\n",
            "('information', 'retrieval', 'using') 1\n",
            "('retrieval', 'using', 'natural') 1\n",
            "('using', 'natural', 'language') 1\n",
            "('processing', 'for', 'malayalam') 1\n",
            "('for', 'malayalam', 'language') 1\n",
            "('malayalam', 'language', 'in') 1\n",
            "('language', 'in', 'these') 1\n",
            "('in', 'these', 'basic') 1\n",
            "('these', 'basic', 'in') 1\n",
            "('basic', 'in', 'the') 1\n",
            "('in', 'the', 'state') 2\n",
            "('the', 'state', 'of') 2\n",
            "('the', 'art', 'plan') 2\n",
            "('art', 'plan', 'recognition') 2\n",
            "('plan', 'recognition', 'systems') 2\n",
            "('recognition', 'systems', 'this') 2\n",
            "('this', 'paper', 'will') 2\n",
            "('paper', 'will', 'outline') 2\n",
            "('will', 'outline', 'the') 2\n",
            "('outline', 'the', 'relations') 2\n",
            "('the', 'relations', 'between') 2\n",
            "('relations', 'between', 'natural') 2\n",
            "('between', 'natural', 'language') 2\n",
            "('natural', 'language', 'processingnlp') 2\n",
            "('language', 'processingnlp', 'and') 2\n",
            "('processingnlp', 'and', 'plan') 2\n",
            "('and', 'plan', 'recognitionpr') 2\n",
            "('plan', 'recognitionpr', 'argue') 2\n",
            "('recognitionpr', 'argue', 'that') 2\n",
            "('argue', 'that', 'each') 2\n",
            "('that', 'each', 'of') 2\n",
            "('each', 'of', 'them') 2\n",
            "('of', 'them', 'can') 2\n",
            "('them', 'can', 'effectively') 2\n",
            "('can', 'effectively', 'inform') 2\n",
            "('effectively', 'inform', 'the') 2\n",
            "('inform', 'the', 'other') 2\n",
            "('the', 'other', 'and') 2\n",
            "('other', 'and', 'then') 2\n",
            "('and', 'then', 'focus') 2\n",
            "('then', 'focus', 'on') 2\n",
            "('focus', 'on', 'key') 2\n",
            "('on', 'key', 'recent') 2\n",
            "('key', 'recent', 'research') 2\n",
            "('recent', 'research', 'results') 2\n",
            "('research', 'results', 'in') 2\n",
            "('results', 'in', 'nlp') 2\n",
            "('in', 'nlp', 'and') 2\n",
            "('nlp', 'and', 'argue') 2\n",
            "('and', 'argue', 'for') 2\n",
            "('argue', 'for', 'their') 2\n",
            "('for', 'their', 'applicability') 2\n",
            "('their', 'applicability', 'to') 2\n",
            "('applicability', 'to', 'pr') 2\n",
            "('to', 'pr', 'in') 1\n",
            "('pr', 'in', 'the') 1\n",
            "('to', 'pr', 'information') 1\n",
            "('pr', 'information', 'retrieval') 1\n",
            "('information', 'retrieval', 'is') 1\n",
            "('retrieval', 'is', 'the') 1\n",
            "('is', 'the', 'process') 1\n",
            "('the', 'process', 'of') 2\n",
            "('process', 'of', 'finding') 1\n",
            "('of', 'finding', 'the') 1\n",
            "('finding', 'the', 'documents') 1\n",
            "('the', 'documents', 'in') 1\n",
            "('documents', 'in', 'a') 1\n",
            "('in', 'a', 'document') 1\n",
            "('a', 'document', 'collection') 1\n",
            "('document', 'collection', 'that') 1\n",
            "('collection', 'that', 'satisfies') 1\n",
            "('that', 'satisfies', 'the') 1\n",
            "('satisfies', 'the', 'information') 1\n",
            "('the', 'information', 'need') 1\n",
            "('information', 'need', 'of') 1\n",
            "('need', 'of', 'the') 1\n",
            "('of', 'the', 'user') 1\n",
            "('the', 'user', 'the') 1\n",
            "('user', 'the', 'documents') 1\n",
            "('the', 'documents', 'are') 1\n",
            "('documents', 'are', 'natural') 1\n",
            "('are', 'natural', 'language') 1\n",
            "('natural', 'language', 'constructs') 1\n",
            "('language', 'constructs', 'and') 1\n",
            "('constructs', 'and', 'the') 1\n",
            "('and', 'the', 'motivation') 1\n",
            "('the', 'motivation', 'of') 1\n",
            "('motivation', 'of', 'this') 1\n",
            "('of', 'this', 'work') 1\n",
            "('this', 'work', 'is') 1\n",
            "('work', 'is', 'to') 1\n",
            "('is', 'to', 'investigate') 1\n",
            "('to', 'investigate', 'how') 1\n",
            "('investigate', 'how', 'natural') 1\n",
            "('how', 'natural', 'language') 1\n",
            "('language', 'processing', 'can') 1\n",
            "('processing', 'can', 'be') 1\n",
            "('can', 'be', 'used') 2\n",
            "('be', 'used', 'to') 2\n",
            "('used', 'to', 'improve') 1\n",
            "('to', 'improve', 'of') 1\n",
            "('improve', 'of', 'logic') 1\n",
            "('of', 'logic', 'programming') 1\n",
            "('logic', 'programming', 'within') 1\n",
            "('programming', 'within', 'both') 1\n",
            "('within', 'both', 'natural') 1\n",
            "('both', 'natural', 'language') 1\n",
            "('natural', 'language', 'research') 1\n",
            "('language', 'research', 'and') 1\n",
            "('research', 'and', 'machine') 1\n",
            "('machine', 'learning', 'we') 1\n",
            "('learning', 'we', 'point') 1\n",
            "('we', 'point', 'out') 1\n",
            "('point', 'out', 'opportunities') 1\n",
            "('out', 'opportunities', 'for') 1\n",
            "('opportunities', 'for', 'induction') 1\n",
            "('for', 'induction', 'of') 1\n",
            "('induction', 'of', 'linguistic') 1\n",
            "('linguistic', 'knowledge', 'within') 1\n",
            "('knowledge', 'within', 'logic') 1\n",
            "('within', 'logic', 'programming') 1\n",
            "('logic', 'programming', 'keywords') 1\n",
            "('programming', 'keywords', 'inductive') 1\n",
            "('keywords', 'inductive', 'logic') 1\n",
            "('inductive', 'logic', 'programming') 1\n",
            "('logic', 'programming', 'natural') 1\n",
            "('programming', 'natural', 'language') 1\n",
            "('language', 'processing', 'logic') 1\n",
            "('processing', 'logic', 'programming') 1\n",
            "('logic', 'programming', 'machine') 1\n",
            "('programming', 'machine', 'learning') 1\n",
            "('machine', 'learning', 'introduction') 1\n",
            "('learning', 'introduction', 'there') 1\n",
            "('introduction', 'there', 'is') 1\n",
            "('there', 'is', 'a') 1\n",
            "('is', 'a', 'what') 1\n",
            "('a', 'what', 'is') 1\n",
            "('what', 'is', 'a') 1\n",
            "('is', 'a', 'statistical') 2\n",
            "('a', 'statistical', 'method') 1\n",
            "('statistical', 'method', 'and') 1\n",
            "('method', 'and', 'how') 1\n",
            "('and', 'how', 'can') 1\n",
            "('how', 'can', 'it') 1\n",
            "('can', 'it', 'be') 1\n",
            "('it', 'be', 'used') 1\n",
            "('be', 'used', 'in') 1\n",
            "('used', 'in', 'natural') 1\n",
            "('processing', 'nlp', 'in') 1\n",
            "('nlp', 'in', 'this') 1\n",
            "('paper', 'we', 'start') 1\n",
            "('we', 'start', 'from') 1\n",
            "('start', 'from', 'a') 1\n",
            "('from', 'a', 'definition') 1\n",
            "('a', 'definition', 'of') 1\n",
            "('definition', 'of', 'nlp') 1\n",
            "('of', 'nlp', 'as') 1\n",
            "('nlp', 'as', 'concerned') 1\n",
            "('as', 'concerned', 'with') 1\n",
            "('concerned', 'with', 'the') 1\n",
            "('with', 'the', 'design') 1\n",
            "('the', 'design', 'and') 2\n",
            "('design', 'and', 'implementation') 1\n",
            "('and', 'implementation', 'of') 1\n",
            "('implementation', 'of', 'effective') 1\n",
            "('of', 'effective', 'natural') 1\n",
            "('effective', 'natural', 'language') 1\n",
            "('natural', 'language', 'input') 1\n",
            "('language', 'input', 'and') 1\n",
            "('input', 'and', 'output') 1\n",
            "('and', 'output', 'components') 1\n",
            "('output', 'components', 'for') 1\n",
            "('components', 'for', 'computational') 1\n",
            "('for', 'computational', 'systems') 1\n",
            "('computational', 'systems', 'we') 1\n",
            "('systems', 'we', 'distinguish') 1\n",
            "('we', 'distinguish', 'three') 1\n",
            "('distinguish', 'three', 'in') 1\n",
            "('three', 'in', 'this') 1\n",
            "('in', 'this', 'report') 1\n",
            "('this', 'report', 'some') 1\n",
            "('report', 'some', 'collaborative') 1\n",
            "('some', 'collaborative', 'work') 1\n",
            "('collaborative', 'work', 'between') 1\n",
            "('work', 'between', 'the') 1\n",
            "('between', 'the', 'fields') 1\n",
            "('the', 'fields', 'of') 1\n",
            "('fields', 'of', 'machine') 1\n",
            "('of', 'machine', 'learning') 3\n",
            "('learning', 'ml', 'and') 1\n",
            "('ml', 'and', 'natural') 1\n",
            "('nlp', 'is', 'presented') 1\n",
            "('is', 'presented', 'the') 1\n",
            "('presented', 'the', 'document') 1\n",
            "('the', 'document', 'is') 1\n",
            "('document', 'is', 'structured') 1\n",
            "('is', 'structured', 'in') 1\n",
            "('structured', 'in', 'two') 1\n",
            "('in', 'two', 'parts') 1\n",
            "('two', 'parts', 'the') 1\n",
            "('parts', 'the', 'first') 1\n",
            "('the', 'first', 'part') 1\n",
            "('first', 'part', 'includes') 1\n",
            "('part', 'includes', 'a') 1\n",
            "('includes', 'a', 'superficial') 1\n",
            "('a', 'superficial', 'but') 1\n",
            "('superficial', 'but', 'comprehensive') 1\n",
            "('but', 'comprehensive', 'survey') 1\n",
            "('comprehensive', 'survey', 'covering') 1\n",
            "('survey', 'covering', 'the') 1\n",
            "('covering', 'the', 'stateoftheart') 1\n",
            "('the', 'stateoftheart', 'of') 1\n",
            "('stateoftheart', 'of', 'machine') 1\n",
            "('machine', 'learning', 'abstract') 1\n",
            "('learning', 'abstract', 'this') 1\n",
            "('abstract', 'this', 'thesis') 1\n",
            "('this', 'thesis', 'examines') 1\n",
            "('thesis', 'examines', 'the') 1\n",
            "('examines', 'the', 'use') 1\n",
            "('use', 'of', 'machine') 1\n",
            "('learning', 'techniques', 'in') 1\n",
            "('techniques', 'in', 'various') 1\n",
            "('in', 'various', 'tasks') 1\n",
            "('various', 'tasks', 'of') 1\n",
            "('tasks', 'of', 'natural') 1\n",
            "('language', 'processing', 'mainly') 1\n",
            "('processing', 'mainly', 'for') 1\n",
            "('mainly', 'for', 'the') 1\n",
            "('for', 'the', 'task') 1\n",
            "('the', 'task', 'of') 1\n",
            "('task', 'of', 'information') 1\n",
            "('of', 'information', 'extraction') 2\n",
            "('information', 'extraction', 'from') 1\n",
            "('extraction', 'from', 'texts') 1\n",
            "('from', 'texts', 'the') 1\n",
            "('texts', 'the', 'objectives') 1\n",
            "('the', 'objectives', 'are') 1\n",
            "('objectives', 'are', 'the') 1\n",
            "('are', 'the', 'improvement') 1\n",
            "('the', 'improvement', 'of') 2\n",
            "('improvement', 'of', 'adaptability') 1\n",
            "('of', 'adaptability', 'of') 1\n",
            "('adaptability', 'of', 'information') 1\n",
            "('information', 'extraction', 'systems') 1\n",
            "('extraction', 'systems', 'to') 1\n",
            "('systems', 'to', 'new') 1\n",
            "('to', 'new', 'thematic') 1\n",
            "('new', 'thematic', 'domains') 1\n",
            "('thematic', 'domains', 'or') 1\n",
            "('domains', 'or', 'even') 1\n",
            "('or', 'even', 'this') 1\n",
            "('even', 'this', 'chapter') 1\n",
            "('this', 'chapter', 'examines') 2\n",
            "('chapter', 'examines', 'the') 2\n",
            "('examines', 'the', 'application') 2\n",
            "('application', 'of', 'natural') 2\n",
            "('processing', 'to', 'computerassisted') 2\n",
            "('to', 'computerassisted', 'language') 2\n",
            "('computerassisted', 'language', 'learning') 2\n",
            "('language', 'learning', 'including') 2\n",
            "('learning', 'including', 'the') 2\n",
            "('including', 'the', 'history') 2\n",
            "('the', 'history', 'of') 2\n",
            "('history', 'of', 'work') 2\n",
            "('of', 'work', 'in') 2\n",
            "('work', 'in', 'this') 2\n",
            "('in', 'this', 'field') 2\n",
            "('this', 'field', 'over') 2\n",
            "('field', 'over', 'the') 2\n",
            "('the', 'last', 'thirtyfive') 2\n",
            "('last', 'thirtyfive', 'years') 2\n",
            "('thirtyfive', 'years', 'but') 2\n",
            "('years', 'but', 'with') 2\n",
            "('but', 'with', 'a') 2\n",
            "('focus', 'on', 'current') 2\n",
            "('on', 'current', 'developments') 2\n",
            "('current', 'developments', 'and') 2\n",
            "('developments', 'and', 'opportunities') 2\n",
            "('and', 'opportunities', 'traditional') 1\n",
            "('opportunities', 'traditional', 'approaches') 1\n",
            "('traditional', 'approaches', 'tointerpretation') 1\n",
            "('approaches', 'tointerpretation', 'in') 1\n",
            "('tointerpretation', 'in', 'natural') 1\n",
            "('language', 'processing', 'typically') 1\n",
            "('processing', 'typically', 'fall') 1\n",
            "('typically', 'fall', 'into') 1\n",
            "('fall', 'into', 'one') 1\n",
            "('into', 'one', 'of') 1\n",
            "('one', 'of', 'three') 1\n",
            "('of', 'three', 'classes') 1\n",
            "('three', 'classes', 'syntaxdriven') 1\n",
            "('classes', 'syntaxdriven', 'semanticsdriven') 1\n",
            "('syntaxdriven', 'semanticsdriven', 'or') 1\n",
            "('semanticsdriven', 'or', 'frametask') 1\n",
            "('or', 'frametask', 'based') 1\n",
            "('frametask', 'based', 'syntaxdriven') 1\n",
            "('based', 'syntaxdriven', 'approaches') 1\n",
            "('syntaxdriven', 'approaches', 'use') 1\n",
            "('approaches', 'use', 'a') 1\n",
            "('use', 'a', 'domainindependent') 1\n",
            "('a', 'domainindependent', 'grammar') 1\n",
            "('domainindependent', 'grammar', 'to') 1\n",
            "('grammar', 'to', 'drive') 1\n",
            "('to', 'drive', 'the') 1\n",
            "('drive', 'the', 'interpretation') 1\n",
            "('the', 'interpretation', 'process') 1\n",
            "('interpretation', 'process', 'and') 1\n",
            "('process', 'and', 'produce') 1\n",
            "('and', 'produce', 'a') 1\n",
            "('produce', 'a', 'global') 1\n",
            "('a', 'global', 'parse') 1\n",
            "('global', 'parse', 'natural') 1\n",
            "('parse', 'natural', 'language') 1\n",
            "('nlp', 'is', 'a') 1\n",
            "('is', 'a', 'very') 1\n",
            "('a', 'very', 'large') 1\n",
            "('very', 'large', 'and') 1\n",
            "('large', 'and', 'diverse') 1\n",
            "('and', 'diverse', 'subtopic') 1\n",
            "('diverse', 'subtopic', 'of') 1\n",
            "('subtopic', 'of', 'artificial') 1\n",
            "('of', 'artificial', 'intelligence') 2\n",
            "('artificial', 'intelligence', 'as') 1\n",
            "('intelligence', 'as', 'a') 1\n",
            "('as', 'a', 'result') 1\n",
            "('a', 'result', 'nlp') 1\n",
            "('result', 'nlp', 'itself') 1\n",
            "('nlp', 'itself', 'has') 1\n",
            "('itself', 'has', 'many') 1\n",
            "('has', 'many', 'subtopics') 1\n",
            "('many', 'subtopics', 'including') 1\n",
            "('subtopics', 'including', 'optical') 1\n",
            "('including', 'optical', 'character') 1\n",
            "('optical', 'character', 'recognition') 1\n",
            "('character', 'recognition', 'text') 1\n",
            "('recognition', 'text', 'to') 1\n",
            "('text', 'to', 'speech') 1\n",
            "('to', 'speech', 'translators') 1\n",
            "('speech', 'translators', 'foreign') 1\n",
            "('translators', 'foreign', 'language') 1\n",
            "('foreign', 'language', 'reading') 1\n",
            "('language', 'reading', 'and') 1\n",
            "('reading', 'and', 'writing') 1\n",
            "('and', 'writing', 'aids') 1\n",
            "('writing', 'aids', 'machine') 1\n",
            "('aids', 'machine', 'translation') 1\n",
            "('translation', 'and', 'speech') 1\n",
            "('and', 'speech', 'recognition') 1\n",
            "('speech', 'recognition', 'probabilistic') 1\n",
            "('recognition', 'probabilistic', 'finitestate') 1\n",
            "('probabilistic', 'finitestate', 'string') 1\n",
            "('finitestate', 'string', 'transducers') 1\n",
            "('string', 'transducers', 'fsts') 1\n",
            "('transducers', 'fsts', 'are') 1\n",
            "('fsts', 'are', 'extremely') 1\n",
            "('are', 'extremely', 'popular') 1\n",
            "('extremely', 'popular', 'in') 1\n",
            "('popular', 'in', 'natural') 1\n",
            "('language', 'processing', 'due') 1\n",
            "('processing', 'due', 'to') 1\n",
            "('due', 'to', 'powerful') 1\n",
            "('to', 'powerful', 'generic') 1\n",
            "('powerful', 'generic', 'methods') 1\n",
            "('generic', 'methods', 'for') 1\n",
            "('methods', 'for', 'applying') 1\n",
            "('for', 'applying', 'composing') 1\n",
            "('applying', 'composing', 'and') 1\n",
            "('composing', 'and', 'learning') 1\n",
            "('and', 'learning', 'them') 1\n",
            "('learning', 'them', 'unfortunately') 1\n",
            "('them', 'unfortunately', 'fsts') 1\n",
            "('unfortunately', 'fsts', 'are') 1\n",
            "('fsts', 'are', 'not') 1\n",
            "('are', 'not', 'a') 1\n",
            "('not', 'a', 'good') 1\n",
            "('a', 'good', 'fit') 1\n",
            "('good', 'fit', 'for') 1\n",
            "('fit', 'for', 'much') 1\n",
            "('for', 'much', 'of') 1\n",
            "('much', 'of', 'the') 1\n",
            "('the', 'current', 'work') 1\n",
            "('current', 'work', 'on') 1\n",
            "('work', 'on', 'probabilistic') 1\n",
            "('on', 'probabilistic', 'modeling') 1\n",
            "('probabilistic', 'modeling', 'for') 1\n",
            "('modeling', 'for', 'machine') 1\n",
            "('for', 'machine', 'abstract') 1\n",
            "('machine', 'abstract', 'in') 1\n",
            "('abstract', 'in', 'this') 1\n",
            "('in', 'this', 'special') 1\n",
            "('this', 'special', 'issue') 1\n",
            "('special', 'issue', 'of') 1\n",
            "('issue', 'of', 'tal') 1\n",
            "('of', 'tal', 'we') 1\n",
            "('tal', 'we', 'look') 1\n",
            "('we', 'look', 'at') 1\n",
            "('look', 'at', 'the') 1\n",
            "('at', 'the', 'fundamental') 1\n",
            "('the', 'fundamental', 'principles') 1\n",
            "('fundamental', 'principles', 'underlying') 1\n",
            "('principles', 'underlying', 'evaluation') 1\n",
            "('underlying', 'evaluation', 'in') 1\n",
            "('evaluation', 'in', 'natural') 1\n",
            "('processing', 'we', 'adopt') 1\n",
            "('we', 'adopt', 'a') 1\n",
            "('adopt', 'a', 'global') 1\n",
            "('a', 'global', 'point') 1\n",
            "('global', 'point', 'of') 1\n",
            "('point', 'of', 'view') 1\n",
            "('of', 'view', 'that') 1\n",
            "('view', 'that', 'goes') 1\n",
            "('that', 'goes', 'beyond') 1\n",
            "('goes', 'beyond', 'the') 1\n",
            "('beyond', 'the', 'horizon') 1\n",
            "('the', 'horizon', 'of') 1\n",
            "('horizon', 'of', 'a') 1\n",
            "('of', 'a', 'single') 1\n",
            "('a', 'single', 'evaluation') 1\n",
            "('single', 'evaluation', 'campaign') 1\n",
            "('evaluation', 'campaign', 'or') 1\n",
            "('campaign', 'or', 'a') 1\n",
            "('or', 'a', 'particular') 1\n",
            "('a', 'particular', 'protocol') 1\n",
            "('particular', 'protocol', 'after') 1\n",
            "('protocol', 'after', 'a') 1\n",
            "('after', 'a', 'brief') 1\n",
            "('a', 'brief', 'review') 1\n",
            "('brief', 'review', 'of') 1\n",
            "('review', 'of', 'history') 1\n",
            "('history', 'and', 'terminology') 1\n",
            "('and', 'terminology', 'abstract') 1\n",
            "('terminology', 'abstract', 'not') 1\n",
            "('not', 'found', 'natural') 1\n",
            "('found', 'natural', 'language') 1\n",
            "('processing', 'systems', 'nlp') 1\n",
            "('systems', 'nlp', 'that') 1\n",
            "('nlp', 'that', 'extract') 1\n",
            "('that', 'extract', 'clinical') 1\n",
            "('extract', 'clinical', 'information') 1\n",
            "('clinical', 'information', 'from') 1\n",
            "('information', 'from', 'textual') 1\n",
            "('from', 'textual', 'reports') 1\n",
            "('textual', 'reports', 'were') 1\n",
            "('reports', 'were', 'shown') 1\n",
            "('were', 'shown', 'to') 1\n",
            "('shown', 'to', 'be') 1\n",
            "('to', 'be', 'effective') 1\n",
            "('be', 'effective', 'for') 1\n",
            "('effective', 'for', 'limited') 1\n",
            "('for', 'limited', 'domains') 1\n",
            "('limited', 'domains', 'and') 1\n",
            "('domains', 'and', 'for') 1\n",
            "('and', 'for', 'particular') 1\n",
            "('for', 'particular', 'applications') 1\n",
            "('particular', 'applications', 'because') 1\n",
            "('applications', 'because', 'an') 1\n",
            "('because', 'an', 'nlp') 1\n",
            "('an', 'nlp', 'system') 1\n",
            "('nlp', 'system', 'typically') 1\n",
            "('system', 'typically', 'requires') 1\n",
            "('typically', 'requires', 'substantial') 1\n",
            "('requires', 'substantial', 'resources') 1\n",
            "('substantial', 'resources', 'to') 1\n",
            "('resources', 'to', 'develop') 1\n",
            "('to', 'develop', 'it') 1\n",
            "('develop', 'it', 'is') 1\n",
            "('it', 'is', 'beneficial') 1\n",
            "('is', 'beneficial', 'if') 1\n",
            "('beneficial', 'if', 'it') 1\n",
            "('if', 'it', 'is') 1\n",
            "('it', 'is', 'designed') 1\n",
            "('is', 'designed', 'to') 1\n",
            "('designed', 'to', 'be') 1\n",
            "('to', 'be', 'easily') 1\n",
            "('be', 'easily', 'facts') 1\n",
            "('easily', 'facts', 'forms') 1\n",
            "('facts', 'forms', 'a') 1\n",
            "('forms', 'a', 'link') 1\n",
            "('a', 'link', 'between') 1\n",
            "('link', 'between', 'ie') 1\n",
            "('between', 'ie', 'a') 1\n",
            "('ie', 'a', 'recent') 1\n",
            "('a', 'recent', 'development') 1\n",
            "('language', 'processing', 'and') 1\n",
            "('processing', 'and', 'logic') 1\n",
            "('and', 'logic', 'programming') 1\n",
            "('logic', 'programming', 'with') 1\n",
            "('programming', 'with', 'prolog') 1\n",
            "('with', 'prolog', 'we') 1\n",
            "('prolog', 'we', 'describe') 1\n",
            "('describe', 'a', 'single') 1\n",
            "('a', 'single', 'convolutional') 1\n",
            "('single', 'convolutional', 'neural') 1\n",
            "('convolutional', 'neural', 'network') 1\n",
            "('neural', 'network', 'architecture') 1\n",
            "('network', 'architecture', 'that') 1\n",
            "('architecture', 'that', 'given') 1\n",
            "('that', 'given', 'a') 1\n",
            "('given', 'a', 'sentence') 1\n",
            "('a', 'sentence', 'outputs') 1\n",
            "('sentence', 'outputs', 'a') 1\n",
            "('outputs', 'a', 'host') 1\n",
            "('a', 'host', 'of') 1\n",
            "('host', 'of', 'language') 1\n",
            "('language', 'processing', 'predictions') 1\n",
            "('processing', 'predictions', 'partofspeech') 1\n",
            "('predictions', 'partofspeech', 'tags') 1\n",
            "('partofspeech', 'tags', 'chunks') 1\n",
            "('tags', 'chunks', 'named') 1\n",
            "('chunks', 'named', 'entity') 1\n",
            "('named', 'entity', 'tags') 1\n",
            "('entity', 'tags', 'semantic') 1\n",
            "('tags', 'semantic', 'roles') 1\n",
            "('semantic', 'roles', 'semantically') 1\n",
            "('roles', 'semantically', 'similar') 1\n",
            "('semantically', 'similar', 'words') 1\n",
            "('similar', 'words', 'and') 1\n",
            "('words', 'and', 'the') 1\n",
            "('and', 'the', 'likelihood') 1\n",
            "('the', 'likelihood', 'that') 1\n",
            "('likelihood', 'that', 'the') 1\n",
            "('that', 'the', 'sentence') 1\n",
            "('the', 'sentence', 'makes') 1\n",
            "('sentence', 'makes', 'sense') 1\n",
            "('makes', 'sense', 'grammatically') 1\n",
            "('sense', 'grammatically', 'we') 1\n",
            "('grammatically', 'we', 'developed') 1\n",
            "('we', 'developed', 'a') 1\n",
            "('developed', 'a', 'prototype') 1\n",
            "('a', 'prototype', 'information') 1\n",
            "('prototype', 'information', 'retrieval') 1\n",
            "('retrieval', 'system', 'which') 1\n",
            "('system', 'which', 'uses') 1\n",
            "('which', 'uses', 'advanced') 1\n",
            "('uses', 'advanced', 'natural') 1\n",
            "('advanced', 'natural', 'language') 1\n",
            "('processing', 'techniques', 'to') 1\n",
            "('techniques', 'to', 'enhance') 1\n",
            "('to', 'enhance', 'the') 1\n",
            "('enhance', 'the', 'effectiveness') 1\n",
            "('the', 'effectiveness', 'of') 1\n",
            "('effectiveness', 'of', 'traditional') 1\n",
            "('of', 'traditional', 'keyword') 1\n",
            "('traditional', 'keyword', 'based') 1\n",
            "('keyword', 'based', 'document') 1\n",
            "('based', 'document', 'retrieval') 1\n",
            "('document', 'retrieval', 'the') 1\n",
            "('retrieval', 'the', 'backbone') 1\n",
            "('the', 'backbone', 'of') 1\n",
            "('backbone', 'of', 'our') 1\n",
            "('of', 'our', 'system') 1\n",
            "('our', 'system', 'is') 1\n",
            "('system', 'is', 'a') 1\n",
            "('a', 'statistical', 'retrieval') 1\n",
            "('statistical', 'retrieval', 'engine') 1\n",
            "('retrieval', 'engine', 'which') 1\n",
            "('engine', 'which', 'performs') 1\n",
            "('which', 'performs', 'automated') 1\n",
            "('performs', 'automated', 'indexing') 1\n",
            "('automated', 'indexing', 'abstract') 1\n",
            "('indexing', 'abstract', 'not') 1\n",
            "('found', 'in', 'this') 1\n",
            "('we', 'will', 'discuss') 1\n",
            "('will', 'discuss', 'several') 1\n",
            "('discuss', 'several', 'issues') 1\n",
            "('several', 'issues', 'and') 1\n",
            "('issues', 'and', 'requirements') 1\n",
            "('and', 'requirements', 'for') 1\n",
            "('requirements', 'for', 'enabling') 1\n",
            "('for', 'enabling', 'natural') 1\n",
            "('enabling', 'natural', 'language') 1\n",
            "('processing', 'systems', 'to') 1\n",
            "('systems', 'to', 'become') 1\n",
            "('to', 'become', 'contextadaptive') 1\n",
            "('become', 'contextadaptive', 'given') 1\n",
            "('contextadaptive', 'given', 'the') 1\n",
            "('given', 'the', 'fact') 1\n",
            "('the', 'fact', 'that') 1\n",
            "('fact', 'that', 'emerging') 1\n",
            "('that', 'emerging', 'systems') 1\n",
            "('emerging', 'systems', 'feature') 1\n",
            "('systems', 'feature', 'speaker') 1\n",
            "('feature', 'speaker', 'independent') 1\n",
            "('speaker', 'independent', 'continuous') 1\n",
            "('independent', 'continuous', 'speech') 1\n",
            "('continuous', 'speech', 'recognition') 1\n",
            "('speech', 'recognition', 'restricted') 1\n",
            "('recognition', 'restricted', 'to') 1\n",
            "('restricted', 'to', 'individual') 1\n",
            "('to', 'individual', 'domains') 1\n",
            "('individual', 'domains', 'and') 1\n",
            "('domains', 'and', 'are') 1\n",
            "('and', 'are', 'equipped') 1\n",
            "('are', 'equipped', 'with') 1\n",
            "('equipped', 'with', 'syntactic') 1\n",
            "('with', 'syntactic', 'in') 1\n",
            "('syntactic', 'in', 'fall') 1\n",
            "('in', 'fall', 'i') 1\n",
            "('fall', 'i', 'introduced') 1\n",
            "('i', 'introduced', 'a') 1\n",
            "('introduced', 'a', 'new') 1\n",
            "('a', 'new', 'course') 1\n",
            "('new', 'course', 'called') 1\n",
            "('course', 'called', 'applied') 1\n",
            "('called', 'applied', 'natural') 1\n",
            "('applied', 'natural', 'language') 1\n",
            "('language', 'processing', 'in') 1\n",
            "('processing', 'in', 'which') 1\n",
            "('in', 'which', 'students') 1\n",
            "('which', 'students', 'acquire') 1\n",
            "('students', 'acquire', 'an') 1\n",
            "('acquire', 'an', 'understanding') 1\n",
            "('an', 'understanding', 'of') 1\n",
            "('understanding', 'of', 'which') 1\n",
            "('of', 'which', 'text') 1\n",
            "('which', 'text', 'analysis') 1\n",
            "('text', 'analysis', 'techniques') 1\n",
            "('analysis', 'techniques', 'are') 1\n",
            "('techniques', 'are', 'currently') 1\n",
            "('are', 'currently', 'feasible') 1\n",
            "('currently', 'feasible', 'for') 1\n",
            "('feasible', 'for', 'practical') 1\n",
            "('for', 'practical', 'applications') 1\n",
            "('practical', 'applications', 'abstract') 1\n",
            "('applications', 'abstract', 'not') 1\n",
            "('found', 'abstract', 'natural') 1\n",
            "('processing', 'is', 'the') 2\n",
            "('is', 'the', 'study') 1\n",
            "('the', 'study', 'of') 1\n",
            "('study', 'of', 'mathematical') 1\n",
            "('of', 'mathematical', 'and') 1\n",
            "('mathematical', 'and', 'computational') 1\n",
            "('and', 'computational', 'modelling') 1\n",
            "('computational', 'modelling', 'of') 1\n",
            "('modelling', 'of', 'various') 1\n",
            "('of', 'various', 'aspects') 1\n",
            "('various', 'aspects', 'of') 1\n",
            "('aspects', 'of', 'language') 1\n",
            "('of', 'language', 'and') 1\n",
            "('language', 'and', 'the') 2\n",
            "('and', 'the', 'improvement') 1\n",
            "('improvement', 'of', 'a') 1\n",
            "('of', 'a', 'wide') 1\n",
            "('a', 'wide', 'range') 2\n",
            "('wide', 'range', 'of') 2\n",
            "('range', 'of', 'systems') 1\n",
            "('of', 'systems', 'natural') 1\n",
            "('systems', 'natural', 'language') 1\n",
            "('natural', 'language', 'is') 1\n",
            "('language', 'is', 'any') 1\n",
            "('is', 'any', 'language') 1\n",
            "('any', 'language', 'that') 1\n",
            "('language', 'that', 'arises') 1\n",
            "('that', 'arises', 'as') 1\n",
            "('arises', 'as', 'an') 1\n",
            "('as', 'an', 'innate') 1\n",
            "('an', 'innate', 'facility') 1\n",
            "('innate', 'facility', 'for') 1\n",
            "('facility', 'for', 'language') 1\n",
            "('for', 'language', 'possessed') 1\n",
            "('language', 'possessed', 'by') 1\n",
            "('possessed', 'by', 'the') 1\n",
            "('by', 'the', 'human') 1\n",
            "('the', 'human', 'intellect') 1\n",
            "('human', 'intellect', 'it') 1\n",
            "('intellect', 'it', 'may') 1\n",
            "('it', 'may', 'natural') 1\n",
            "('may', 'natural', 'language') 1\n",
            "('processing', 'nlp', 'which') 1\n",
            "('nlp', 'which', 'is') 1\n",
            "('which', 'is', 'a') 1\n",
            "('is', 'a', 'branch') 1\n",
            "('a', 'branch', 'of') 1\n",
            "('branch', 'of', 'artificial') 1\n",
            "('artificial', 'intelligence', 'includes') 1\n",
            "('intelligence', 'includes', 'speech') 1\n",
            "('includes', 'speech', 'synthesis') 1\n",
            "('speech', 'synthesis', 'speech') 1\n",
            "('synthesis', 'speech', 'recognition') 1\n",
            "('speech', 'recognition', 'and') 1\n",
            "('recognition', 'and', 'machine') 1\n",
            "('and', 'machine', 'translation') 1\n",
            "('machine', 'translation', 'natural') 1\n",
            "('translation', 'natural', 'language') 1\n",
            "('processing', 'has', 'a') 1\n",
            "('has', 'a', 'wide') 1\n",
            "('range', 'of', 'applications') 1\n",
            "('of', 'applications', 'in') 1\n",
            "('applications', 'in', 'the') 1\n",
            "('in', 'the', 'indian') 1\n",
            "('the', 'indian', 'context') 1\n",
            "('indian', 'context', 'most') 1\n",
            "('context', 'most', 'of') 1\n",
            "('most', 'of', 'the') 1\n",
            "('of', 'the', 'rural') 1\n",
            "('the', 'rural', 'indian') 1\n",
            "('rural', 'indian', 'community') 1\n",
            "('indian', 'community', 'is') 1\n",
            "('community', 'is', 'unable') 1\n",
            "('is', 'unable', 'to') 1\n",
            "('unable', 'to', 'make') 1\n",
            "('to', 'make', 'use') 1\n",
            "('make', 'use', 'an') 1\n",
            "('use', 'an', 'evaluation') 1\n",
            "('an', 'evaluation', 'of') 1\n",
            "('evaluation', 'of', 'lolita') 1\n",
            "('of', 'lolita', 'and') 1\n",
            "('lolita', 'and', 'related') 1\n",
            "('and', 'related', 'natural') 1\n",
            "('related', 'natural', 'language') 1\n",
            "('processing', 'systems', 'paul') 1\n",
            "('systems', 'paul', 'callaghan') 1\n",
            "('paul', 'callaghan', 'submitted') 1\n",
            "('callaghan', 'submitted', 'to') 1\n",
            "('submitted', 'to', 'the') 1\n",
            "('to', 'the', 'university') 1\n",
            "('the', 'university', 'of') 1\n",
            "('university', 'of', 'durham') 1\n",
            "('of', 'durham', 'for') 1\n",
            "('durham', 'for', 'the') 1\n",
            "('for', 'the', 'degree') 1\n",
            "('the', 'degree', 'of') 1\n",
            "('degree', 'of', 'phd') 1\n",
            "('of', 'phd', 'august') 1\n",
            "('phd', 'august', 'this') 1\n",
            "('august', 'this', 'research') 1\n",
            "('this', 'research', 'addresses') 1\n",
            "('research', 'addresses', 'the') 1\n",
            "('addresses', 'the', 'question') 1\n",
            "('the', 'question', 'how') 1\n",
            "('question', 'how', 'do') 1\n",
            "('how', 'do', 'we') 1\n",
            "('do', 'we', 'evaluate') 1\n",
            "('we', 'evaluate', 'systems') 1\n",
            "('evaluate', 'systems', 'like') 1\n",
            "('systems', 'like', 'lolita') 1\n",
            "('like', 'lolita', 'lolita') 1\n",
            "('lolita', 'lolita', 'is') 1\n",
            "('lolita', 'is', 'the') 1\n",
            "('is', 'the', 'natural') 1\n",
            "('the', 'natural', 'previous') 1\n",
            "('natural', 'previous', 'work') 1\n",
            "('previous', 'work', 'demonstrated') 1\n",
            "('work', 'demonstrated', 'that') 1\n",
            "('demonstrated', 'that', 'web') 1\n",
            "('that', 'web', 'counts') 1\n",
            "('web', 'counts', 'can') 1\n",
            "('counts', 'can', 'be') 1\n",
            "('used', 'to', 'approximate') 1\n",
            "('to', 'approximate', 'bigram') 1\n",
            "('approximate', 'bigram', 'counts') 1\n",
            "('bigram', 'counts', 'suggesting') 1\n",
            "('counts', 'suggesting', 'that') 1\n",
            "('suggesting', 'that', 'webbased') 1\n",
            "('that', 'webbased', 'frequencies') 1\n",
            "('webbased', 'frequencies', 'should') 1\n",
            "('frequencies', 'should', 'be') 1\n",
            "('should', 'be', 'useful') 1\n",
            "('be', 'useful', 'for') 1\n",
            "('useful', 'for', 'a') 1\n",
            "('for', 'a', 'wide') 1\n",
            "('a', 'wide', 'variety') 1\n",
            "('wide', 'variety', 'of') 1\n",
            "('variety', 'of', 'natural') 1\n",
            "('nlp', 'tasks', 'however') 1\n",
            "('tasks', 'however', 'only') 1\n",
            "('however', 'only', 'a') 1\n",
            "('only', 'a', 'limited') 1\n",
            "('a', 'limited', 'number') 1\n",
            "('limited', 'number', 'of') 1\n",
            "('of', 'tasks', 'have') 1\n",
            "('tasks', 'have', 'so') 1\n",
            "('have', 'so', 'far') 1\n",
            "('so', 'far', 'been') 1\n",
            "('far', 'been', 'tested') 1\n",
            "('been', 'tested', 'using') 1\n",
            "('tested', 'using', 'webscale') 1\n",
            "('using', 'webscale', 'data') 1\n",
            "('webscale', 'data', 'sets') 1\n",
            "('data', 'sets', 'this') 1\n",
            "('sets', 'this', 'chapter') 1\n",
            "('and', 'opportunities', 'introduction') 1\n",
            "('opportunities', 'introduction', 'this') 1\n",
            "('introduction', 'this', 'chapter') 1\n",
            "('this', 'chapter', 'focuses') 1\n",
            "('chapter', 'focuses', 'on') 1\n",
            "('focuses', 'on', 'applications') 1\n",
            "('on', 'applications', 'this') 1\n",
            "('applications', 'this', 'paper') 1\n",
            "('this', 'paper', 'describes') 1\n",
            "('paper', 'describes', 'a') 1\n",
            "('describes', 'a', 'natural') 1\n",
            "('natural', 'language', 'system') 1\n",
            "('language', 'system', 'which') 1\n",
            "('system', 'which', 'improves') 1\n",
            "('which', 'improves', 'its') 1\n",
            "('improves', 'its', 'own') 1\n",
            "('its', 'own', 'performance') 1\n",
            "('own', 'performance', 'through') 1\n",
            "('performance', 'through', 'learning') 1\n",
            "('through', 'learning', 'the') 1\n",
            "('learning', 'the', 'system') 1\n",
            "('the', 'system', 'processes') 1\n",
            "('system', 'processes', 'short') 1\n",
            "('processes', 'short', 'english') 1\n",
            "('short', 'english', 'narratives') 1\n",
            "('english', 'narratives', 'and') 1\n",
            "('narratives', 'and', 'is') 1\n",
            "('and', 'is', 'able') 1\n",
            "('is', 'able', 'to') 1\n",
            "('able', 'to', 'acquire') 1\n",
            "('to', 'acquire', 'from') 1\n",
            "('acquire', 'from', 'a') 1\n",
            "('from', 'a', 'single') 1\n",
            "('a', 'single', 'narrative') 1\n",
            "('single', 'narrative', 'a') 1\n",
            "('narrative', 'a', 'new') 1\n",
            "('a', 'new', 'schema') 1\n",
            "('new', 'schema', 'for') 1\n",
            "('schema', 'for', 'a') 1\n",
            "('for', 'a', 'stereotypical') 1\n",
            "('a', 'stereotypical', 'set') 1\n",
            "('stereotypical', 'set', 'of') 1\n",
            "('set', 'of', 'actions') 1\n",
            "('of', 'actions', 'during') 1\n",
            "('actions', 'during', 'the') 1\n",
            "('during', 'the', 'understanding') 1\n",
            "('the', 'understanding', 'process') 1\n",
            "('understanding', 'process', 'the') 1\n",
            "('process', 'the', 'system') 1\n",
            "('the', 'system', 'attempts') 1\n",
            "('system', 'attempts', 'we') 1\n",
            "('attempts', 'we', 'classify') 1\n",
            "('we', 'classify', 'and') 1\n",
            "('classify', 'and', 'review') 1\n",
            "('and', 'review', 'current') 1\n",
            "('review', 'current', 'approaches') 1\n",
            "('current', 'approaches', 'to') 1\n",
            "('approaches', 'to', 'software') 1\n",
            "('to', 'software', 'infrastructure') 1\n",
            "('software', 'infrastructure', 'for') 1\n",
            "('infrastructure', 'for', 'research') 1\n",
            "('for', 'research', 'development') 1\n",
            "('research', 'development', 'and') 1\n",
            "('development', 'and', 'delivery') 1\n",
            "('and', 'delivery', 'of') 1\n",
            "('delivery', 'of', 'nlp') 1\n",
            "('of', 'nlp', 'systems') 1\n",
            "('nlp', 'systems', 'the') 1\n",
            "('systems', 'the', 'task') 1\n",
            "('the', 'task', 'confidence') 1\n",
            "('task', 'confidence', 'measures') 1\n",
            "('confidence', 'measures', 'are') 1\n",
            "('measures', 'are', 'a') 1\n",
            "('are', 'a', 'practical') 1\n",
            "('a', 'practical', 'solution') 1\n",
            "('practical', 'solution', 'for') 1\n",
            "('solution', 'for', 'improving') 1\n",
            "('for', 'improving', 'the') 1\n",
            "('improving', 'the', 'usefulness') 1\n",
            "('the', 'usefulness', 'of') 1\n",
            "('usefulness', 'of', 'natural') 1\n",
            "('language', 'processing', 'applications') 1\n",
            "('processing', 'applications', 'confidence') 1\n",
            "('applications', 'confidence', 'estimation') 1\n",
            "('confidence', 'estimation', 'is') 1\n",
            "('estimation', 'is', 'a') 1\n",
            "('is', 'a', 'generic') 1\n",
            "('a', 'generic', 'machine') 1\n",
            "('generic', 'machine', 'learning') 1\n",
            "('machine', 'learning', 'approach') 1\n",
            "('learning', 'approach', 'for') 1\n",
            "('approach', 'for', 'deriving') 1\n",
            "('for', 'deriving', 'confidence') 1\n",
            "('deriving', 'confidence', 'measures') 1\n",
            "('confidence', 'measures', 'we') 1\n",
            "('measures', 'we', 'give') 1\n",
            "('we', 'give', 'an') 1\n",
            "('give', 'an', 'overview') 1\n",
            "('an', 'overview', 'of') 1\n",
            "('overview', 'of', 'the') 1\n",
            "('of', 'the', 'application') 1\n",
            "('application', 'of', 'confidence') 1\n",
            "('of', 'confidence', 'estimation') 1\n",
            "('confidence', 'estimation', 'in') 1\n",
            "('estimation', 'in', 'various') 1\n",
            "('in', 'various', 'fields') 1\n",
            "('various', 'fields', 'lexsign') 1\n",
            "('fields', 'lexsign', 'senseid') 1\n",
            "('lexsign', 'senseid', 'senseid') 3\n",
            "('senseid', 'senseid', 'dictionary') 1\n",
            "('senseid', 'dictionary', 'ldoce') 1\n",
            "('dictionary', 'ldoce', 'lexsign') 1\n",
            "('ldoce', 'lexsign', 'senseid') 1\n",
            "('senseid', 'senseid', 'ldbentryno') 1\n",
            "('senseid', 'ldbentryno', 'lexsign') 1\n",
            "('ldbentryno', 'lexsign', 'senseid') 1\n",
            "('senseid', 'senseid', 'senseno') 1\n",
            "('senseid', 'senseno', 'when') 1\n",
            "('senseno', 'when', 'loaded') 1\n",
            "('when', 'loaded', 'into') 1\n",
            "('loaded', 'into', 'the') 1\n",
            "('into', 'the', 'lkb') 1\n",
            "('the', 'lkb', 'will') 1\n",
            "('lkb', 'will', 'be') 1\n",
            "('will', 'be', 'expanded') 1\n",
            "('be', 'expanded', 'into') 1\n",
            "('expanded', 'into', 'a') 1\n",
            "('into', 'a', 'fullyfledged') 1\n",
            "('a', 'fullyfledged', 'representation') 1\n",
            "('fullyfledged', 'representation', 'for') 1\n",
            "('representation', 'for', 'the') 1\n",
            "('for', 'the', 'transitive') 1\n",
            "('the', 'transitive', 'use') 1\n",
            "('transitive', 'use', 'of') 1\n",
            "('use', 'of', 'experience') 1\n",
            "('of', 'experience', 'by') 1\n",
            "('experience', 'by', 'integrating') 1\n",
            "('by', 'integrating', 'wordspecific') 1\n",
            "('integrating', 'wordspecific', 'information') 1\n",
            "('wordspecific', 'information', 'provided') 1\n",
            "('information', 'provided', 'by') 1\n",
            "('provided', 'by', 'with') 1\n",
            "('by', 'with', 'the') 1\n",
            "('with', 'the', 'information') 1\n",
            "('the', 'information', 'encoded') 1\n",
            "('information', 'encoded', 'by') 1\n",
            "('encoded', 'by', 'the') 1\n",
            "('by', 'the', 'lkb') 1\n",
            "('the', 'lkb', 'type') 1\n",
            "('lkb', 'type', 'stricttranssign') 1\n",
            "('type', 'stricttranssign', 'thus') 1\n",
            "('stricttranssign', 'thus', 'although') 1\n",
            "('thus', 'although', 'neither') 1\n",
            "('although', 'neither', 'ldoce') 1\n",
            "('neither', 'ldoce', 'llce') 1\n",
            "('ldoce', 'llce', 'or') 1\n",
            "('llce', 'or', 'the') 1\n",
            "('or', 'the', 'earlier') 1\n",
            "('the', 'earlier', 'subcategorised') 1\n",
            "('earlier', 'subcategorised', 'lexicon') 1\n",
            "('subcategorised', 'lexicon', 'contain') 1\n",
            "('lexicon', 'contain', 'all') 1\n",
            "('contain', 'all', 'the') 1\n",
            "('all', 'the', 'information') 1\n",
            "('the', 'information', 'about') 1\n",
            "('information', 'about', 'psychological') 1\n",
            "('about', 'psychological', 'verbs') 1\n",
            "('psychological', 'verbs', 'defined') 1\n",
            "('verbs', 'defined', 'in') 1\n",
            "('defined', 'in', 'sanfilippoaposs') 1\n",
            "('in', 'sanfilippoaposs', 'type') 1\n",
            "('sanfilippoaposs', 'type', 'system') 1\n",
            "('type', 'system', 'by') 1\n",
            "('system', 'by', 'using') 1\n",
            "('by', 'using', 'the') 1\n",
            "('using', 'the', 'conjunction') 1\n",
            "('the', 'conjunction', 'of') 1\n",
            "('conjunction', 'of', 'information') 1\n",
            "('of', 'information', 'available') 1\n",
            "('information', 'available', 'from') 1\n",
            "('available', 'from', 'all') 1\n",
            "('from', 'all', 'three') 1\n",
            "('all', 'three', 'it') 1\n",
            "('three', 'it', 'proved') 1\n",
            "('it', 'proved', 'possible') 1\n",
            "('proved', 'possible', 'to') 1\n",
            "('possible', 'to', 'effectively') 1\n",
            "('to', 'effectively', 'enrich') 1\n",
            "('effectively', 'enrich', 'this') 1\n",
            "('enrich', 'this', 'information') 1\n",
            "('this', 'information', 'at') 1\n",
            "('information', 'at', 'the') 1\n",
            "('at', 'the', 'same') 1\n",
            "('the', 'same', 'time') 1\n",
            "('same', 'time', 'as') 1\n",
            "('time', 'as', 'mapping') 1\n",
            "('as', 'mapping', 'it') 1\n",
            "('mapping', 'it', 'into') 1\n",
            "('it', 'into', 'a') 1\n",
            "('into', 'a', 'formal') 1\n",
            "('a', 'formal', 'representation') 1\n",
            "('formal', 'representation', 'towards') 1\n",
            "('representation', 'towards', 'a') 1\n",
            "('towards', 'a', 'multilingual') 1\n",
            "('a', 'multilingual', 'lkb') 1\n",
            "('multilingual', 'lkb', 'a') 1\n",
            "('lkb', 'a', 'goal') 1\n",
            "('a', 'goal', 'of') 1\n",
            "('goal', 'of', 'acquilex') 1\n",
            "('of', 'acquilex', 'is') 1\n",
            "('acquilex', 'is', 'to') 1\n",
            "('is', 'to', 'demonstrate') 1\n",
            "('to', 'demonstrate', 'that') 1\n",
            "('demonstrate', 'that', 'an') 1\n",
            "('that', 'an', 'lkb') 1\n",
            "('an', 'lkb', 'can') 1\n",
            "('lkb', 'can', 'be') 1\n",
            "('can', 'be', 'produced') 1\n",
            "('be', 'produced', 'that') 1\n",
            "('produced', 'that', 'usefully') 1\n",
            "('that', 'usefully', 'exploits') 1\n",
            "('usefully', 'exploits', 'various') 1\n",
            "('exploits', 'various', 'mrd') 1\n",
            "('various', 'mrd', 'sources') 1\n",
            "('mrd', 'sources', 'and') 1\n",
            "('sources', 'and', 'integrates') 1\n",
            "('and', 'integrates', 'multilingual') 1\n",
            "('integrates', 'multilingual', 'information') 1\n",
            "('multilingual', 'information', 'the') 1\n",
            "('information', 'the', 'use') 1\n",
            "('use', 'of', 'a') 1\n",
            "('of', 'a', 'common') 1\n",
            "('a', 'common', 'lrl') 1\n",
            "('common', 'lrl', 'with') 1\n",
            "('lrl', 'with', 'a') 1\n",
            "('with', 'a', 'common') 1\n",
            "('a', 'common', 'type') 1\n",
            "('common', 'type', 'system') 1\n",
            "('type', 'system', 'makes') 1\n",
            "('system', 'makes', 'it') 1\n",
            "('makes', 'it', 'possi') 1\n",
            "('it', 'possi', 'we') 1\n",
            "('possi', 'we', 'describe') 1\n",
            "('describe', 'the', 'design') 1\n",
            "('design', 'and', 'use') 1\n",
            "('use', 'of', 'the') 2\n",
            "('of', 'the', 'stanford') 1\n",
            "('the', 'stanford', 'corenlp') 1\n",
            "('stanford', 'corenlp', 'toolkit') 1\n",
            "('corenlp', 'toolkit', 'an') 1\n",
            "('toolkit', 'an', 'extensible') 1\n",
            "('an', 'extensible', 'pipeline') 1\n",
            "('extensible', 'pipeline', 'that') 1\n",
            "('pipeline', 'that', 'provides') 1\n",
            "('that', 'provides', 'core') 1\n",
            "('provides', 'core', 'natural') 1\n",
            "('core', 'natural', 'language') 1\n",
            "('natural', 'language', 'analysis') 1\n",
            "('language', 'analysis', 'this') 1\n",
            "('analysis', 'this', 'toolkit') 1\n",
            "('this', 'toolkit', 'is') 1\n",
            "('toolkit', 'is', 'quite') 1\n",
            "('is', 'quite', 'widely') 1\n",
            "('quite', 'widely', 'used') 1\n",
            "('widely', 'used', 'both') 1\n",
            "('used', 'both', 'in') 1\n",
            "('both', 'in', 'the') 1\n",
            "('in', 'the', 'research') 1\n",
            "('the', 'research', 'nlp') 1\n",
            "('research', 'nlp', 'community') 1\n",
            "('nlp', 'community', 'and') 1\n",
            "('community', 'and', 'also') 1\n",
            "('and', 'also', 'among') 1\n",
            "('also', 'among', 'commercial') 1\n",
            "('among', 'commercial', 'and') 1\n",
            "('commercial', 'and', 'government') 1\n",
            "('and', 'government', 'users') 1\n",
            "('government', 'users', 'of') 1\n",
            "('users', 'of', 'open') 1\n",
            "('of', 'open', 'source') 1\n",
            "('open', 'source', 'nlp') 1\n",
            "('source', 'nlp', 'technology') 1\n",
            "('nlp', 'technology', 'we') 1\n",
            "('technology', 'we', 'suggest') 1\n",
            "('we', 'suggest', 'gaussian') 1\n",
            "('suggest', 'gaussian', 'processes') 1\n",
            "('gaussian', 'processes', 'gps') 1\n",
            "('processes', 'gps', 'are') 1\n",
            "('gps', 'are', 'a') 1\n",
            "('are', 'a', 'powerful') 1\n",
            "('a', 'powerful', 'modelling') 1\n",
            "('powerful', 'modelling', 'framework') 1\n",
            "('modelling', 'framework', 'incorporating') 1\n",
            "('framework', 'incorporating', 'kernels') 1\n",
            "('incorporating', 'kernels', 'and') 1\n",
            "('kernels', 'and', 'bayesian') 1\n",
            "('and', 'bayesian', 'inference') 1\n",
            "('bayesian', 'inference', 'and') 1\n",
            "('inference', 'and', 'are') 1\n",
            "('and', 'are', 'recognised') 1\n",
            "('are', 'recognised', 'as') 1\n",
            "('recognised', 'as', 'stateoftheart') 1\n",
            "('as', 'stateoftheart', 'for') 1\n",
            "('stateoftheart', 'for', 'many') 1\n",
            "('for', 'many', 'machine') 1\n",
            "('many', 'machine', 'learning') 1\n",
            "('machine', 'learning', 'tasks') 1\n",
            "('learning', 'tasks', 'a') 1\n",
            "('tasks', 'a', 'fundamental') 1\n",
            "('a', 'fundamental', 'issue') 1\n",
            "('fundamental', 'issue', 'in') 1\n",
            "('issue', 'in', 'natural') 1\n",
            "('is', 'the', 'prerequisite') 1\n",
            "('the', 'prerequisite', 'of') 1\n",
            "('prerequisite', 'of', 'an') 1\n",
            "('of', 'an', 'enormous') 1\n",
            "('an', 'enormous', 'quantity') 1\n",
            "('enormous', 'quantity', 'of') 1\n",
            "('quantity', 'of', 'preprogrammed') 1\n",
            "('of', 'preprogrammed', 'knowledge') 1\n",
            "('preprogrammed', 'knowledge', 'concerning') 1\n",
            "('knowledge', 'concerning', 'both') 1\n",
            "('concerning', 'both', 'the') 1\n",
            "('both', 'the', 'language') 1\n",
            "('the', 'language', 'and') 1\n",
            "('and', 'the', 'domain') 1\n",
            "('the', 'domain', 'under') 1\n",
            "('domain', 'under', 'examination') 1\n",
            "('under', 'examination', 'manual') 1\n",
            "('examination', 'manual', 'acquisition') 1\n",
            "('manual', 'acquisition', 'of') 1\n",
            "('acquisition', 'of', 'this') 1\n",
            "('of', 'this', 'knowledge') 1\n",
            "('this', 'knowledge', 'is') 1\n",
            "('knowledge', 'is', 'tedious') 1\n",
            "('is', 'tedious', 'and') 1\n",
            "('tedious', 'and', 'error') 1\n",
            "('and', 'error', 'prone') 1\n",
            "('error', 'prone', 'development') 1\n",
            "('prone', 'development', 'of') 1\n",
            "('development', 'of', 'an') 1\n",
            "('of', 'an', 'automated') 1\n",
            "('an', 'automated', 'acquisition') 1\n",
            "('automated', 'acquisition', 'that') 1\n",
            "('acquisition', 'that', 'supports') 1\n",
            "('that', 'supports', 'sophisticated') 1\n",
            "('supports', 'sophisticated', 'natural') 1\n",
            "('sophisticated', 'natural', 'language') 1\n",
            "('language', 'processing', 'while') 1\n",
            "('processing', 'while', 'significantly') 1\n",
            "('while', 'significantly', 'simplifying') 1\n",
            "('significantly', 'simplifying', 'the') 1\n",
            "('simplifying', 'the', 'interface') 1\n",
            "('the', 'interface', 'between') 1\n",
            "('interface', 'between', 'domainspecific') 1\n",
            "('between', 'domainspecific', 'knowledge') 1\n",
            "('domainspecific', 'knowledge', 'and') 1\n",
            "('knowledge', 'and', 'general') 1\n",
            "('and', 'general', 'linguis') 1\n",
            "('general', 'linguis', 'tic') 1\n",
            "('linguis', 'tic', 'resources') 1\n",
            "('tic', 'resources', 'this') 1\n",
            "('resources', 'this', 'paper') 1\n",
            "('this', 'paper', 'presents') 2\n",
            "('paper', 'presents', 'the') 1\n",
            "('presents', 'the', 'results') 1\n",
            "('the', 'results', 'of') 1\n",
            "('results', 'of', 'our') 1\n",
            "('of', 'our', 'experiences') 1\n",
            "('our', 'experiences', 'in') 1\n",
            "('experiences', 'in', 'designing') 1\n",
            "('in', 'designing', 'and') 1\n",
            "('designing', 'and', 'using') 1\n",
            "('and', 'using', 'the') 1\n",
            "('using', 'the', 'upper') 1\n",
            "('the', 'upper', 'model') 1\n",
            "('upper', 'model', 'in') 1\n",
            "('model', 'in', 'a') 1\n",
            "('in', 'a', 'variety') 1\n",
            "('a', 'variety', 'of') 1\n",
            "('variety', 'of', 'applications') 1\n",
            "('of', 'applications', 'over') 1\n",
            "('applications', 'over', 'the') 1\n",
            "('over', 'the', 'past') 1\n",
            "('past', 'years', 'into') 1\n",
            "('years', 'into', 'the') 1\n",
            "('into', 'the', 'same') 1\n",
            "('the', 'same', 'or') 1\n",
            "('same', 'or', 'neighboring') 1\n",
            "('or', 'neighboring', 'map') 1\n",
            "('neighboring', 'map', 'nodes') 1\n",
            "('map', 'nodes', 'nodes') 1\n",
            "('nodes', 'nodes', 'may') 1\n",
            "('nodes', 'may', 'thus') 1\n",
            "('may', 'thus', 'be') 1\n",
            "('thus', 'be', 'viewed') 1\n",
            "('be', 'viewed', 'as') 1\n",
            "('viewed', 'as', 'word') 1\n",
            "('as', 'word', 'categories') 1\n",
            "('word', 'categories', 'although') 1\n",
            "('categories', 'although', 'no') 1\n",
            "('although', 'no', 'a') 1\n",
            "('no', 'a', 'priori') 1\n",
            "('a', 'priori', 'information') 1\n",
            "('priori', 'information', 'about') 1\n",
            "('information', 'about', 'classes') 1\n",
            "('about', 'classes', 'is') 1\n",
            "('classes', 'is', 'given') 1\n",
            "('is', 'given', 'during') 1\n",
            "('given', 'during', 'the') 1\n",
            "('during', 'the', 'selforganizing') 1\n",
            "('the', 'selforganizing', 'process') 1\n",
            "('selforganizing', 'process', 'a') 1\n",
            "('process', 'a', 'model') 1\n",
            "('a', 'model', 'of') 1\n",
            "('the', 'word', 'classes') 1\n",
            "('word', 'classes', 'emerges') 1\n",
            "('classes', 'emerges', 'the') 1\n",
            "('emerges', 'the', 'central') 1\n",
            "('the', 'central', 'topic') 1\n",
            "('central', 'topic', 'of') 1\n",
            "('topic', 'of', 'the') 1\n",
            "('of', 'the', 'thesis') 1\n",
            "('the', 'thesis', 'is') 1\n",
            "('thesis', 'is', 'the') 1\n",
            "('is', 'the', 'use') 1\n",
            "('of', 'the', 'som') 1\n",
            "('the', 'som', 'in') 1\n",
            "('som', 'in', 'natural') 1\n",
            "('processing', 'the', 'approach') 1\n",
            "('the', 'approach', 'this') 1\n",
            "('approach', 'this', 'paper') 1\n",
            "('paper', 'presents', 'a') 1\n",
            "('presents', 'a', 'workbench') 1\n",
            "('a', 'workbench', 'built') 1\n",
            "('workbench', 'built', 'by') 1\n",
            "('built', 'by', 'priberam') 1\n",
            "('by', 'priberam', 'informática') 1\n",
            "('priberam', 'informática', 'for') 1\n",
            "('informática', 'for', 'the') 1\n",
            "('for', 'the', 'development') 1\n",
            "('of', 'the', 'company') 1\n",
            "('the', 'company', '’') 1\n",
            "('company', '’', 's') 1\n",
            "('’', 's', 'natural') 1\n",
            "('s', 'natural', 'language') 1\n",
            "('language', 'processing', 'technology') 1\n",
            "('processing', 'technology', 'this') 1\n",
            "('technology', 'this', 'workbench') 1\n",
            "('this', 'workbench', 'includes') 1\n",
            "('workbench', 'includes', 'a') 1\n",
            "('includes', 'a', 'set') 1\n",
            "('a', 'set', 'of') 1\n",
            "('set', 'of', 'linguistic') 1\n",
            "('of', 'linguistic', 'resources') 1\n",
            "('linguistic', 'resources', 'and') 1\n",
            "('resources', 'and', 'software') 1\n",
            "('and', 'software', 'tools') 1\n",
            "('software', 'tools', 'that') 1\n",
            "('tools', 'that', 'have') 1\n",
            "('that', 'have', 'been') 1\n",
            "('have', 'been', 'applied') 1\n",
            "('been', 'applied', 'in') 1\n",
            "('applied', 'in', 'a') 1\n",
            "('in', 'a', 'considerable') 1\n",
            "('a', 'considerable', 'number') 1\n",
            "('considerable', 'number', 'of') 1\n",
            "('number', 'of', 'practical') 1\n",
            "('of', 'practical', 'purposes') 1\n",
            "('practical', 'purposes', 'covering') 1\n",
            "('purposes', 'covering', 'abstract—natural') 1\n",
            "('covering', 'abstract—natural', 'language') 1\n",
            "('nlp', 'is', 'an') 1\n",
            "('is', 'an', 'effective') 1\n",
            "('an', 'effective', 'approach') 1\n",
            "('effective', 'approach', 'for') 1\n",
            "('approach', 'for', 'bringing') 1\n",
            "('for', 'bringing', 'improvement') 1\n",
            "('bringing', 'improvement', 'in') 1\n",
            "('improvement', 'in', 'educational') 1\n",
            "('in', 'educational', 'setting') 1\n",
            "('educational', 'setting', 'implementing') 1\n",
            "('setting', 'implementing', 'nlp') 1\n",
            "('implementing', 'nlp', 'involves') 1\n",
            "('nlp', 'involves', 'initiating') 1\n",
            "('involves', 'initiating', 'the') 1\n",
            "('initiating', 'the', 'process') 1\n",
            "('process', 'of', 'learning') 1\n",
            "('of', 'learning', 'through') 1\n",
            "('learning', 'through', 'the') 1\n",
            "('through', 'the', 'natural') 1\n",
            "('the', 'natural', 'acquisition') 1\n",
            "('natural', 'acquisition', 'in') 1\n",
            "('acquisition', 'in', 'the') 1\n",
            "('in', 'the', 'educational') 1\n",
            "('the', 'educational', 'systems') 1\n",
            "('educational', 'systems', 'it') 1\n",
            "('systems', 'it', 'is') 1\n",
            "('it', 'is', 'based') 1\n",
            "('is', 'based', 'on') 1\n",
            "('based', 'on', 'effective') 1\n",
            "('on', 'effective', 'approaches') 1\n",
            "('effective', 'approaches', 'for') 1\n",
            "('approaches', 'for', 'providing') 1\n",
            "('for', 'providing', 'a') 1\n",
            "('providing', 'a', 'solution') 1\n",
            "('a', 'solution', 'abstract') 1\n",
            "('solution', 'abstract', 'after') 1\n",
            "('abstract', 'after', 'twenty') 1\n",
            "('after', 'twenty', 'years') 1\n",
            "('twenty', 'years', 'of') 1\n",
            "('years', 'of', 'disfavor') 1\n",
            "('of', 'disfavor', 'a') 1\n",
            "('disfavor', 'a', 'technology') 1\n",
            "('a', 'technology', 'has') 1\n",
            "('technology', 'has', 'returned') 1\n",
            "('has', 'returned', 'which') 1\n",
            "('returned', 'which', 'imitates') 1\n",
            "('which', 'imitates', 'the') 1\n",
            "('imitates', 'the', 'processes') 1\n",
            "('the', 'processes', 'of') 1\n",
            "('processes', 'of', 'the') 1\n",
            "('of', 'the', 'brain') 1\n",
            "('the', 'brain', 'natural') 1\n",
            "('brain', 'natural', 'language') 1\n",
            "('natural', 'language', 'experiments') 1\n",
            "('language', 'experiments', 'sejnowski') 1\n",
            "('experiments', 'sejnowski', 'rosenberg') 1\n",
            "('sejnowski', 'rosenberg', 'demonstrate') 1\n",
            "('rosenberg', 'demonstrate', 'that') 1\n",
            "('demonstrate', 'that', 'neural') 1\n",
            "('that', 'neural', 'network') 1\n",
            "('neural', 'network', 'computing') 1\n",
            "('network', 'computing', 'architecture') 1\n",
            "('computing', 'architecture', 'can') 1\n",
            "('architecture', 'can', 'learn') 1\n",
            "('can', 'learn', 'from') 1\n",
            "('learn', 'from', 'actual') 1\n",
            "('from', 'actual', 'spoken') 1\n",
            "('actual', 'spoken', 'language') 1\n",
            "('spoken', 'language', 'observe') 1\n",
            "('language', 'observe', 'rules') 1\n",
            "('observe', 'rules', 'of') 1\n",
            "('rules', 'of', 'pronunciation') 1\n",
            "('of', 'pronunciation', 'text') 1\n",
            "('pronunciation', 'text', 'statistics') 1\n",
            "('text', 'statistics', 'are') 1\n",
            "('statistics', 'are', 'frequently') 1\n",
            "('are', 'frequently', 'used') 1\n",
            "('frequently', 'used', 'in') 1\n",
            "('used', 'in', 'stylometry') 1\n",
            "('in', 'stylometry', 'and') 1\n",
            "('stylometry', 'and', 'cryptography') 1\n",
            "('and', 'cryptography', 'studies') 1\n",
            "('cryptography', 'studies', 'in') 1\n",
            "('studies', 'in', 'this') 1\n",
            "('this', 'paper', 'some') 1\n",
            "('paper', 'some', 'text') 1\n",
            "('some', 'text', 'statistics') 1\n",
            "('text', 'statistics', 'tools') 1\n",
            "('statistics', 'tools', 'are') 1\n",
            "('tools', 'are', 'developed') 1\n",
            "('are', 'developed', 'in') 1\n",
            "('developed', 'in', 'iso') 1\n",
            "('in', 'iso', 'prolog') 1\n",
            "('iso', 'prolog', 'for') 1\n",
            "('prolog', 'for', 'natural') 1\n",
            "('language', 'processing', 'details') 1\n",
            "('processing', 'details', 'are') 1\n",
            "('details', 'are', 'given') 1\n",
            "('are', 'given', 'on') 1\n",
            "('given', 'on', 'the') 1\n",
            "('on', 'the', 'usage') 1\n",
            "('the', 'usage', 'of') 1\n",
            "('usage', 'of', 'usercallable') 1\n",
            "('of', 'usercallable', 'predicates') 1\n",
            "('usercallable', 'predicates', 'logic') 1\n",
            "('predicates', 'logic', 'and') 1\n",
            "('logic', 'and', 'limitations') 1\n",
            "('and', 'limitations', 'of') 1\n",
            "('limitations', 'of', 'the') 1\n",
            "('of', 'the', 'program') 1\n",
            "('the', 'program', 'are') 1\n",
            "('program', 'are', 'also') 1\n",
            "('are', 'also', 'discussed') 1\n",
            "('also', 'discussed', 'we') 1\n",
            "('discussed', 'we', 'summarize') 1\n",
            "('we', 'summarize', 'our') 1\n",
            "('summarize', 'our', 'experience') 1\n",
            "('our', 'experience', 'using') 1\n",
            "('experience', 'using', 'framenet') 1\n",
            "('using', 'framenet', 'in') 1\n",
            "('framenet', 'in', 'two') 1\n",
            "('in', 'two', 'rather') 1\n",
            "('two', 'rather', 'different') 1\n",
            "('rather', 'different', 'projects') 1\n",
            "('different', 'projects', 'in') 1\n",
            "('projects', 'in', 'natural') 1\n",
            "('processing', 'nlp', 'we') 1\n",
            "('nlp', 'we', 'conclude') 1\n",
            "('we', 'conclude', 'that') 1\n",
            "('conclude', 'that', 'nlp') 1\n",
            "('that', 'nlp', 'can') 1\n",
            "('nlp', 'can', 'benefit') 1\n",
            "('can', 'benefit', 'from') 1\n",
            "('benefit', 'from', 'framenet') 1\n",
            "('from', 'framenet', 'in') 1\n",
            "('framenet', 'in', 'different') 1\n",
            "('in', 'different', 'ways') 1\n",
            "('different', 'ways', 'but') 1\n",
            "('ways', 'but', 'we') 1\n",
            "('but', 'we', 'sketch') 1\n",
            "('we', 'sketch', 'some') 1\n",
            "('sketch', 'some', 'problems') 1\n",
            "('some', 'problems', 'that') 1\n",
            "('problems', 'that', 'need') 1\n",
            "('that', 'need', 'to') 1\n",
            "('need', 'to', 'be') 1\n",
            "('to', 'be', 'overcome') 1\n",
            "('be', 'overcome', 'research') 1\n",
            "('overcome', 'research', 'in') 1\n",
            "('research', 'in', 'natural') 1\n",
            "('processing', 'nlp', 'has') 1\n",
            "('nlp', 'has', 'in') 1\n",
            "('has', 'in', 'recent') 1\n",
            "('recent', 'years', 'benefited') 1\n",
            "('years', 'benefited', 'from') 1\n",
            "('benefited', 'from', 'the') 1\n",
            "('from', 'the', 'enormous') 1\n",
            "('the', 'enormous', 'amount') 1\n",
            "('enormous', 'amount', 'of') 1\n",
            "('amount', 'of', 'raw') 1\n",
            "('of', 'raw', 'textual') 1\n",
            "('raw', 'textual', 'data') 1\n",
            "('textual', 'data', 'available') 1\n",
            "('data', 'available', 'on') 1\n",
            "('available', 'on', 'the') 1\n",
            "('on', 'the', 'world') 1\n",
            "('the', 'world', 'wide') 1\n",
            "('world', 'wide', 'web') 1\n",
            "('wide', 'web', 'the') 1\n",
            "('web', 'the', 'presence') 1\n",
            "('the', 'presence', 'of') 1\n",
            "('presence', 'of', 'standard') 1\n",
            "('of', 'standard', 'search') 1\n",
            "('standard', 'search', 'engines') 1\n",
            "('search', 'engines', 'has') 1\n",
            "('engines', 'has', 'made') 1\n",
            "('has', 'made', 'this') 1\n",
            "('made', 'this', 'data') 1\n",
            "('this', 'data', 'accessible') 1\n",
            "('data', 'accessible', 'to') 1\n",
            "('accessible', 'to', 'computational') 1\n",
            "('to', 'computational', 'linguists') 1\n",
            "('computational', 'linguists', 'as') 1\n",
            "('linguists', 'as', 'a') 1\n",
            "('as', 'a', 'corpus') 1\n",
            "('a', 'corpus', 'of') 1\n",
            "('corpus', 'of', 'a') 1\n",
            "('of', 'a', 'size') 1\n",
            "('a', 'size', 'that') 1\n",
            "('size', 'that', 'had') 1\n",
            "('that', 'had', 'never') 1\n",
            "('had', 'never', 'existed') 1\n",
            "('never', 'existed', 'natural') 1\n",
            "('existed', 'natural', 'language') 1\n",
            "('processing', 'nlp', 'programs') 1\n",
            "('nlp', 'programs', 'are') 1\n",
            "('programs', 'are', 'confronted') 1\n",
            "('are', 'confronted', 'with') 1\n",
            "('confronted', 'with', 'various') 1\n",
            "('with', 'various', 'diculties') 1\n",
            "('various', 'diculties', 'in') 1\n",
            "('diculties', 'in', 'processing') 1\n",
            "('in', 'processing', 'html') 1\n",
            "('processing', 'html', 'and') 1\n",
            "('html', 'and', 'xml') 1\n",
            "('and', 'xml', 'documents') 1\n",
            "('xml', 'documents', 'and') 1\n",
            "('documents', 'and', 'have') 1\n",
            "('and', 'have', 'the') 1\n",
            "('have', 'the', 'potential') 1\n",
            "('the', 'potential', 'to') 1\n",
            "('potential', 'to', 'produce') 1\n",
            "('to', 'produce', 'better') 1\n",
            "('produce', 'better', 'results') 1\n",
            "('better', 'results', 'if') 1\n",
            "('results', 'if', 'linguistic') 1\n",
            "('if', 'linguistic', 'information') 1\n",
            "('linguistic', 'information', 'is') 1\n",
            "('information', 'is', 'annotated') 1\n",
            "('is', 'annotated', 'in') 1\n",
            "('annotated', 'in', 'the') 1\n",
            "('in', 'the', 'source') 1\n",
            "('the', 'source', 'texts') 1\n",
            "('source', 'texts', 'wehave') 1\n",
            "('texts', 'wehave', 'therefore') 1\n",
            "('wehave', 'therefore', 'developed') 1\n",
            "('therefore', 'developed', 'the') 1\n",
            "('developed', 'the', 'linguistic') 1\n",
            "('the', 'linguistic', 'annotation') 1\n",
            "('linguistic', 'annotation', 'language') 1\n",
            "('annotation', 'language', 'or') 1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_MD823kaTffd",
        "outputId": "55477570-a01f-4b14-8450-30425b21bb53"
      },
      "source": [
        "!pip install tomotopy"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: tomotopy in /usr/local/lib/python3.7/dist-packages (0.11.1)\n",
            "Requirement already satisfied: numpy>=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tomotopy) (1.19.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QgLCRjBoTfh3",
        "outputId": "f2e75f38-4837-4213-986f-2356037fdd4c"
      },
      "source": [
        "import logging\n",
        "import nltk\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tomotopy as tp\n",
        "\n",
        "model = tp.SLDAModel(k=20) #supervisedLDA\n",
        "for m in articles['Title']:\n",
        "    model.add_doc(m.split())\n",
        "\n",
        "for m in range(0, 100, 10):\n",
        "    model.train(10)\n",
        "    print('Iteration'.format(m, model.ll_per_word))\n",
        "\n",
        "for k in range(model.k):\n",
        "    print('Top words of a topic #{}'.format(k))\n",
        "    print(model.get_topic_words(k, top_n=15))"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Iteration\n",
            "Top words of a topic #0\n",
            "[('NLP', 0.07132678478956223), ('evaluation', 0.04995012283325195), ('particular', 0.02857346646487713), ('system', 0.02857346646487713), ('thesaurus', 0.02857346646487713), ('complexity', 0.02857346646487713), ('domain', 0.02857346646487713), ('issue', 0.021447911858558655), ('tasks.', 0.021447911858558655), ('discus', 0.021447911858558655), ('extract', 0.021447911858558655), ('machine', 0.021447911858558655), ('benefit', 0.014322360046207905), ('report', 0.014322360046207905), ('rather', 0.014322360046207905)]\n",
            "Top words of a topic #1\n",
            "[('program', 0.041623421013355255), ('86]', 0.031243514269590378), ('language', 0.031243514269590378), ('brief', 0.031243514269590378), ('u', 0.02086360938847065), ('principle', 0.02086360938847065), ('QA', 0.02086360938847065), ('automatically', 0.02086360938847065), ('help', 0.02086360938847065), ('point', 0.02086360938847065), ('It', 0.02086360938847065), ('tic', 0.010483703576028347), ('Work', 0.010483703576028347), ('intervening', 0.010483703576028347), ('significantly', 0.010483703576028347)]\n",
            "Top words of a topic #2\n",
            "[('In', 0.137278214097023), ('relationship', 0.027528809383511543), ('statistic', 0.027528809383511543), ('understanding', 0.027528809383511543), ('parsing', 0.018383026123046875), ('Processing,', 0.018383026123046875), ('ABSTRACT:', 0.018383026123046875), ('called', 0.018383026123046875), ('spoken', 0.018383026123046875), ('basic', 0.018383026123046875), ('Since', 0.018383026123046875), ('feature', 0.018383026123046875), ('years,', 0.018383026123046875), ('(ML)', 0.018383026123046875), ('solve', 0.018383026123046875)]\n",
            "Top words of a topic #3\n",
            "[('using', 0.06757162511348724), ('based', 0.04507274925708771), ('improvement', 0.0300734993070364), ('various', 0.0300734993070364), ('applications.', 0.0300734993070364), ('number', 0.022573871538043022), ('made', 0.015074246563017368), ('kernelized', 0.015074246563017368), ('produce', 0.015074246563017368), ('version', 0.015074246563017368), ('dictionary', 0.015074246563017368), ('mathematical', 0.015074246563017368), ('practical', 0.015074246563017368), ('special', 0.015074246563017368), ('Abstract:', 0.015074246563017368)]\n",
            "Top words of a topic #4\n",
            "[('Natural', 0.15598104894161224), ('Language', 0.13727080821990967), ('Processing', 0.09985031932592392), ('range', 0.037482850253582), ('image', 0.018772607669234276), ('wide', 0.018772607669234276), ('includes', 0.018772607669234276), ('Machine', 0.018772607669234276), ('solution', 0.012535861693322659), ('way', 0.012535861693322659), ('systems.', 0.012535861693322659), ('number', 0.012535861693322659), ('many', 0.012535861693322659), ('Indian', 0.012535861693322659), ('recognition,', 0.012535861693322659)]\n",
            "Top words of a topic #5\n",
            "[('also', 0.05940242484211922), ('limited', 0.0475456528365612), ('Many', 0.03568888083100319), ('among', 0.03568888083100319), ('information', 0.03568888083100319), ('parsing,', 0.023832108825445175), ('avoid', 0.023832108825445175), ('provides', 0.023832108825445175), ('dominate,', 0.01197533868253231), ('face-to-face', 0.01197533868253231), ('observe', 0.01197533868253231), ('interaction', 0.01197533868253231), ('audience', 0.01197533868253231), ('humor', 0.01197533868253231), ('interdependency', 0.01197533868253231)]\n",
            "Top words of a topic #6\n",
            "[('The', 0.14246492087841034), ('data', 0.08145210891962051), ('visual', 0.030608095228672028), ('deep', 0.02043929323554039), ('work', 0.02043929323554039), ('LOLITA', 0.02043929323554039), ('execution', 0.02043929323554039), ('survey', 0.02043929323554039), ('parallel', 0.02043929323554039), ('priori', 0.010270490311086178), ('yield', 0.010270490311086178), ('inherent', 0.010270490311086178), ('cannot', 0.010270490311086178), ('higher-level', 0.010270490311086178), ('distinctly', 0.010270490311086178)]\n",
            "Top words of a topic #7\n",
            "[('technique', 0.07901535928249359), ('use', 0.050308600068092346), ('computational', 0.043131910264492035), ('analysis', 0.043131910264492035), ('statistical', 0.035955220460891724), ('automated', 0.035955220460891724), ('standard', 0.028778530657291412), ('extraction', 0.028778530657291412), ('important', 0.021601837128400803), ('may', 0.021601837128400803), ('music', 0.021601837128400803), ('study', 0.014425147324800491), ('Logics', 0.014425147324800491), ('engineering', 0.014425147324800491), ('one', 0.014425147324800491)]\n",
            "Top words of a topic #8\n",
            "[('used', 0.056193090975284576), ('document', 0.056193090975284576), ('(NLP)', 0.056193090975284576), ('The', 0.056193090975284576), ('information', 0.04371959716081619), ('speech', 0.04371959716081619), ('method', 0.037482850253582), ('task', 0.037482850253582), ('new', 0.037482850253582), ('different', 0.025009356439113617), ('tasks,', 0.025009356439113617), ('part', 0.018772607669234276), ('significant', 0.018772607669234276), ('Information', 0.018772607669234276), ('intelligent', 0.012535861693322659)]\n",
            "Top words of a topic #9\n",
            "[('language', 0.19977284967899323), ('natural', 0.15277668833732605), ('processing', 0.14886033535003662), ('knowledge', 0.03528628498315811), ('Abstract', 0.03136993944644928), ('found', 0.0274535920470953), ('linguistic', 0.023537246510386467), ('retrieval', 0.023537246510386467), ('developed', 0.019620899111032486), ('effective', 0.015704551711678505), ('model', 0.011788204312324524), ('better', 0.011788204312324524), ('work', 0.011788204312324524), ('caption', 0.007871856912970543), ('We', 0.007871856912970543)]\n",
            "Top words of a topic #10\n",
            "[('This', 0.14339101314544678), ('language', 0.08707894384860992), ('paper', 0.07684038579463959), ('natural', 0.061482544988393784), ('system', 0.05124398693442345), ('focus', 0.04612470790743828), ('1', 0.04100542888045311), ('research', 0.04100542888045311), ('process', 0.03588614985346794), ('recent', 0.030766868963837624), ('tool', 0.015409030951559544), ('various', 0.0102897509932518), ('programming,', 0.0102897509932518), ('kind', 0.0102897509932518), ('briefly', 0.0102897509932518)]\n",
            "Top words of a topic #11\n",
            "[('learning', 0.08737682551145554), ('application', 0.06242983788251877), ('development', 0.056193090975284576), ('year', 0.03124610334634781), ('present', 0.03124610334634781), ('field', 0.03124610334634781), ('chapter', 0.025009356439113617), ('approach', 0.025009356439113617), ('current', 0.018772607669234276), ('(NLP)', 0.018772607669234276), ('first', 0.018772607669234276), ('support', 0.018772607669234276), ('examines', 0.018772607669234276), ('including', 0.012535861693322659), ('computer', 0.012535861693322659)]\n",
            "Top words of a topic #12\n",
            "[('machine', 0.06711915880441666), ('within', 0.04198089987039566), ('logic', 0.04198089987039566), ('processing,', 0.03360147774219513), ('generic', 0.0252220556139946), ('much', 0.016842635348439217), ('work', 0.016842635348439217), ('digital', 0.016842635348439217), ('educational', 0.016842635348439217), ('taken', 0.016842635348439217), ('providing', 0.016842635348439217), ('fact', 0.016842635348439217), ('programming', 0.016842635348439217), ('modeling', 0.016842635348439217), ('paradigm', 0.00846321415156126)]\n",
            "Top words of a topic #13\n",
            "[('information', 0.06654642522335052), (':', 0.03806721419095993), ('lex-sign', 0.0285741426050663), ('!', 0.0285741426050663), ('system,', 0.0285741426050663), ('source', 0.0285741426050663), ('type', 0.0285741426050663), ('acquisition', 0.0285741426050663), ('use', 0.0285741426050663), ('possible', 0.01908107101917267), ('available', 0.01908107101917267), ('textual', 0.01908107101917267), ('common', 0.01908107101917267), ('enormous', 0.01908107101917267), ('time', 0.01908107101917267)]\n",
            "Top words of a topic #14\n",
            "[('NLP', 0.07845233380794525), ('result', 0.05707567557692528), ('argue', 0.04282457008957863), ('systems.', 0.0356990210711956), ('plan', 0.02857346646487713), ('current', 0.02857346646487713), ('state', 0.02857346646487713), ('art', 0.021447911858558655), ('research', 0.021447911858558655), ('role', 0.021447911858558655), ('software', 0.021447911858558655), ('recognition', 0.021447911858558655), ('relation', 0.014322360046207905), ('outline', 0.014322360046207905), ('processing(NLP)', 0.014322360046207905)]\n",
            "Top words of a topic #15\n",
            "[('pattern', 0.05870635807514191), ('form', 0.04698852077126503), ('purpose', 0.03527068346738815), ('musical', 0.03527068346738815), ('Patterns', 0.023552848026156425), ('propagation', 0.023552848026156425), ('solo', 0.023552848026156425), ('One', 0.023552848026156425), ('structure', 0.023552848026156425), ('years.', 0.023552848026156425), ('compound', 0.023552848026156425), ('analyzing', 0.023552848026156425), ('implicit', 0.023552848026156425), ('learn', 0.011835013516247272), ('methods.', 0.011835013516247272)]\n",
            "Top words of a topic #16\n",
            "[('architecture', 0.03806721419095993), ('requirement', 0.03806721419095993), ('single', 0.0285741426050663), ('several', 0.0285741426050663), ('network', 0.0285741426050663), ('neural', 0.01908107101917267), ('After', 0.01908107101917267), ('discussion', 0.01908107101917267), ('describes', 0.01908107101917267), ('rule', 0.01908107101917267), ('During', 0.01908107101917267), ('related', 0.01908107101917267), ('tags,', 0.01908107101917267), ('recognition', 0.01908107101917267), ('Abstract—Natural', 0.01908107101917267)]\n",
            "Top words of a topic #17\n",
            "[('sense-id', 0.05651683732867241), ('make', 0.028305435553193092), ('relevant', 0.028305435553193092), ('query', 0.028305435553193092), ('?', 0.028305435553193092), ('=', 0.028305435553193092), ('LKB', 0.028305435553193092), ('constraint', 0.018901636824011803), ('various', 0.018901636824011803), ('whole', 0.018901636824011803), ('information.', 0.018901636824011803), ('verb', 0.018901636824011803), ('expanded', 0.018901636824011803), ('integrating', 0.018901636824011803), ('(9)', 0.018901636824011803)]\n",
            "Top words of a topic #18\n",
            "[('We', 0.13642887771129608), ('approach', 0.07901535928249359), ('processing.', 0.07183866947889328), ('describe', 0.050308600068092346), ('paper,', 0.035955220460891724), ('class', 0.028778530657291412), ('review', 0.028778530657291412), ('high', 0.021601837128400803), ('output', 0.021601837128400803), ('capture', 0.021601837128400803), ('design', 0.021601837128400803), ('process', 0.014425147324800491), ('global', 0.014425147324800491), ('Our', 0.014425147324800491), ('measure', 0.007248457055538893)]\n",
            "Top words of a topic #19\n",
            "[('word', 0.10901626199483871), ('text', 0.08387800306081772), ('sense', 0.03360147774219513), ('syntactic', 0.03360147774219513), ('need', 0.03360147774219513), ('semantic', 0.0252220556139946), ('set', 0.0252220556139946), ('including', 0.0252220556139946), ('model', 0.016842635348439217), ('analysis,', 0.016842635348439217), ('workbench', 0.016842635348439217), ('semantically', 0.016842635348439217), ('resource', 0.016842635348439217), ('general', 0.016842635348439217), ('Nodes', 0.00846321415156126)]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tlspD6Y3XCQ_",
        "outputId": "c24ad560-b4e8-4791-f4b1-c1eee64bba61"
      },
      "source": [
        "#top 10 clusters\n",
        "!pip install biterm\n",
        "\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from biterm.btm import oBTM\n",
        "from biterm.utility import vec_to_biterms, topic_summuary\n",
        "\n",
        "biterm = articles['Title'].head(100).values\n",
        "vector = TfidfVectorizer(stop_words='english')\n",
        "X_tfidf =vector.fit_transform(biterm).toarray()\n",
        "\n",
        "\n",
        "text = np.array(vector.get_feature_names())\n",
        "words = vec_to_biterms(X_tfidf)\n",
        "\n",
        "model = oBTM(num_topics=10, V=text)\n",
        "model_lda= model.fit_transform(words, iterations=10)\n",
        "\n",
        "\n",
        "topic_summuary(model.phi_wz.T, X_tfidf, text, 10)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: biterm in /usr/local/lib/python3.7/dist-packages (0.1.5)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from biterm) (1.19.5)\n",
            "Requirement already satisfied: cython in /usr/local/lib/python3.7/dist-packages (from biterm) (0.29.22)\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (from biterm) (3.2.5)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from biterm) (4.41.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from nltk->biterm) (1.15.0)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "100%|██████████| 10/10 [00:28<00:00,  2.88s/it]\n",
            "/usr/local/lib/python3.7/dist-packages/biterm/btm.py:76: RuntimeWarning: invalid value encountered in true_divide\n",
            "  P_zd[i] = P_zb.sum(axis=0) / P_zb.sum(axis=0).sum()\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Topic 0 | Coherence=-75.85 | Top words= processing natural language nlp paper information knowledge based data web\n",
            "Topic 1 | Coherence=-28.49 | Top words= intensive level design approach study technique high purpose rule analyzing\n",
            "Topic 2 | Coherence=-78.16 | Top words= processing natural language nlp machine present resource learning tasks translation\n",
            "Topic 3 | Coherence=-42.69 | Top words= use source word sense information various make lexicon experience expanded\n",
            "Topic 4 | Coherence=-73.50 | Top words= natural language processing nlp analysis text paper syntactic new developed\n",
            "Topic 5 | Coherence=-46.27 | Top words= information word retrieval sense problem used document based statistic semantic\n",
            "Topic 6 | Coherence=-59.58 | Top words= processing language natural learning work application development machine nlp current\n",
            "Topic 7 | Coherence=-73.35 | Top words= language natural processing nlp research information result machine recent key\n",
            "Topic 8 | Coherence=-76.76 | Top words= language natural processing systems development process single learning computational model\n",
            "Topic 9 | Coherence=-77.97 | Top words= language natural processing abstract task approach process linguistic architecture use\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'coherence': [-75.8528923718329,\n",
              "  -28.490005036485748,\n",
              "  -78.15805372802366,\n",
              "  -42.69487853871084,\n",
              "  -73.50099298128484,\n",
              "  -46.272801491662825,\n",
              "  -59.57557117962017,\n",
              "  -73.34796670399827,\n",
              "  -76.75636644000573,\n",
              "  -77.97468723876823],\n",
              " 'top_words': [array(['processing', 'natural', 'language', 'nlp', 'paper', 'information',\n",
              "         'knowledge', 'based', 'data', 'web'], dtype='<U17'),\n",
              "  array(['intensive', 'level', 'design', 'approach', 'study', 'technique',\n",
              "         'high', 'purpose', 'rule', 'analyzing'], dtype='<U17'),\n",
              "  array(['processing', 'natural', 'language', 'nlp', 'machine', 'present',\n",
              "         'resource', 'learning', 'tasks', 'translation'], dtype='<U17'),\n",
              "  array(['use', 'source', 'word', 'sense', 'information', 'various', 'make',\n",
              "         'lexicon', 'experience', 'expanded'], dtype='<U17'),\n",
              "  array(['natural', 'language', 'processing', 'nlp', 'analysis', 'text',\n",
              "         'paper', 'syntactic', 'new', 'developed'], dtype='<U17'),\n",
              "  array(['information', 'word', 'retrieval', 'sense', 'problem', 'used',\n",
              "         'document', 'based', 'statistic', 'semantic'], dtype='<U17'),\n",
              "  array(['processing', 'language', 'natural', 'learning', 'work',\n",
              "         'application', 'development', 'machine', 'nlp', 'current'],\n",
              "        dtype='<U17'),\n",
              "  array(['language', 'natural', 'processing', 'nlp', 'research',\n",
              "         'information', 'result', 'machine', 'recent', 'key'], dtype='<U17'),\n",
              "  array(['language', 'natural', 'processing', 'systems', 'development',\n",
              "         'process', 'single', 'learning', 'computational', 'model'],\n",
              "        dtype='<U17'),\n",
              "  array(['language', 'natural', 'processing', 'abstract', 'task',\n",
              "         'approach', 'process', 'linguistic', 'architecture', 'use'],\n",
              "        dtype='<U17')]}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C9uDcPqwXCTe"
      },
      "source": [
        "#Summarize and describe the topic for each cluster\n",
        "\n",
        "1. natural language processing is knowledge information based on data web\n",
        "2.Intensive level design approach and high purpose rule analyzing\n",
        "3. natural language processing nlp machine present resource learning tasks translation\n",
        "4.using various source word sense information make lexicon experience expanded\n",
        "5.natural language processing nlp analysis new developed text paper syntactic\n",
        "6.information word retrieval sense problem used document based statistic semantic\n",
        "7.processing language natural learning work application development machine nlp current\n",
        "8.natural processing systems development process single learning computational model\n",
        "9.natural processing abstract task approach process use linguistic architecture "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AfpMRCrRwN6Z"
      },
      "source": [
        "# **Question 2: Sentiment Analysis**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3iMBbdNeTdpz"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1dCQEbDawWCw"
      },
      "source": [
        "(30 points). Sentiment analysis also known as opinion mining is a sub field within Natural Language Processing (NLP) that builds machine learning algorithms to classify a text according to the sentimental polarities of opinions it contains, e.g., positive, negative, neutral. The purpose of this question is to develop a machine learning classifier for sentiment analysis. Based on the dataset from assignment three, write a python program to implement a sentiment classifier and evaluate its performance. Notice: **80% data for training and 20% data for testing**.  \n",
        "\n",
        "(1) Features used for sentiment classification and explain why you select these features.\n",
        "\n",
        "(2) Select two of the supervised learning algorithm from scikit-learn library: https://scikit-learn.org/stable/supervised_learning.html#supervised-learning, to build a sentiment classifier respectively. \n",
        "\n",
        "(3) Compare the performance over accuracy, precision, recall, and F1 score for the two algorithms you selected. Here is the reference of how to calculate these metrics: https://towardsdatascience.com/accuracy-precision-recall-or-f1-331fb37c5cb9. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "vATjQNTY8buA",
        "outputId": "e03c89a2-ff69-44de-dc21-a33d677c94ad"
      },
      "source": [
        "# Write your code here\n",
        "\n",
        "df = pd.read_csv('/content/sentimental_analysis1.csv')\n",
        "df.head(100)\n"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Titles</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>text directly (rather than e.g. titles and abs...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ABSTRACT: Language is way of communicating you...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>We report experiments on the use of standard n...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>this paper, we will describe a simple rule-bas...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>This paper focuses on connectionist models in ...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>84</th>\n",
              "      <td>This paper presents a workbench built by Pribe...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>85</th>\n",
              "      <td>Abstract—Natural Language Processing (NLP) is ...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>86</th>\n",
              "      <td>ABSTRACT: After twenty years of disfavor, a te...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87</th>\n",
              "      <td>Text statistics are frequently used in stylome...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>We summarize our experience using FrameNet in ...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>89 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Titles sentiment\n",
              "0   text directly (rather than e.g. titles and abs...  positive\n",
              "1   ABSTRACT: Language is way of communicating you...  positive\n",
              "2   We report experiments on the use of standard n...  positive\n",
              "3   this paper, we will describe a simple rule-bas...  positive\n",
              "4   This paper focuses on connectionist models in ...  positive\n",
              "..                                                ...       ...\n",
              "84  This paper presents a workbench built by Pribe...  positive\n",
              "85  Abstract—Natural Language Processing (NLP) is ...  positive\n",
              "86  ABSTRACT: After twenty years of disfavor, a te...  positive\n",
              "87  Text statistics are frequently used in stylome...  positive\n",
              "88  We summarize our experience using FrameNet in ...  positive\n",
              "\n",
              "[89 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "id": "SJVMVAcUhUhe",
        "outputId": "c24b8e02-8cc1-4d39-cddf-4adad5398287"
      },
      "source": [
        "from nltk import word_tokenize, sent_tokenize\n",
        "from nltk.corpus import stopwords\n",
        "nltk.download('stopwords')\n",
        "nltk.download('punkt')\n",
        "nltk.download('wordnet')\n",
        "from textblob import Word\n",
        "from wordcloud import WordCloud, STOPWORDS\n",
        "from textblob import TextBlob\n",
        "import string\n",
        "stop = stopwords.words('english')\n",
        "\n",
        "\n",
        "df['Titles'] = df['Titles'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\n",
        "df['Titles'] = df['Titles'].apply(lambda  x: \" \".join(x for x in x.split() if x not in string.punctuation))\n",
        "df['Titles'] = df['Titles'].apply(lambda x: \" \".join(x for x in x.split() if x not in stop))\n",
        "df['Titles'] = df['Titles'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))\n",
        "df.head()"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Titles</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>text directly (rather e.g. title abstracts), s...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>abstract: language way communicating word lang...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>report experiment use standard natural languag...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>paper, describe simple rule-based approach aut...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>paper focus connectionist model natural langua...</td>\n",
              "      <td>positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                              Titles sentiment\n",
              "0  text directly (rather e.g. title abstracts), s...  positive\n",
              "1  abstract: language way communicating word lang...  positive\n",
              "2  report experiment use standard natural languag...  positive\n",
              "3  paper, describe simple rule-based approach aut...  positive\n",
              "4  paper focus connectionist model natural langua...  positive"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AsdcQdE4fZ7L",
        "outputId": "6d1131f5-31ec-4b6b-8dc1-5799f5c818d9"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "vector = TfidfVectorizer()\n",
        "tfidf = vector.fit_transform(df['Titles'])\n",
        "print(tfidf.shape)\n"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(89, 1026)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IlwjBD-XfZ9v"
      },
      "source": [
        "#splitting data \n",
        "x_train, x_test, y_train, y_test = train_test_split(tfidf, df['sentiment'].values,\n",
        "                                                test_size=0.2, random_state=1)"
      ],
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mc3-diUIfaAN",
        "outputId": "a69a40ea-56eb-42e4-d2bf-7039b21e785e"
      },
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "knn = KNeighborsClassifier()\n",
        "dt = DecisionTreeClassifier()\n",
        "\n",
        "#accuracy using KNeighbours\n",
        "from sklearn.model_selection import cross_val_score\n",
        "accuracy = cross_val_score(knn, x_test, y_test, cv=10)\n",
        "knn_model = knn.fit(x_train,y_train)\n",
        "knn= knn_model.predict(x_test)\n",
        "print(\"----------The accuracy using knn--------\",accuracy.mean())\n",
        "print(classification_report(y_test,knn))\n",
        "\n",
        "\n",
        "\n",
        "#Accuracy using decision tree\n",
        "model1= dt.fit(x_train,y_train)\n",
        "decision_tree = model1.predict(x_test)\n",
        "accuracy = cross_val_score(dt, x_test, y_test, cv=10)\n",
        "\n",
        "print(\"----------The accuracy for decision trees----------\",accuracy.mean())\n",
        "print(classification_report(y_test,decision_tree))"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "----------The accuracy using knn-------- 0.7\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.20      0.33      0.25         3\n",
            "     neutral       0.00      0.00      0.00         3\n",
            "    positive       0.69      0.75      0.72        12\n",
            "\n",
            "    accuracy                           0.56        18\n",
            "   macro avg       0.30      0.36      0.32        18\n",
            "weighted avg       0.49      0.56      0.52        18\n",
            "\n",
            "----------The accuracy for decision trees---------- 0.55\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       1.00      0.33      0.50         3\n",
            "     neutral       0.00      0.00      0.00         3\n",
            "    positive       0.69      0.92      0.79        12\n",
            "\n",
            "    accuracy                           0.67        18\n",
            "   macro avg       0.56      0.42      0.43        18\n",
            "weighted avg       0.62      0.67      0.61        18\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=10.\n",
            "  % (min_groups, self.n_splits)), UserWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=10.\n",
            "  % (min_groups, self.n_splits)), UserWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0NCEeq2ukHrn"
      },
      "source": [
        "I have TF-IDF for sentiment classification. the reason for choosing this paticular one because it is more accurate  to evaluate \n",
        "words in a set of documents.It is more effective to convert text to numbers called as text vectorization. It is one of the \n",
        "most accurate method to be used for information retrevial and keyword extraction. Once the text is converted tf-idf can be used\n",
        "with other algorithms like svm, knn neighbours to get basic results which can be seen above."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E5mmYIfN8eYV"
      },
      "source": [
        "# **Question 3: House price prediction**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hsi2y4z88ngX"
      },
      "source": [
        "(40 points). You are required to build a **regression** model to predict the house price with 79 explanatory variables describing (almost) every aspect of residential homes. The purpose of this question is to practice regression analysis, an supervised learning model. The training data, testing data, and data description files can be download here: https://github.com/unt-iialab/info5731_spring2021/blob/main/assignment/assignment4-question3-data.zip. Here is an axample for implementation: https://towardsdatascience.com/linear-regression-in-python-predict-the-bay-areas-home-price-5c91c8378878. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "XfvMKJjIXS5G",
        "outputId": "9a15881d-dfba-40f0-a34f-e870ced815db"
      },
      "source": [
        "# Write your code here\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "train = pd.read_csv(r'/content/train.csv')\n",
        "test = pd.read_csv(r'/content/test.csv')\n",
        "\n",
        "train.head()\n"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>MSZoning</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>Street</th>\n",
              "      <th>Alley</th>\n",
              "      <th>LotShape</th>\n",
              "      <th>LandContour</th>\n",
              "      <th>Utilities</th>\n",
              "      <th>LotConfig</th>\n",
              "      <th>LandSlope</th>\n",
              "      <th>Neighborhood</th>\n",
              "      <th>Condition1</th>\n",
              "      <th>Condition2</th>\n",
              "      <th>BldgType</th>\n",
              "      <th>HouseStyle</th>\n",
              "      <th>OverallQual</th>\n",
              "      <th>OverallCond</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>YearRemodAdd</th>\n",
              "      <th>RoofStyle</th>\n",
              "      <th>RoofMatl</th>\n",
              "      <th>Exterior1st</th>\n",
              "      <th>Exterior2nd</th>\n",
              "      <th>MasVnrType</th>\n",
              "      <th>MasVnrArea</th>\n",
              "      <th>ExterQual</th>\n",
              "      <th>ExterCond</th>\n",
              "      <th>Foundation</th>\n",
              "      <th>BsmtQual</th>\n",
              "      <th>BsmtCond</th>\n",
              "      <th>BsmtExposure</th>\n",
              "      <th>BsmtFinType1</th>\n",
              "      <th>BsmtFinSF1</th>\n",
              "      <th>BsmtFinType2</th>\n",
              "      <th>BsmtFinSF2</th>\n",
              "      <th>BsmtUnfSF</th>\n",
              "      <th>TotalBsmtSF</th>\n",
              "      <th>Heating</th>\n",
              "      <th>...</th>\n",
              "      <th>CentralAir</th>\n",
              "      <th>Electrical</th>\n",
              "      <th>1stFlrSF</th>\n",
              "      <th>2ndFlrSF</th>\n",
              "      <th>LowQualFinSF</th>\n",
              "      <th>GrLivArea</th>\n",
              "      <th>BsmtFullBath</th>\n",
              "      <th>BsmtHalfBath</th>\n",
              "      <th>FullBath</th>\n",
              "      <th>HalfBath</th>\n",
              "      <th>BedroomAbvGr</th>\n",
              "      <th>KitchenAbvGr</th>\n",
              "      <th>KitchenQual</th>\n",
              "      <th>TotRmsAbvGrd</th>\n",
              "      <th>Functional</th>\n",
              "      <th>Fireplaces</th>\n",
              "      <th>FireplaceQu</th>\n",
              "      <th>GarageType</th>\n",
              "      <th>GarageYrBlt</th>\n",
              "      <th>GarageFinish</th>\n",
              "      <th>GarageCars</th>\n",
              "      <th>GarageArea</th>\n",
              "      <th>GarageQual</th>\n",
              "      <th>GarageCond</th>\n",
              "      <th>PavedDrive</th>\n",
              "      <th>WoodDeckSF</th>\n",
              "      <th>OpenPorchSF</th>\n",
              "      <th>EnclosedPorch</th>\n",
              "      <th>3SsnPorch</th>\n",
              "      <th>ScreenPorch</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>PoolQC</th>\n",
              "      <th>Fence</th>\n",
              "      <th>MiscFeature</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SaleType</th>\n",
              "      <th>SaleCondition</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>65.0</td>\n",
              "      <td>8450</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Inside</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>CollgCr</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>2Story</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2003</td>\n",
              "      <td>2003</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>BrkFace</td>\n",
              "      <td>196.0</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>PConc</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>No</td>\n",
              "      <td>GLQ</td>\n",
              "      <td>706</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0</td>\n",
              "      <td>150</td>\n",
              "      <td>856</td>\n",
              "      <td>GasA</td>\n",
              "      <td>...</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>856</td>\n",
              "      <td>854</td>\n",
              "      <td>0</td>\n",
              "      <td>1710</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>8</td>\n",
              "      <td>Typ</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>2003.0</td>\n",
              "      <td>RFn</td>\n",
              "      <td>2</td>\n",
              "      <td>548</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>61</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>208500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>RL</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9600</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>FR2</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>Veenker</td>\n",
              "      <td>Feedr</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>1Story</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>1976</td>\n",
              "      <td>1976</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>MetalSd</td>\n",
              "      <td>MetalSd</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>CBlock</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>Gd</td>\n",
              "      <td>ALQ</td>\n",
              "      <td>978</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0</td>\n",
              "      <td>284</td>\n",
              "      <td>1262</td>\n",
              "      <td>GasA</td>\n",
              "      <td>...</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>1262</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1262</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>TA</td>\n",
              "      <td>6</td>\n",
              "      <td>Typ</td>\n",
              "      <td>1</td>\n",
              "      <td>TA</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>1976.0</td>\n",
              "      <td>RFn</td>\n",
              "      <td>2</td>\n",
              "      <td>460</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>298</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2007</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>181500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>68.0</td>\n",
              "      <td>11250</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Inside</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>CollgCr</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>2Story</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>2001</td>\n",
              "      <td>2002</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>BrkFace</td>\n",
              "      <td>162.0</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>PConc</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>Mn</td>\n",
              "      <td>GLQ</td>\n",
              "      <td>486</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0</td>\n",
              "      <td>434</td>\n",
              "      <td>920</td>\n",
              "      <td>GasA</td>\n",
              "      <td>...</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>920</td>\n",
              "      <td>866</td>\n",
              "      <td>0</td>\n",
              "      <td>1786</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>6</td>\n",
              "      <td>Typ</td>\n",
              "      <td>1</td>\n",
              "      <td>TA</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>2001.0</td>\n",
              "      <td>RFn</td>\n",
              "      <td>2</td>\n",
              "      <td>608</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>223500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>70</td>\n",
              "      <td>RL</td>\n",
              "      <td>60.0</td>\n",
              "      <td>9550</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Corner</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>Crawfor</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>2Story</td>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>1915</td>\n",
              "      <td>1970</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>Wd Sdng</td>\n",
              "      <td>Wd Shng</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>BrkTil</td>\n",
              "      <td>TA</td>\n",
              "      <td>Gd</td>\n",
              "      <td>No</td>\n",
              "      <td>ALQ</td>\n",
              "      <td>216</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0</td>\n",
              "      <td>540</td>\n",
              "      <td>756</td>\n",
              "      <td>GasA</td>\n",
              "      <td>...</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>961</td>\n",
              "      <td>756</td>\n",
              "      <td>0</td>\n",
              "      <td>1717</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>7</td>\n",
              "      <td>Typ</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>Detchd</td>\n",
              "      <td>1998.0</td>\n",
              "      <td>Unf</td>\n",
              "      <td>3</td>\n",
              "      <td>642</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>35</td>\n",
              "      <td>272</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2006</td>\n",
              "      <td>WD</td>\n",
              "      <td>Abnorml</td>\n",
              "      <td>140000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>84.0</td>\n",
              "      <td>14260</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>FR2</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>NoRidge</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>2Story</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>2000</td>\n",
              "      <td>2000</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>BrkFace</td>\n",
              "      <td>350.0</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>PConc</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>Av</td>\n",
              "      <td>GLQ</td>\n",
              "      <td>655</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0</td>\n",
              "      <td>490</td>\n",
              "      <td>1145</td>\n",
              "      <td>GasA</td>\n",
              "      <td>...</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>1145</td>\n",
              "      <td>1053</td>\n",
              "      <td>0</td>\n",
              "      <td>2198</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>9</td>\n",
              "      <td>Typ</td>\n",
              "      <td>1</td>\n",
              "      <td>TA</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>2000.0</td>\n",
              "      <td>RFn</td>\n",
              "      <td>3</td>\n",
              "      <td>836</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>192</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>250000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 81 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "   Id  MSSubClass MSZoning  ...  SaleType  SaleCondition SalePrice\n",
              "0   1          60       RL  ...        WD         Normal    208500\n",
              "1   2          20       RL  ...        WD         Normal    181500\n",
              "2   3          60       RL  ...        WD         Normal    223500\n",
              "3   4          70       RL  ...        WD        Abnorml    140000\n",
              "4   5          60       RL  ...        WD         Normal    250000\n",
              "\n",
              "[5 rows x 81 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "9Mqb8MHfndnk",
        "outputId": "9ae7ec9f-31af-4780-81e6-029c65c23541"
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>MSZoning</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>Street</th>\n",
              "      <th>Alley</th>\n",
              "      <th>LotShape</th>\n",
              "      <th>LandContour</th>\n",
              "      <th>Utilities</th>\n",
              "      <th>LotConfig</th>\n",
              "      <th>LandSlope</th>\n",
              "      <th>Neighborhood</th>\n",
              "      <th>Condition1</th>\n",
              "      <th>Condition2</th>\n",
              "      <th>BldgType</th>\n",
              "      <th>HouseStyle</th>\n",
              "      <th>OverallQual</th>\n",
              "      <th>OverallCond</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>YearRemodAdd</th>\n",
              "      <th>RoofStyle</th>\n",
              "      <th>RoofMatl</th>\n",
              "      <th>Exterior1st</th>\n",
              "      <th>Exterior2nd</th>\n",
              "      <th>MasVnrType</th>\n",
              "      <th>MasVnrArea</th>\n",
              "      <th>ExterQual</th>\n",
              "      <th>ExterCond</th>\n",
              "      <th>Foundation</th>\n",
              "      <th>BsmtQual</th>\n",
              "      <th>BsmtCond</th>\n",
              "      <th>BsmtExposure</th>\n",
              "      <th>BsmtFinType1</th>\n",
              "      <th>BsmtFinSF1</th>\n",
              "      <th>BsmtFinType2</th>\n",
              "      <th>BsmtFinSF2</th>\n",
              "      <th>BsmtUnfSF</th>\n",
              "      <th>TotalBsmtSF</th>\n",
              "      <th>Heating</th>\n",
              "      <th>HeatingQC</th>\n",
              "      <th>CentralAir</th>\n",
              "      <th>Electrical</th>\n",
              "      <th>1stFlrSF</th>\n",
              "      <th>2ndFlrSF</th>\n",
              "      <th>LowQualFinSF</th>\n",
              "      <th>GrLivArea</th>\n",
              "      <th>BsmtFullBath</th>\n",
              "      <th>BsmtHalfBath</th>\n",
              "      <th>FullBath</th>\n",
              "      <th>HalfBath</th>\n",
              "      <th>BedroomAbvGr</th>\n",
              "      <th>KitchenAbvGr</th>\n",
              "      <th>KitchenQual</th>\n",
              "      <th>TotRmsAbvGrd</th>\n",
              "      <th>Functional</th>\n",
              "      <th>Fireplaces</th>\n",
              "      <th>FireplaceQu</th>\n",
              "      <th>GarageType</th>\n",
              "      <th>GarageYrBlt</th>\n",
              "      <th>GarageFinish</th>\n",
              "      <th>GarageCars</th>\n",
              "      <th>GarageArea</th>\n",
              "      <th>GarageQual</th>\n",
              "      <th>GarageCond</th>\n",
              "      <th>PavedDrive</th>\n",
              "      <th>WoodDeckSF</th>\n",
              "      <th>OpenPorchSF</th>\n",
              "      <th>EnclosedPorch</th>\n",
              "      <th>3SsnPorch</th>\n",
              "      <th>ScreenPorch</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>PoolQC</th>\n",
              "      <th>Fence</th>\n",
              "      <th>MiscFeature</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SaleType</th>\n",
              "      <th>SaleCondition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1461</td>\n",
              "      <td>20</td>\n",
              "      <td>RH</td>\n",
              "      <td>80.0</td>\n",
              "      <td>11622</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Inside</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>NAmes</td>\n",
              "      <td>Feedr</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>1Story</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>1961</td>\n",
              "      <td>1961</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>CBlock</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>No</td>\n",
              "      <td>Rec</td>\n",
              "      <td>468.0</td>\n",
              "      <td>LwQ</td>\n",
              "      <td>144.0</td>\n",
              "      <td>270.0</td>\n",
              "      <td>882.0</td>\n",
              "      <td>GasA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>896</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>896</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>TA</td>\n",
              "      <td>5</td>\n",
              "      <td>Typ</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>1961.0</td>\n",
              "      <td>Unf</td>\n",
              "      <td>1.0</td>\n",
              "      <td>730.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>140</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>120</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>MnPrv</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>2010</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1462</td>\n",
              "      <td>20</td>\n",
              "      <td>RL</td>\n",
              "      <td>81.0</td>\n",
              "      <td>14267</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Corner</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>NAmes</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>1Story</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1958</td>\n",
              "      <td>1958</td>\n",
              "      <td>Hip</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>Wd Sdng</td>\n",
              "      <td>Wd Sdng</td>\n",
              "      <td>BrkFace</td>\n",
              "      <td>108.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>CBlock</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>No</td>\n",
              "      <td>ALQ</td>\n",
              "      <td>923.0</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0.0</td>\n",
              "      <td>406.0</td>\n",
              "      <td>1329.0</td>\n",
              "      <td>GasA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>1329</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1329</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>6</td>\n",
              "      <td>Typ</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>1958.0</td>\n",
              "      <td>Unf</td>\n",
              "      <td>1.0</td>\n",
              "      <td>312.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>393</td>\n",
              "      <td>36</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Gar2</td>\n",
              "      <td>12500</td>\n",
              "      <td>6</td>\n",
              "      <td>2010</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1463</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>74.0</td>\n",
              "      <td>13830</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Inside</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>Gilbert</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>2Story</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1997</td>\n",
              "      <td>1998</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>PConc</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>No</td>\n",
              "      <td>GLQ</td>\n",
              "      <td>791.0</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>928.0</td>\n",
              "      <td>GasA</td>\n",
              "      <td>Gd</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>928</td>\n",
              "      <td>701</td>\n",
              "      <td>0</td>\n",
              "      <td>1629</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>TA</td>\n",
              "      <td>6</td>\n",
              "      <td>Typ</td>\n",
              "      <td>1</td>\n",
              "      <td>TA</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>1997.0</td>\n",
              "      <td>Fin</td>\n",
              "      <td>2.0</td>\n",
              "      <td>482.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>212</td>\n",
              "      <td>34</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>MnPrv</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2010</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1464</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>78.0</td>\n",
              "      <td>9978</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Inside</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>Gilbert</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>1Fam</td>\n",
              "      <td>2Story</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1998</td>\n",
              "      <td>1998</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>VinylSd</td>\n",
              "      <td>BrkFace</td>\n",
              "      <td>20.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>PConc</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>No</td>\n",
              "      <td>GLQ</td>\n",
              "      <td>602.0</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0.0</td>\n",
              "      <td>324.0</td>\n",
              "      <td>926.0</td>\n",
              "      <td>GasA</td>\n",
              "      <td>Ex</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>926</td>\n",
              "      <td>678</td>\n",
              "      <td>0</td>\n",
              "      <td>1604</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>7</td>\n",
              "      <td>Typ</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>1998.0</td>\n",
              "      <td>Fin</td>\n",
              "      <td>2.0</td>\n",
              "      <td>470.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>360</td>\n",
              "      <td>36</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>2010</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1465</td>\n",
              "      <td>120</td>\n",
              "      <td>RL</td>\n",
              "      <td>43.0</td>\n",
              "      <td>5005</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>HLS</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>Inside</td>\n",
              "      <td>Gtl</td>\n",
              "      <td>StoneBr</td>\n",
              "      <td>Norm</td>\n",
              "      <td>Norm</td>\n",
              "      <td>TwnhsE</td>\n",
              "      <td>1Story</td>\n",
              "      <td>8</td>\n",
              "      <td>5</td>\n",
              "      <td>1992</td>\n",
              "      <td>1992</td>\n",
              "      <td>Gable</td>\n",
              "      <td>CompShg</td>\n",
              "      <td>HdBoard</td>\n",
              "      <td>HdBoard</td>\n",
              "      <td>None</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>PConc</td>\n",
              "      <td>Gd</td>\n",
              "      <td>TA</td>\n",
              "      <td>No</td>\n",
              "      <td>ALQ</td>\n",
              "      <td>263.0</td>\n",
              "      <td>Unf</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1017.0</td>\n",
              "      <td>1280.0</td>\n",
              "      <td>GasA</td>\n",
              "      <td>Ex</td>\n",
              "      <td>Y</td>\n",
              "      <td>SBrkr</td>\n",
              "      <td>1280</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1280</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>Gd</td>\n",
              "      <td>5</td>\n",
              "      <td>Typ</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Attchd</td>\n",
              "      <td>1992.0</td>\n",
              "      <td>RFn</td>\n",
              "      <td>2.0</td>\n",
              "      <td>506.0</td>\n",
              "      <td>TA</td>\n",
              "      <td>TA</td>\n",
              "      <td>Y</td>\n",
              "      <td>0</td>\n",
              "      <td>82</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>144</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2010</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Id  MSSubClass MSZoning  ...  YrSold  SaleType SaleCondition\n",
              "0  1461          20       RH  ...    2010        WD        Normal\n",
              "1  1462          20       RL  ...    2010        WD        Normal\n",
              "2  1463          60       RL  ...    2010        WD        Normal\n",
              "3  1464          60       RL  ...    2010        WD        Normal\n",
              "4  1465         120       RL  ...    2010        WD        Normal\n",
              "\n",
              "[5 rows x 80 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JL7cLm14n68v",
        "outputId": "55283376-a2da-4fa6-b2d5-8b9bf408ad7a"
      },
      "source": [
        "train.columns"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
              "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
              "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
              "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
              "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
              "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
              "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
              "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
              "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
              "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
              "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
              "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
              "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
              "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
              "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
              "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
              "       'SaleCondition', 'SalePrice'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F2aGndS7oRBd",
        "outputId": "97fb313e-b520-441d-b28a-f8f642d938d6"
      },
      "source": [
        "train['SalePrice'].describe()"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count      1460.000000\n",
              "mean     180921.195890\n",
              "std       79442.502883\n",
              "min       34900.000000\n",
              "25%      129975.000000\n",
              "50%      163000.000000\n",
              "75%      214000.000000\n",
              "max      755000.000000\n",
              "Name: SalePrice, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "5kGmWIKNotcQ",
        "outputId": "c56a4081-3de5-4970-c141-60d215d8a5aa"
      },
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "train.hist(bins=20, figsize=(40,15))\n",
        "plt.savefig(\"attribute_histogram_plots\")\n",
        "plt.show()"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 2880x1080 with 42 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 592
        },
        "id": "O80Gll5to6dR",
        "outputId": "cc5211d9-3639-42e7-8a9b-5c3ef542ec5c"
      },
      "source": [
        "\n",
        "plt.hist(train['PoolArea'],color='red')\n",
        "plt.show()\n",
        "sns.distplot(train['SalePrice'],color='blue')\n",
        "plt.show()\n"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAASVElEQVR4nO3dbYxc133f8e+vpCXHcirqYauqJFHSDeFADdKYGMgyHBiG1cqSaph64Roygop1WRBtlNauAjhUAkRo8iZuiygWkCplLcU04MpWFaciDKcKKykwWlS0l7KeZVkb+YEkJHFtPbiN0SZK/n0xh/J4tRS1M8vZIc/3Awzm3HPO3PvfHfE3d8/cGaWqkCT14a+tdQGSpOkx9CWpI4a+JHXE0Jekjhj6ktSR9WtdwOu58MILa8uWLWtdhiSdVg4dOvS9qppbbmymQ3/Lli3Mz8+vdRmSdFpJ8p0Tjbm8I0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHZnpT+ROLFmb4/o/ppE0ozzTl6SOGPqS1BFDX5I6ctLQT3J7kmNJHltm7JeTVJIL23aS3JJkIckjSbaPzN2Z5Ol227m6P4Yk6Y14I2f6nwGuXNqZZDNwBfDdke6rgG3tthu4tc09H7gJeCdwKXBTkvMmKVyStHInDf2q+grwwjJDNwOfAEYvVdkBfLaGHgA2JLkYeD9woKpeqKoXgQMs80IiSTq1xlrTT7IDOFpVDy8Z2ggcHtk+0vpO1L/cvncnmU8yv7i4OE55kqQTWHHoJ3kL8KvAr69+OVBVe6tqUFWDubll/29fkqQxjXOm/3eArcDDSb4NbAIeTPI3gaPA5pG5m1rfifolSVO04tCvqker6m9U1Zaq2sJwqWZ7VT0H7Aeua1fxXAa8XFXPAvcAVyQ5r72Be0XrkyRN0Ru5ZPMO4H8Bb09yJMmu15n+ZeAZYAH4T8AvAlTVC8BvAl9rt99ofZKkKUrN8PfEDAaDmp+fH38HfveOpA4lOVRVg+XG/ESuJHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6ctLQT3J7kmNJHhvp+3dJvpHkkSR/mGTDyNiNSRaSPJXk/SP9V7a+hSR7Vv9HkSSdzBs50/8McOWSvgPAz1TVzwLfBG4ESHIJcC3wd9tj/kOSdUnWAb8LXAVcAnykzZUkTdFJQ7+qvgK8sKTvj6vqlbb5ALCptXcAn6+q/1dV3wIWgEvbbaGqnqmqPwc+3+ZKkqZoNdb0/ynwR629ETg8Mnak9Z2o/zWS7E4yn2R+cXFxFcqTJB03Uegn+TXgFeBzq1MOVNXeqhpU1WBubm61ditJAtaP+8Ak/wT4AHB5VVXrPgpsHpm2qfXxOv2SpCkZ60w/yZXAJ4APVtUPR4b2A9cmOTvJVmAb8FXga8C2JFuTnMXwzd79k5UuSVqpk57pJ7kDeC9wYZIjwE0Mr9Y5GziQBOCBqvrnVfV4kjuBJxgu+1xfVX/Z9vNLwD3AOuD2qnr8FPw8kqTXkR+tzMyewWBQ8/Pz4+9g+II0fTP8O5V05ktyqKoGy435iVxJ6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpIycN/SS3JzmW5LGRvvOTHEjydLs/r/UnyS1JFpI8kmT7yGN2tvlPJ9l5an4cSdLreSNn+p8BrlzStwe4t6q2Afe2bYCrgG3tthu4FYYvEsBNwDuBS4Gbjr9QSJKm56ShX1VfAV5Y0r0D2Nfa+4BrRvo/W0MPABuSXAy8HzhQVS9U1YvAAV77QiJJOsXGXdO/qKqebe3ngItaeyNweGTekdZ3ov7XSLI7yXyS+cXFxTHLkyQtZ+I3cquqgFqFWo7vb29VDapqMDc3t1q7lSQxfug/35ZtaPfHWv9RYPPIvE2t70T9kqQpGjf09wPHr8DZCdw90n9du4rnMuDltgx0D3BFkvPaG7hXtD5J0hStP9mEJHcA7wUuTHKE4VU4vwXcmWQX8B3gw236l4GrgQXgh8BHAarqhSS/CXytzfuNqlr65rAk6RTLcEl+Ng0Gg5qfnx9/B8nqFbMSM/w7lXTmS3KoqgbLjfmJXEnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdWSi0E/yr5M8nuSxJHckeXOSrUkOJllI8oUkZ7W5Z7fthTa+ZTV+AEnSGzd26CfZCPwrYFBVPwOsA64FPgncXFU/BbwI7GoP2QW82PpvbvMkSVM06fLOeuAnkqwH3gI8C7wPuKuN7wOuae0dbZs2fnmSTHh8SdIKjB36VXUU+PfAdxmG/cvAIeClqnqlTTsCbGztjcDh9thX2vwLlu43ye4k80nmFxcXxy1PkrSMSZZ3zmN49r4V+FvAOcCVkxZUVXuralBVg7m5uUl3J0kaMcnyzt8HvlVVi1X1F8AXgXcDG9pyD8Am4GhrHwU2A7Txc4HvT3B8SdIKTRL63wUuS/KWtjZ/OfAEcD/woTZnJ3B3a+9v27Tx+6qqJji+JGmFJlnTP8jwDdkHgUfbvvYCvwLckGSB4Zr9be0htwEXtP4bgD0T1C1JGkNm+WR7MBjU/Pz8+DtYq4uDZvh3KunMl+RQVQ2WG/MTuZLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHJgr9JBuS3JXkG0meTPKuJOcnOZDk6XZ/XpubJLckWUjySJLtq/MjSJLeqEnP9D8F/Leq+mng7wFPAnuAe6tqG3Bv2wa4CtjWbruBWyc8tiRphcYO/STnAu8BbgOoqj+vqpeAHcC+Nm0fcE1r7wA+W0MPABuSXDx25ZKkFZvkTH8rsAj8fpKvJ/l0knOAi6rq2TbnOeCi1t4IHB55/JHW92OS7E4yn2R+cXFxgvIkSUtNEvrrge3ArVX1DuDP+NFSDgBVVUCtZKdVtbeqBlU1mJubm6A8SdJSk4T+EeBIVR1s23cxfBF4/viyTbs/1saPAptHHr+p9UmSpmTs0K+q54DDSd7eui4HngD2Aztb307g7tbeD1zXruK5DHh5ZBlIkjQF6yd8/L8EPpfkLOAZ4KMMX0juTLIL+A7w4Tb3y8DVwALwwzZXkjRFE4V+VT0EDJYZunyZuQVcP8nxJEmT8RO5ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqyMShn2Rdkq8n+VLb3prkYJKFJF9IclbrP7ttL7TxLZMeW5K0Mqtxpv8x4MmR7U8CN1fVTwEvArta/y7gxdZ/c5snSZqiiUI/ySbgHwKfbtsB3gfc1absA65p7R1tmzZ+eZsvSZqSSc/0fwf4BPBXbfsC4KWqeqVtHwE2tvZG4DBAG3+5zf8xSXYnmU8yv7i4OGF5kqRRY4d+kg8Ax6rq0CrWQ1XtrapBVQ3m5uZWc9eS1L31Ezz23cAHk1wNvBn468CngA1J1rez+U3A0Tb/KLAZOJJkPXAu8P0Jji9JWqGxz/Sr6saq2lRVW4Brgfuq6heA+4EPtWk7gbtbe3/bpo3fV1U17vElSSt3Kq7T/xXghiQLDNfsb2v9twEXtP4bgD2n4NiSpNcxyfLOq6rqT4A/ae1ngEuXmfN/gX+0GseTJI3HT+RKUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHRk79JNsTnJ/kieSPJ7kY63//CQHkjzd7s9r/UlyS5KFJI8k2b5aP4Qk6Y2Z5Ez/FeCXq+oS4DLg+iSXAHuAe6tqG3Bv2wa4CtjWbruBWyc4tiRpDGOHflU9W1UPtvb/Bp4ENgI7gH1t2j7gmtbeAXy2hh4ANiS5eOzKJUkrtipr+km2AO8ADgIXVdWzbeg54KLW3ggcHnnYkda3dF+7k8wnmV9cXFyN8iRJzcShn+StwB8AH6+qH4yOVVUBtZL9VdXeqhpU1WBubm7S8iRJIyYK/SRvYhj4n6uqL7bu548v27T7Y63/KLB55OGbWp8kaUomuXonwG3Ak1X12yND+4Gdrb0TuHuk/7p2Fc9lwMsjy0CSpClYP8Fj3w38Y+DRJA+1vl8Ffgu4M8ku4DvAh9vYl4GrgQXgh8BHJzi2JGkMY4d+Vf0PICcYvnyZ+QVcP+7xJEmT8xO5ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqyNRDP8mVSZ5KspBkz7SPL0k9m2roJ1kH/C5wFXAJ8JEkl0yzBknq2fopH+9SYKGqngFI8nlgB/DElOuQNI5kbY5btTbHPQNNO/Q3AodHto8A7xydkGQ3sLtt/p8kT01wvAuB703w+PGs7B/G2tS4Mta4ek6HOmevxtf+m5q9Gl9rLWv82ycamHbon1RV7QX2rsa+ksxX1WA19nWqWOPqOB1qhNOjTmtcHbNa47TfyD0KbB7Z3tT6JElTMO3Q/xqwLcnWJGcB1wL7p1yDJHVrqss7VfVKkl8C7gHWAbdX1eOn8JCrskx0ilnj6jgdaoTTo05rXB0zWWPKd8UlqRt+IleSOmLoS1JHzsjQn6Wvekhye5JjSR4b6Ts/yYEkT7f781p/ktzS6n4kyfYp1Lc5yf1JnkjyeJKPzVqN7bhvTvLVJA+3Ov9N69+a5GCr5wvtAgGSnN22F9r4lmnU2Y69LsnXk3xpFmtM8u0kjyZ5KMl865u153tDkruSfCPJk0neNYM1vr39Do/ffpDk47NW52tU1Rl1Y/gG8Z8CbwPOAh4GLlnDet4DbAceG+n7t8Ce1t4DfLK1rwb+CAhwGXBwCvVdDGxv7Z8EvsnwKzJmpsZ23ABvbe03AQfb8e8Erm39vwf8i9b+ReD3Wvta4AtTfM5vAP4z8KW2PVM1At8GLlzSN2vP9z7gn7X2WcCGWatxSb3rgOcYfihqZuusqjMy9N8F3DOyfSNw4xrXtGVJ6D8FXNzaFwNPtfZ/BD6y3Lwp1no38A9mvMa3AA8y/DT394D1S597hleIvau117d5mUJtm4B7gfcBX2r/wGetxuVCf2aeb+Bc4FtLfxezVOMyNV8B/M9Zr7OqzsjlneW+6mHjGtVyIhdV1bOt/RxwUWuvae1teeEdDM+iZ67GtmzyEHAMOMDwL7qXquqVZWp5tc42/jJwwRTK/B3gE8Bfte0LZrDGAv44yaEMv/YEZuv53gosAr/flsk+neScGatxqWuBO1p7lus8I0P/tFLDl/w1v242yVuBPwA+XlU/GB2blRqr6i+r6ucYnk1fCvz0Gpf0Y5J8ADhWVYfWupaT+Pmq2s7w226vT/Ke0cEZeL7XM1wSvbWq3gH8GcNlklfNQI2vau/RfBD4L0vHZqnO487E0D8dvurh+SQXA7T7Y61/TWpP8iaGgf+5qvriLNY4qqpeAu5nuFSyIcnxDxmO1vJqnW38XOD7p7i0dwMfTPJt4PMMl3g+NWM1UlVH2/0x4A8ZvoDO0vN9BDhSVQfb9l0MXwRmqcZRVwEPVtXzbXtW6wTOzNA/Hb7qYT+ws7V3MlxHP95/XXuX/zLg5ZE/E0+JJAFuA56sqt+exRpbnXNJNrT2TzB83+FJhuH/oRPUebz+DwH3tbOuU6aqbqyqTVW1heF/d/dV1S/MUo1Jzknyk8fbDNeiH2OGnu+qeg44nOTtretyhl+/PjM1LvERfrS0c7yeWaxzaNpvIkzjxvBd8m8yXPP9tTWu5Q7gWeAvGJ7B7GK4bnsv8DTw34Hz29ww/J/M/CnwKDCYQn0/z/DPz0eAh9rt6lmqsR33Z4GvtzofA3699b8N+CqwwPDP67Nb/5vb9kIbf9uUn/f38qOrd2amxlbLw+32+PF/HzP4fP8cMN+e7/8KnDdrNbZjn8Pwr7NzR/pmrs7Rm1/DIEkdOROXdyRJJ2DoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI78f9n3lBXdAy+TAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "id": "nm_of7Ikp6fn",
        "outputId": "f070e3bb-ea55-4490-9cc6-b59c02db0149"
      },
      "source": [
        "train.boxplot(column=['PoolArea','LotArea','BsmtFinSF1','GarageArea','LotFrontage'])\n"
      ],
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n",
            "  return array(a, dtype, copy=False, order=order)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f991e7e6ad0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 102
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "0abxSSMVqMv0",
        "outputId": "61f18050-a6a8-4e7a-a40d-46b4800f6202"
      },
      "source": [
        "text= train.isnull().sum().sort_values(ascending=False)\n",
        "percent = (train.isnull().sum()/train.isnull().count()).sort_values(ascending=False)\n",
        "data = pd.concat([text, percent], axis=1, keys=['text', 'Percent'])\n",
        "data.head(20)"
      ],
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>Percent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PoolQC</th>\n",
              "      <td>1453</td>\n",
              "      <td>0.995205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MiscFeature</th>\n",
              "      <td>1406</td>\n",
              "      <td>0.963014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Alley</th>\n",
              "      <td>1369</td>\n",
              "      <td>0.937671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fence</th>\n",
              "      <td>1179</td>\n",
              "      <td>0.807534</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>FireplaceQu</th>\n",
              "      <td>690</td>\n",
              "      <td>0.472603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LotFrontage</th>\n",
              "      <td>259</td>\n",
              "      <td>0.177397</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GarageCond</th>\n",
              "      <td>81</td>\n",
              "      <td>0.055479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GarageType</th>\n",
              "      <td>81</td>\n",
              "      <td>0.055479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GarageYrBlt</th>\n",
              "      <td>81</td>\n",
              "      <td>0.055479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GarageFinish</th>\n",
              "      <td>81</td>\n",
              "      <td>0.055479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>GarageQual</th>\n",
              "      <td>81</td>\n",
              "      <td>0.055479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BsmtExposure</th>\n",
              "      <td>38</td>\n",
              "      <td>0.026027</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BsmtFinType2</th>\n",
              "      <td>38</td>\n",
              "      <td>0.026027</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BsmtFinType1</th>\n",
              "      <td>37</td>\n",
              "      <td>0.025342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BsmtCond</th>\n",
              "      <td>37</td>\n",
              "      <td>0.025342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>BsmtQual</th>\n",
              "      <td>37</td>\n",
              "      <td>0.025342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MasVnrArea</th>\n",
              "      <td>8</td>\n",
              "      <td>0.005479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MasVnrType</th>\n",
              "      <td>8</td>\n",
              "      <td>0.005479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Electrical</th>\n",
              "      <td>1</td>\n",
              "      <td>0.000685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Utilities</th>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              text   Percent\n",
              "PoolQC        1453  0.995205\n",
              "MiscFeature   1406  0.963014\n",
              "Alley         1369  0.937671\n",
              "Fence         1179  0.807534\n",
              "FireplaceQu    690  0.472603\n",
              "LotFrontage    259  0.177397\n",
              "GarageCond      81  0.055479\n",
              "GarageType      81  0.055479\n",
              "GarageYrBlt     81  0.055479\n",
              "GarageFinish    81  0.055479\n",
              "GarageQual      81  0.055479\n",
              "BsmtExposure    38  0.026027\n",
              "BsmtFinType2    38  0.026027\n",
              "BsmtFinType1    37  0.025342\n",
              "BsmtCond        37  0.025342\n",
              "BsmtQual        37  0.025342\n",
              "MasVnrArea       8  0.005479\n",
              "MasVnrType       8  0.005479\n",
              "Electrical       1  0.000685\n",
              "Utilities        0  0.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r65Qefi9sIRp",
        "outputId": "dafefec8-5fbd-45b3-b619-aa2b47799c38"
      },
      "source": [
        "corr_matrix = train.corr()\n",
        "corr_matrix[\"SalePrice\"].sort_values(ascending=False)"
      ],
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SalePrice        1.000000\n",
              "OverallQual      0.790982\n",
              "GrLivArea        0.708624\n",
              "GarageCars       0.640409\n",
              "GarageArea       0.623431\n",
              "TotalBsmtSF      0.613581\n",
              "1stFlrSF         0.605852\n",
              "FullBath         0.560664\n",
              "TotRmsAbvGrd     0.533723\n",
              "YearBuilt        0.522897\n",
              "YearRemodAdd     0.507101\n",
              "GarageYrBlt      0.486362\n",
              "MasVnrArea       0.477493\n",
              "Fireplaces       0.466929\n",
              "BsmtFinSF1       0.386420\n",
              "LotFrontage      0.351799\n",
              "WoodDeckSF       0.324413\n",
              "2ndFlrSF         0.319334\n",
              "OpenPorchSF      0.315856\n",
              "HalfBath         0.284108\n",
              "LotArea          0.263843\n",
              "BsmtFullBath     0.227122\n",
              "BsmtUnfSF        0.214479\n",
              "BedroomAbvGr     0.168213\n",
              "ScreenPorch      0.111447\n",
              "PoolArea         0.092404\n",
              "MoSold           0.046432\n",
              "3SsnPorch        0.044584\n",
              "BsmtFinSF2      -0.011378\n",
              "BsmtHalfBath    -0.016844\n",
              "MiscVal         -0.021190\n",
              "Id              -0.021917\n",
              "LowQualFinSF    -0.025606\n",
              "YrSold          -0.028923\n",
              "OverallCond     -0.077856\n",
              "MSSubClass      -0.084284\n",
              "EnclosedPorch   -0.128578\n",
              "KitchenAbvGr    -0.135907\n",
              "Name: SalePrice, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "Ny6rlLPArrzn",
        "outputId": "d9f45f7d-af63-4cd8-9531-6e3622996dda"
      },
      "source": [
        "\n",
        "train.plot(kind=\"scatter\", x=\"Neighborhood\", y=\"SaleCondition\", alpha=0.9)\n",
        "plt.savefig('scatter.png')"
      ],
      "execution_count": 116,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "085G2imlsHH3",
        "outputId": "e235b0da-b2c6-45b1-9604-88ae0a037760"
      },
      "source": [
        "train['price_per_sqft'] = train['SalePrice']/train['LotArea']\n",
        "corr_matrix = train.corr()\n",
        "corr_matrix[\"SalePrice\"].sort_values(ascending=False)"
      ],
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SalePrice         1.000000\n",
              "OverallQual       0.790982\n",
              "GrLivArea         0.708624\n",
              "GarageCars        0.640409\n",
              "GarageArea        0.623431\n",
              "TotalBsmtSF       0.613581\n",
              "1stFlrSF          0.605852\n",
              "FullBath          0.560664\n",
              "TotRmsAbvGrd      0.533723\n",
              "YearBuilt         0.522897\n",
              "YearRemodAdd      0.507101\n",
              "GarageYrBlt       0.486362\n",
              "MasVnrArea        0.477493\n",
              "Fireplaces        0.466929\n",
              "BsmtFinSF1        0.386420\n",
              "LotFrontage       0.351799\n",
              "WoodDeckSF        0.324413\n",
              "2ndFlrSF          0.319334\n",
              "OpenPorchSF       0.315856\n",
              "HalfBath          0.284108\n",
              "price_per_sqft    0.273401\n",
              "LotArea           0.263843\n",
              "BsmtFullBath      0.227122\n",
              "BsmtUnfSF         0.214479\n",
              "BedroomAbvGr      0.168213\n",
              "ScreenPorch       0.111447\n",
              "PoolArea          0.092404\n",
              "MoSold            0.046432\n",
              "3SsnPorch         0.044584\n",
              "BsmtFinSF2       -0.011378\n",
              "BsmtHalfBath     -0.016844\n",
              "MiscVal          -0.021190\n",
              "Id               -0.021917\n",
              "LowQualFinSF     -0.025606\n",
              "YrSold           -0.028923\n",
              "OverallCond      -0.077856\n",
              "MSSubClass       -0.084284\n",
              "EnclosedPorch    -0.128578\n",
              "KitchenAbvGr     -0.135907\n",
              "Name: SalePrice, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "VrMJT8TDsBKJ",
        "outputId": "93210f79-8ed9-451b-b69e-1d67513bb1c4"
      },
      "source": [
        "freq = train.groupby('Neighborhood').count()['Alley']\n",
        "mean = train.groupby('Neighborhood').mean()['price_per_sqft']\n",
        "cluster = pd.concat([freq, mean], axis=1)\n",
        "cluster['neighborhood'] = cluster.index\n",
        "cluster.columns = ['freq', 'price_per_sqft','neighborhood']\n",
        "cluster.describe()"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>freq</th>\n",
              "      <th>price_per_sqft</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>25.000000</td>\n",
              "      <td>25.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.640000</td>\n",
              "      <td>28.002816</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.621504</td>\n",
              "      <td>18.365721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>13.179700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.505557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.630789</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>35.461897</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>43.000000</td>\n",
              "      <td>86.410256</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            freq  price_per_sqft\n",
              "count  25.000000       25.000000\n",
              "mean    3.640000       28.002816\n",
              "std     9.621504       18.365721\n",
              "min     0.000000       13.179700\n",
              "25%     0.000000       16.505557\n",
              "50%     0.000000       18.630789\n",
              "75%     1.000000       35.461897\n",
              "max    43.000000       86.410256"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dxE-bWfpuEW1"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}